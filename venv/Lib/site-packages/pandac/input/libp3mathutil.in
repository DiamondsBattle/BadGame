1630394279
3 3
13 libp3mathutil 4 LL_p 12 panda3d.core 
756
805 5 clear 0 4 1563 59 PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear 0 1 17 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear(void);

806 6 output 0 4 1563 60 PointerToBase< ReferenceCountedVector< LMatrix3d > >::output 0 1 18 0
91
void PointerToBase< ReferenceCountedVector< LMatrix3d > >::output(std::ostream &out) const;

807 19 ~PointerToArrayBase 0 4 1562 52 PointerToArrayBase< LMatrix3d >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3d >::~PointerToArrayBase(void);

808 11 operator == 0 4 1562 44 PointerToArrayBase< LMatrix3d >::operator == 0 1 15 64
// These are implemented in PointerToVoid, but expose them here.
109
inline bool PointerToArrayBase< LMatrix3d >::operator ==(PointerToArrayBase< LMatrix3d > const &other) const;

809 11 operator != 0 4 1562 44 PointerToArrayBase< LMatrix3d >::operator != 0 1 16 0
109
inline bool PointerToArrayBase< LMatrix3d >::operator !=(PointerToArrayBase< LMatrix3d > const &other) const;

810 19 ConstPointerToArray 0 4 1561 53 ConstPointerToArray< LMatrix3d >::ConstPointerToArray 0 2 1 2 0
210
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PointerToArray< LMatrix3d > const &copy);
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(ConstPointerToArray< LMatrix3d > const &copy);

811 5 clear 0 4 1561 39 ConstPointerToArray< LMatrix3d >::clear 0 1 3 0
58
inline void ConstPointerToArray< LMatrix3d >::clear(void);

812 4 size 0 4 1561 38 ConstPointerToArray< LMatrix3d >::size 0 1 4 0
81
inline unsigned long long int ConstPointerToArray< LMatrix3d >::size(void) const;

813 11 get_element 0 4 1561 45 ConstPointerToArray< LMatrix3d >::get_element 0 1 5 0
102
inline LMatrix3d const &ConstPointerToArray< LMatrix3d >::get_element(unsigned long long int n) const;

814 11 __getitem__ 0 4 1561 45 ConstPointerToArray< LMatrix3d >::__getitem__ 0 1 6 0
95
LMatrix3d const &ConstPointerToArray< LMatrix3d >::__getitem__(unsigned long long int n) const;

815 8 get_data 0 4 1561 42 ConstPointerToArray< LMatrix3d >::get_data 0 1 7 0
65
PyObject *ConstPointerToArray< LMatrix3d >::get_data(void) const;

816 11 get_subdata 0 4 1561 45 ConstPointerToArray< LMatrix3d >::get_subdata 0 1 8 0
118
PyObject *ConstPointerToArray< LMatrix3d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

817 13 get_ref_count 0 4 1561 47 ConstPointerToArray< LMatrix3d >::get_ref_count 0 1 9 0
71
inline int ConstPointerToArray< LMatrix3d >::get_ref_count(void) const;

818 18 get_node_ref_count 0 4 1561 52 ConstPointerToArray< LMatrix3d >::get_node_ref_count 0 1 10 0
76
inline int ConstPointerToArray< LMatrix3d >::get_node_ref_count(void) const;

819 5 count 0 4 1561 39 ConstPointerToArray< LMatrix3d >::count 0 1 11 0
95
inline unsigned long long int ConstPointerToArray< LMatrix3d >::count(LMatrix3d const &) const;

820 10 __reduce__ 0 4 1561 44 ConstPointerToArray< LMatrix3d >::__reduce__ 0 1 12 0
77
PyObject *ConstPointerToArray< LMatrix3d >::__reduce__(PyObject *self) const;

821 13 __getbuffer__ 0 4 1561 47 ConstPointerToArray< LMatrix3d >::__getbuffer__ 0 1 13 0
102
int ConstPointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

822 17 __releasebuffer__ 0 4 1561 51 ConstPointerToArray< LMatrix3d >::__releasebuffer__ 0 1 14 0
96
void ConstPointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

823 20 ~ConstPointerToArray 0 4 1561 54 ConstPointerToArray< LMatrix3d >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3d >::~ConstPointerToArray(void);

824 5 clear 0 4 1567 59 PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear 0 1 35 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear(void);

825 6 output 0 4 1567 60 PointerToBase< ReferenceCountedVector< LMatrix3f > >::output 0 1 36 0
91
void PointerToBase< ReferenceCountedVector< LMatrix3f > >::output(std::ostream &out) const;

826 19 ~PointerToArrayBase 0 4 1566 52 PointerToArrayBase< LMatrix3f >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3f >::~PointerToArrayBase(void);

827 11 operator == 0 4 1566 44 PointerToArrayBase< LMatrix3f >::operator == 0 1 33 64
// These are implemented in PointerToVoid, but expose them here.
109
inline bool PointerToArrayBase< LMatrix3f >::operator ==(PointerToArrayBase< LMatrix3f > const &other) const;

828 11 operator != 0 4 1566 44 PointerToArrayBase< LMatrix3f >::operator != 0 1 34 0
109
inline bool PointerToArrayBase< LMatrix3f >::operator !=(PointerToArrayBase< LMatrix3f > const &other) const;

829 19 ConstPointerToArray 0 4 1565 53 ConstPointerToArray< LMatrix3f >::ConstPointerToArray 0 2 19 20 0
210
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PointerToArray< LMatrix3f > const &copy);
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(ConstPointerToArray< LMatrix3f > const &copy);

830 5 clear 0 4 1565 39 ConstPointerToArray< LMatrix3f >::clear 0 1 21 0
58
inline void ConstPointerToArray< LMatrix3f >::clear(void);

831 4 size 0 4 1565 38 ConstPointerToArray< LMatrix3f >::size 0 1 22 0
81
inline unsigned long long int ConstPointerToArray< LMatrix3f >::size(void) const;

832 11 get_element 0 4 1565 45 ConstPointerToArray< LMatrix3f >::get_element 0 1 23 0
102
inline LMatrix3f const &ConstPointerToArray< LMatrix3f >::get_element(unsigned long long int n) const;

833 11 __getitem__ 0 4 1565 45 ConstPointerToArray< LMatrix3f >::__getitem__ 0 1 24 0
95
LMatrix3f const &ConstPointerToArray< LMatrix3f >::__getitem__(unsigned long long int n) const;

834 8 get_data 0 4 1565 42 ConstPointerToArray< LMatrix3f >::get_data 0 1 25 0
65
PyObject *ConstPointerToArray< LMatrix3f >::get_data(void) const;

835 11 get_subdata 0 4 1565 45 ConstPointerToArray< LMatrix3f >::get_subdata 0 1 26 0
118
PyObject *ConstPointerToArray< LMatrix3f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

836 13 get_ref_count 0 4 1565 47 ConstPointerToArray< LMatrix3f >::get_ref_count 0 1 27 0
71
inline int ConstPointerToArray< LMatrix3f >::get_ref_count(void) const;

837 18 get_node_ref_count 0 4 1565 52 ConstPointerToArray< LMatrix3f >::get_node_ref_count 0 1 28 0
76
inline int ConstPointerToArray< LMatrix3f >::get_node_ref_count(void) const;

838 5 count 0 4 1565 39 ConstPointerToArray< LMatrix3f >::count 0 1 29 0
95
inline unsigned long long int ConstPointerToArray< LMatrix3f >::count(LMatrix3f const &) const;

839 10 __reduce__ 0 4 1565 44 ConstPointerToArray< LMatrix3f >::__reduce__ 0 1 30 0
77
PyObject *ConstPointerToArray< LMatrix3f >::__reduce__(PyObject *self) const;

840 13 __getbuffer__ 0 4 1565 47 ConstPointerToArray< LMatrix3f >::__getbuffer__ 0 1 31 0
102
int ConstPointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

841 17 __releasebuffer__ 0 4 1565 51 ConstPointerToArray< LMatrix3f >::__releasebuffer__ 0 1 32 0
96
void ConstPointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

842 20 ~ConstPointerToArray 0 4 1565 54 ConstPointerToArray< LMatrix3f >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3f >::~ConstPointerToArray(void);

843 5 clear 0 4 1570 60 PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear 0 1 53 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear(void);

844 6 output 0 4 1570 61 PointerToBase< ReferenceCountedVector< LVecBase2d > >::output 0 1 54 0
92
void PointerToBase< ReferenceCountedVector< LVecBase2d > >::output(std::ostream &out) const;

845 19 ~PointerToArrayBase 0 4 1569 53 PointerToArrayBase< LVecBase2d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2d >::~PointerToArrayBase(void);

846 11 operator == 0 4 1569 45 PointerToArrayBase< LVecBase2d >::operator == 0 1 51 64
// These are implemented in PointerToVoid, but expose them here.
111
inline bool PointerToArrayBase< LVecBase2d >::operator ==(PointerToArrayBase< LVecBase2d > const &other) const;

847 11 operator != 0 4 1569 45 PointerToArrayBase< LVecBase2d >::operator != 0 1 52 0
111
inline bool PointerToArrayBase< LVecBase2d >::operator !=(PointerToArrayBase< LVecBase2d > const &other) const;

848 19 ConstPointerToArray 0 4 1568 54 ConstPointerToArray< LVecBase2d >::ConstPointerToArray 0 2 37 38 0
214
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PointerToArray< LVecBase2d > const &copy);
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(ConstPointerToArray< LVecBase2d > const &copy);

849 5 clear 0 4 1568 40 ConstPointerToArray< LVecBase2d >::clear 0 1 39 0
59
inline void ConstPointerToArray< LVecBase2d >::clear(void);

850 4 size 0 4 1568 39 ConstPointerToArray< LVecBase2d >::size 0 1 40 0
82
inline unsigned long long int ConstPointerToArray< LVecBase2d >::size(void) const;

851 11 get_element 0 4 1568 46 ConstPointerToArray< LVecBase2d >::get_element 0 1 41 0
104
inline LVecBase2d const &ConstPointerToArray< LVecBase2d >::get_element(unsigned long long int n) const;

852 11 __getitem__ 0 4 1568 46 ConstPointerToArray< LVecBase2d >::__getitem__ 0 1 42 0
97
LVecBase2d const &ConstPointerToArray< LVecBase2d >::__getitem__(unsigned long long int n) const;

853 8 get_data 0 4 1568 43 ConstPointerToArray< LVecBase2d >::get_data 0 1 43 0
66
PyObject *ConstPointerToArray< LVecBase2d >::get_data(void) const;

854 11 get_subdata 0 4 1568 46 ConstPointerToArray< LVecBase2d >::get_subdata 0 1 44 0
119
PyObject *ConstPointerToArray< LVecBase2d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

855 13 get_ref_count 0 4 1568 48 ConstPointerToArray< LVecBase2d >::get_ref_count 0 1 45 0
72
inline int ConstPointerToArray< LVecBase2d >::get_ref_count(void) const;

856 18 get_node_ref_count 0 4 1568 53 ConstPointerToArray< LVecBase2d >::get_node_ref_count 0 1 46 0
77
inline int ConstPointerToArray< LVecBase2d >::get_node_ref_count(void) const;

857 5 count 0 4 1568 40 ConstPointerToArray< LVecBase2d >::count 0 1 47 0
97
inline unsigned long long int ConstPointerToArray< LVecBase2d >::count(LVecBase2d const &) const;

858 10 __reduce__ 0 4 1568 45 ConstPointerToArray< LVecBase2d >::__reduce__ 0 1 48 0
78
PyObject *ConstPointerToArray< LVecBase2d >::__reduce__(PyObject *self) const;

859 13 __getbuffer__ 0 4 1568 48 ConstPointerToArray< LVecBase2d >::__getbuffer__ 0 1 49 0
103
int ConstPointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

860 17 __releasebuffer__ 0 4 1568 52 ConstPointerToArray< LVecBase2d >::__releasebuffer__ 0 1 50 0
97
void ConstPointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

861 20 ~ConstPointerToArray 0 4 1568 55 ConstPointerToArray< LVecBase2d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2d >::~ConstPointerToArray(void);

862 5 clear 0 4 1573 60 PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear 0 1 71 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear(void);

863 6 output 0 4 1573 61 PointerToBase< ReferenceCountedVector< LVecBase2f > >::output 0 1 72 0
92
void PointerToBase< ReferenceCountedVector< LVecBase2f > >::output(std::ostream &out) const;

864 19 ~PointerToArrayBase 0 4 1572 53 PointerToArrayBase< LVecBase2f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2f >::~PointerToArrayBase(void);

865 11 operator == 0 4 1572 45 PointerToArrayBase< LVecBase2f >::operator == 0 1 69 64
// These are implemented in PointerToVoid, but expose them here.
111
inline bool PointerToArrayBase< LVecBase2f >::operator ==(PointerToArrayBase< LVecBase2f > const &other) const;

866 11 operator != 0 4 1572 45 PointerToArrayBase< LVecBase2f >::operator != 0 1 70 0
111
inline bool PointerToArrayBase< LVecBase2f >::operator !=(PointerToArrayBase< LVecBase2f > const &other) const;

867 19 ConstPointerToArray 0 4 1571 54 ConstPointerToArray< LVecBase2f >::ConstPointerToArray 0 2 55 56 0
214
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PointerToArray< LVecBase2f > const &copy);
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(ConstPointerToArray< LVecBase2f > const &copy);

868 5 clear 0 4 1571 40 ConstPointerToArray< LVecBase2f >::clear 0 1 57 0
59
inline void ConstPointerToArray< LVecBase2f >::clear(void);

869 4 size 0 4 1571 39 ConstPointerToArray< LVecBase2f >::size 0 1 58 0
82
inline unsigned long long int ConstPointerToArray< LVecBase2f >::size(void) const;

870 11 get_element 0 4 1571 46 ConstPointerToArray< LVecBase2f >::get_element 0 1 59 0
104
inline LVecBase2f const &ConstPointerToArray< LVecBase2f >::get_element(unsigned long long int n) const;

871 11 __getitem__ 0 4 1571 46 ConstPointerToArray< LVecBase2f >::__getitem__ 0 1 60 0
97
LVecBase2f const &ConstPointerToArray< LVecBase2f >::__getitem__(unsigned long long int n) const;

872 8 get_data 0 4 1571 43 ConstPointerToArray< LVecBase2f >::get_data 0 1 61 0
66
PyObject *ConstPointerToArray< LVecBase2f >::get_data(void) const;

873 11 get_subdata 0 4 1571 46 ConstPointerToArray< LVecBase2f >::get_subdata 0 1 62 0
119
PyObject *ConstPointerToArray< LVecBase2f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

874 13 get_ref_count 0 4 1571 48 ConstPointerToArray< LVecBase2f >::get_ref_count 0 1 63 0
72
inline int ConstPointerToArray< LVecBase2f >::get_ref_count(void) const;

875 18 get_node_ref_count 0 4 1571 53 ConstPointerToArray< LVecBase2f >::get_node_ref_count 0 1 64 0
77
inline int ConstPointerToArray< LVecBase2f >::get_node_ref_count(void) const;

876 5 count 0 4 1571 40 ConstPointerToArray< LVecBase2f >::count 0 1 65 0
97
inline unsigned long long int ConstPointerToArray< LVecBase2f >::count(LVecBase2f const &) const;

877 10 __reduce__ 0 4 1571 45 ConstPointerToArray< LVecBase2f >::__reduce__ 0 1 66 0
78
PyObject *ConstPointerToArray< LVecBase2f >::__reduce__(PyObject *self) const;

878 13 __getbuffer__ 0 4 1571 48 ConstPointerToArray< LVecBase2f >::__getbuffer__ 0 1 67 0
103
int ConstPointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

879 17 __releasebuffer__ 0 4 1571 52 ConstPointerToArray< LVecBase2f >::__releasebuffer__ 0 1 68 0
97
void ConstPointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

880 20 ~ConstPointerToArray 0 4 1571 55 ConstPointerToArray< LVecBase2f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2f >::~ConstPointerToArray(void);

881 5 clear 0 4 1576 60 PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear 0 1 89 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear(void);

882 6 output 0 4 1576 61 PointerToBase< ReferenceCountedVector< LVecBase2i > >::output 0 1 90 0
92
void PointerToBase< ReferenceCountedVector< LVecBase2i > >::output(std::ostream &out) const;

883 19 ~PointerToArrayBase 0 4 1575 53 PointerToArrayBase< LVecBase2i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2i >::~PointerToArrayBase(void);

884 11 operator == 0 4 1575 45 PointerToArrayBase< LVecBase2i >::operator == 0 1 87 64
// These are implemented in PointerToVoid, but expose them here.
111
inline bool PointerToArrayBase< LVecBase2i >::operator ==(PointerToArrayBase< LVecBase2i > const &other) const;

885 11 operator != 0 4 1575 45 PointerToArrayBase< LVecBase2i >::operator != 0 1 88 0
111
inline bool PointerToArrayBase< LVecBase2i >::operator !=(PointerToArrayBase< LVecBase2i > const &other) const;

886 19 ConstPointerToArray 0 4 1574 54 ConstPointerToArray< LVecBase2i >::ConstPointerToArray 0 2 73 74 0
214
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(PointerToArray< LVecBase2i > const &copy);
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(ConstPointerToArray< LVecBase2i > const &copy);

887 5 clear 0 4 1574 40 ConstPointerToArray< LVecBase2i >::clear 0 1 75 0
59
inline void ConstPointerToArray< LVecBase2i >::clear(void);

888 4 size 0 4 1574 39 ConstPointerToArray< LVecBase2i >::size 0 1 76 0
82
inline unsigned long long int ConstPointerToArray< LVecBase2i >::size(void) const;

889 11 get_element 0 4 1574 46 ConstPointerToArray< LVecBase2i >::get_element 0 1 77 0
104
inline LVecBase2i const &ConstPointerToArray< LVecBase2i >::get_element(unsigned long long int n) const;

890 11 __getitem__ 0 4 1574 46 ConstPointerToArray< LVecBase2i >::__getitem__ 0 1 78 0
97
LVecBase2i const &ConstPointerToArray< LVecBase2i >::__getitem__(unsigned long long int n) const;

891 8 get_data 0 4 1574 43 ConstPointerToArray< LVecBase2i >::get_data 0 1 79 0
66
PyObject *ConstPointerToArray< LVecBase2i >::get_data(void) const;

892 11 get_subdata 0 4 1574 46 ConstPointerToArray< LVecBase2i >::get_subdata 0 1 80 0
119
PyObject *ConstPointerToArray< LVecBase2i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

893 13 get_ref_count 0 4 1574 48 ConstPointerToArray< LVecBase2i >::get_ref_count 0 1 81 0
72
inline int ConstPointerToArray< LVecBase2i >::get_ref_count(void) const;

894 18 get_node_ref_count 0 4 1574 53 ConstPointerToArray< LVecBase2i >::get_node_ref_count 0 1 82 0
77
inline int ConstPointerToArray< LVecBase2i >::get_node_ref_count(void) const;

895 5 count 0 4 1574 40 ConstPointerToArray< LVecBase2i >::count 0 1 83 0
97
inline unsigned long long int ConstPointerToArray< LVecBase2i >::count(LVecBase2i const &) const;

896 10 __reduce__ 0 4 1574 45 ConstPointerToArray< LVecBase2i >::__reduce__ 0 1 84 0
78
PyObject *ConstPointerToArray< LVecBase2i >::__reduce__(PyObject *self) const;

897 13 __getbuffer__ 0 4 1574 48 ConstPointerToArray< LVecBase2i >::__getbuffer__ 0 1 85 0
103
int ConstPointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

898 17 __releasebuffer__ 0 4 1574 52 ConstPointerToArray< LVecBase2i >::__releasebuffer__ 0 1 86 0
97
void ConstPointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

899 20 ~ConstPointerToArray 0 4 1574 55 ConstPointerToArray< LVecBase2i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2i >::~ConstPointerToArray(void);

900 5 clear 0 4 1579 60 PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear 0 1 107 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear(void);

901 6 output 0 4 1579 61 PointerToBase< ReferenceCountedVector< LVecBase3d > >::output 0 1 108 0
92
void PointerToBase< ReferenceCountedVector< LVecBase3d > >::output(std::ostream &out) const;

902 19 ~PointerToArrayBase 0 4 1578 53 PointerToArrayBase< LVecBase3d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3d >::~PointerToArrayBase(void);

903 11 operator == 0 4 1578 45 PointerToArrayBase< LVecBase3d >::operator == 0 1 105 64
// These are implemented in PointerToVoid, but expose them here.
111
inline bool PointerToArrayBase< LVecBase3d >::operator ==(PointerToArrayBase< LVecBase3d > const &other) const;

904 11 operator != 0 4 1578 45 PointerToArrayBase< LVecBase3d >::operator != 0 1 106 0
111
inline bool PointerToArrayBase< LVecBase3d >::operator !=(PointerToArrayBase< LVecBase3d > const &other) const;

905 19 ConstPointerToArray 0 4 1577 54 ConstPointerToArray< LVecBase3d >::ConstPointerToArray 0 2 91 92 0
214
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PointerToArray< LVecBase3d > const &copy);
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(ConstPointerToArray< LVecBase3d > const &copy);

906 5 clear 0 4 1577 40 ConstPointerToArray< LVecBase3d >::clear 0 1 93 0
59
inline void ConstPointerToArray< LVecBase3d >::clear(void);

907 4 size 0 4 1577 39 ConstPointerToArray< LVecBase3d >::size 0 1 94 0
82
inline unsigned long long int ConstPointerToArray< LVecBase3d >::size(void) const;

908 11 get_element 0 4 1577 46 ConstPointerToArray< LVecBase3d >::get_element 0 1 95 0
104
inline LVecBase3d const &ConstPointerToArray< LVecBase3d >::get_element(unsigned long long int n) const;

909 11 __getitem__ 0 4 1577 46 ConstPointerToArray< LVecBase3d >::__getitem__ 0 1 96 0
97
LVecBase3d const &ConstPointerToArray< LVecBase3d >::__getitem__(unsigned long long int n) const;

910 8 get_data 0 4 1577 43 ConstPointerToArray< LVecBase3d >::get_data 0 1 97 0
66
PyObject *ConstPointerToArray< LVecBase3d >::get_data(void) const;

911 11 get_subdata 0 4 1577 46 ConstPointerToArray< LVecBase3d >::get_subdata 0 1 98 0
119
PyObject *ConstPointerToArray< LVecBase3d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

912 13 get_ref_count 0 4 1577 48 ConstPointerToArray< LVecBase3d >::get_ref_count 0 1 99 0
72
inline int ConstPointerToArray< LVecBase3d >::get_ref_count(void) const;

913 18 get_node_ref_count 0 4 1577 53 ConstPointerToArray< LVecBase3d >::get_node_ref_count 0 1 100 0
77
inline int ConstPointerToArray< LVecBase3d >::get_node_ref_count(void) const;

914 5 count 0 4 1577 40 ConstPointerToArray< LVecBase3d >::count 0 1 101 0
97
inline unsigned long long int ConstPointerToArray< LVecBase3d >::count(LVecBase3d const &) const;

915 10 __reduce__ 0 4 1577 45 ConstPointerToArray< LVecBase3d >::__reduce__ 0 1 102 0
78
PyObject *ConstPointerToArray< LVecBase3d >::__reduce__(PyObject *self) const;

916 13 __getbuffer__ 0 4 1577 48 ConstPointerToArray< LVecBase3d >::__getbuffer__ 0 1 103 0
103
int ConstPointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

917 17 __releasebuffer__ 0 4 1577 52 ConstPointerToArray< LVecBase3d >::__releasebuffer__ 0 1 104 0
97
void ConstPointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

918 20 ~ConstPointerToArray 0 4 1577 55 ConstPointerToArray< LVecBase3d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3d >::~ConstPointerToArray(void);

919 5 clear 0 4 1582 60 PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear 0 1 125 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear(void);

920 6 output 0 4 1582 61 PointerToBase< ReferenceCountedVector< LVecBase3f > >::output 0 1 126 0
92
void PointerToBase< ReferenceCountedVector< LVecBase3f > >::output(std::ostream &out) const;

921 19 ~PointerToArrayBase 0 4 1581 53 PointerToArrayBase< LVecBase3f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3f >::~PointerToArrayBase(void);

922 11 operator == 0 4 1581 45 PointerToArrayBase< LVecBase3f >::operator == 0 1 123 64
// These are implemented in PointerToVoid, but expose them here.
111
inline bool PointerToArrayBase< LVecBase3f >::operator ==(PointerToArrayBase< LVecBase3f > const &other) const;

923 11 operator != 0 4 1581 45 PointerToArrayBase< LVecBase3f >::operator != 0 1 124 0
111
inline bool PointerToArrayBase< LVecBase3f >::operator !=(PointerToArrayBase< LVecBase3f > const &other) const;

924 19 ConstPointerToArray 0 4 1580 54 ConstPointerToArray< LVecBase3f >::ConstPointerToArray 0 2 109 110 0
214
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PointerToArray< LVecBase3f > const &copy);
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(ConstPointerToArray< LVecBase3f > const &copy);

925 5 clear 0 4 1580 40 ConstPointerToArray< LVecBase3f >::clear 0 1 111 0
59
inline void ConstPointerToArray< LVecBase3f >::clear(void);

926 4 size 0 4 1580 39 ConstPointerToArray< LVecBase3f >::size 0 1 112 0
82
inline unsigned long long int ConstPointerToArray< LVecBase3f >::size(void) const;

927 11 get_element 0 4 1580 46 ConstPointerToArray< LVecBase3f >::get_element 0 1 113 0
104
inline LVecBase3f const &ConstPointerToArray< LVecBase3f >::get_element(unsigned long long int n) const;

928 11 __getitem__ 0 4 1580 46 ConstPointerToArray< LVecBase3f >::__getitem__ 0 1 114 0
97
LVecBase3f const &ConstPointerToArray< LVecBase3f >::__getitem__(unsigned long long int n) const;

929 8 get_data 0 4 1580 43 ConstPointerToArray< LVecBase3f >::get_data 0 1 115 0
66
PyObject *ConstPointerToArray< LVecBase3f >::get_data(void) const;

930 11 get_subdata 0 4 1580 46 ConstPointerToArray< LVecBase3f >::get_subdata 0 1 116 0
119
PyObject *ConstPointerToArray< LVecBase3f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

931 13 get_ref_count 0 4 1580 48 ConstPointerToArray< LVecBase3f >::get_ref_count 0 1 117 0
72
inline int ConstPointerToArray< LVecBase3f >::get_ref_count(void) const;

932 18 get_node_ref_count 0 4 1580 53 ConstPointerToArray< LVecBase3f >::get_node_ref_count 0 1 118 0
77
inline int ConstPointerToArray< LVecBase3f >::get_node_ref_count(void) const;

933 5 count 0 4 1580 40 ConstPointerToArray< LVecBase3f >::count 0 1 119 0
97
inline unsigned long long int ConstPointerToArray< LVecBase3f >::count(LVecBase3f const &) const;

934 10 __reduce__ 0 4 1580 45 ConstPointerToArray< LVecBase3f >::__reduce__ 0 1 120 0
78
PyObject *ConstPointerToArray< LVecBase3f >::__reduce__(PyObject *self) const;

935 13 __getbuffer__ 0 4 1580 48 ConstPointerToArray< LVecBase3f >::__getbuffer__ 0 1 121 0
103
int ConstPointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

936 17 __releasebuffer__ 0 4 1580 52 ConstPointerToArray< LVecBase3f >::__releasebuffer__ 0 1 122 0
97
void ConstPointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

937 20 ~ConstPointerToArray 0 4 1580 55 ConstPointerToArray< LVecBase3f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3f >::~ConstPointerToArray(void);

938 5 clear 0 4 1585 60 PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear 0 1 143 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear(void);

939 6 output 0 4 1585 61 PointerToBase< ReferenceCountedVector< LVecBase3i > >::output 0 1 144 0
92
void PointerToBase< ReferenceCountedVector< LVecBase3i > >::output(std::ostream &out) const;

940 19 ~PointerToArrayBase 0 4 1584 53 PointerToArrayBase< LVecBase3i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3i >::~PointerToArrayBase(void);

941 11 operator == 0 4 1584 45 PointerToArrayBase< LVecBase3i >::operator == 0 1 141 64
// These are implemented in PointerToVoid, but expose them here.
111
inline bool PointerToArrayBase< LVecBase3i >::operator ==(PointerToArrayBase< LVecBase3i > const &other) const;

942 11 operator != 0 4 1584 45 PointerToArrayBase< LVecBase3i >::operator != 0 1 142 0
111
inline bool PointerToArrayBase< LVecBase3i >::operator !=(PointerToArrayBase< LVecBase3i > const &other) const;

943 19 ConstPointerToArray 0 4 1583 54 ConstPointerToArray< LVecBase3i >::ConstPointerToArray 0 2 127 128 0
214
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(PointerToArray< LVecBase3i > const &copy);
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(ConstPointerToArray< LVecBase3i > const &copy);

944 5 clear 0 4 1583 40 ConstPointerToArray< LVecBase3i >::clear 0 1 129 0
59
inline void ConstPointerToArray< LVecBase3i >::clear(void);

945 4 size 0 4 1583 39 ConstPointerToArray< LVecBase3i >::size 0 1 130 0
82
inline unsigned long long int ConstPointerToArray< LVecBase3i >::size(void) const;

946 11 get_element 0 4 1583 46 ConstPointerToArray< LVecBase3i >::get_element 0 1 131 0
104
inline LVecBase3i const &ConstPointerToArray< LVecBase3i >::get_element(unsigned long long int n) const;

947 11 __getitem__ 0 4 1583 46 ConstPointerToArray< LVecBase3i >::__getitem__ 0 1 132 0
97
LVecBase3i const &ConstPointerToArray< LVecBase3i >::__getitem__(unsigned long long int n) const;

948 8 get_data 0 4 1583 43 ConstPointerToArray< LVecBase3i >::get_data 0 1 133 0
66
PyObject *ConstPointerToArray< LVecBase3i >::get_data(void) const;

949 11 get_subdata 0 4 1583 46 ConstPointerToArray< LVecBase3i >::get_subdata 0 1 134 0
119
PyObject *ConstPointerToArray< LVecBase3i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

950 13 get_ref_count 0 4 1583 48 ConstPointerToArray< LVecBase3i >::get_ref_count 0 1 135 0
72
inline int ConstPointerToArray< LVecBase3i >::get_ref_count(void) const;

951 18 get_node_ref_count 0 4 1583 53 ConstPointerToArray< LVecBase3i >::get_node_ref_count 0 1 136 0
77
inline int ConstPointerToArray< LVecBase3i >::get_node_ref_count(void) const;

952 5 count 0 4 1583 40 ConstPointerToArray< LVecBase3i >::count 0 1 137 0
97
inline unsigned long long int ConstPointerToArray< LVecBase3i >::count(LVecBase3i const &) const;

953 10 __reduce__ 0 4 1583 45 ConstPointerToArray< LVecBase3i >::__reduce__ 0 1 138 0
78
PyObject *ConstPointerToArray< LVecBase3i >::__reduce__(PyObject *self) const;

954 13 __getbuffer__ 0 4 1583 48 ConstPointerToArray< LVecBase3i >::__getbuffer__ 0 1 139 0
103
int ConstPointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

955 17 __releasebuffer__ 0 4 1583 52 ConstPointerToArray< LVecBase3i >::__releasebuffer__ 0 1 140 0
97
void ConstPointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

956 20 ~ConstPointerToArray 0 4 1583 55 ConstPointerToArray< LVecBase3i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3i >::~ConstPointerToArray(void);

957 5 clear 0 4 1588 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear 0 1 161 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear(void);

958 6 output 0 4 1588 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output 0 1 162 0
100
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output(std::ostream &out) const;

959 19 ~PointerToArrayBase 0 4 1587 61 PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase(void);

960 11 operator == 0 4 1587 53 PointerToArrayBase< UnalignedLMatrix4d >::operator == 0 1 159 64
// These are implemented in PointerToVoid, but expose them here.
127
inline bool PointerToArrayBase< UnalignedLMatrix4d >::operator ==(PointerToArrayBase< UnalignedLMatrix4d > const &other) const;

961 11 operator != 0 4 1587 53 PointerToArrayBase< UnalignedLMatrix4d >::operator != 0 1 160 0
127
inline bool PointerToArrayBase< UnalignedLMatrix4d >::operator !=(PointerToArrayBase< UnalignedLMatrix4d > const &other) const;

962 19 ConstPointerToArray 0 4 1586 62 ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray 0 2 145 146 0
246
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4d > const &copy);

963 5 clear 0 4 1586 48 ConstPointerToArray< UnalignedLMatrix4d >::clear 0 1 147 0
67
inline void ConstPointerToArray< UnalignedLMatrix4d >::clear(void);

964 4 size 0 4 1586 47 ConstPointerToArray< UnalignedLMatrix4d >::size 0 1 148 0
90
inline unsigned long long int ConstPointerToArray< UnalignedLMatrix4d >::size(void) const;

965 11 get_element 0 4 1586 54 ConstPointerToArray< UnalignedLMatrix4d >::get_element 0 1 149 0
120
inline UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::get_element(unsigned long long int n) const;

966 11 __getitem__ 0 4 1586 54 ConstPointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 150 0
113
UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned long long int n) const;

967 8 get_data 0 4 1586 51 ConstPointerToArray< UnalignedLMatrix4d >::get_data 0 1 151 0
74
PyObject *ConstPointerToArray< UnalignedLMatrix4d >::get_data(void) const;

968 11 get_subdata 0 4 1586 54 ConstPointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 152 0
127
PyObject *ConstPointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

969 13 get_ref_count 0 4 1586 56 ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 153 0
80
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

970 18 get_node_ref_count 0 4 1586 61 ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 154 0
85
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

971 5 count 0 4 1586 48 ConstPointerToArray< UnalignedLMatrix4d >::count 0 1 155 0
113
inline unsigned long long int ConstPointerToArray< UnalignedLMatrix4d >::count(UnalignedLMatrix4d const &) const;

972 10 __reduce__ 0 4 1586 53 ConstPointerToArray< UnalignedLMatrix4d >::__reduce__ 0 1 156 0
86
PyObject *ConstPointerToArray< UnalignedLMatrix4d >::__reduce__(PyObject *self) const;

973 13 __getbuffer__ 0 4 1586 56 ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 157 0
111
int ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

974 17 __releasebuffer__ 0 4 1586 60 ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 158 0
105
void ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

975 20 ~ConstPointerToArray 0 4 1586 63 ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray(void);

976 5 clear 0 4 1591 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear 0 1 179 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear(void);

977 6 output 0 4 1591 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output 0 1 180 0
100
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output(std::ostream &out) const;

978 19 ~PointerToArrayBase 0 4 1590 61 PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase(void);

979 11 operator == 0 4 1590 53 PointerToArrayBase< UnalignedLMatrix4f >::operator == 0 1 177 64
// These are implemented in PointerToVoid, but expose them here.
127
inline bool PointerToArrayBase< UnalignedLMatrix4f >::operator ==(PointerToArrayBase< UnalignedLMatrix4f > const &other) const;

980 11 operator != 0 4 1590 53 PointerToArrayBase< UnalignedLMatrix4f >::operator != 0 1 178 0
127
inline bool PointerToArrayBase< UnalignedLMatrix4f >::operator !=(PointerToArrayBase< UnalignedLMatrix4f > const &other) const;

981 19 ConstPointerToArray 0 4 1589 62 ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray 0 2 163 164 0
246
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4f > const &copy);

982 5 clear 0 4 1589 48 ConstPointerToArray< UnalignedLMatrix4f >::clear 0 1 165 0
67
inline void ConstPointerToArray< UnalignedLMatrix4f >::clear(void);

983 4 size 0 4 1589 47 ConstPointerToArray< UnalignedLMatrix4f >::size 0 1 166 0
90
inline unsigned long long int ConstPointerToArray< UnalignedLMatrix4f >::size(void) const;

984 11 get_element 0 4 1589 54 ConstPointerToArray< UnalignedLMatrix4f >::get_element 0 1 167 0
120
inline UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::get_element(unsigned long long int n) const;

985 11 __getitem__ 0 4 1589 54 ConstPointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 168 0
113
UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned long long int n) const;

986 8 get_data 0 4 1589 51 ConstPointerToArray< UnalignedLMatrix4f >::get_data 0 1 169 0
74
PyObject *ConstPointerToArray< UnalignedLMatrix4f >::get_data(void) const;

987 11 get_subdata 0 4 1589 54 ConstPointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 170 0
127
PyObject *ConstPointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

988 13 get_ref_count 0 4 1589 56 ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 171 0
80
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

989 18 get_node_ref_count 0 4 1589 61 ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 172 0
85
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

990 5 count 0 4 1589 48 ConstPointerToArray< UnalignedLMatrix4f >::count 0 1 173 0
113
inline unsigned long long int ConstPointerToArray< UnalignedLMatrix4f >::count(UnalignedLMatrix4f const &) const;

991 10 __reduce__ 0 4 1589 53 ConstPointerToArray< UnalignedLMatrix4f >::__reduce__ 0 1 174 0
86
PyObject *ConstPointerToArray< UnalignedLMatrix4f >::__reduce__(PyObject *self) const;

992 13 __getbuffer__ 0 4 1589 56 ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 175 0
111
int ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

993 17 __releasebuffer__ 0 4 1589 60 ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 176 0
105
void ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

994 20 ~ConstPointerToArray 0 4 1589 63 ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray(void);

995 5 clear 0 4 1594 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear 0 1 197 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear(void);

996 6 output 0 4 1594 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output 0 1 198 0
101
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output(std::ostream &out) const;

997 19 ~PointerToArrayBase 0 4 1593 62 PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase(void);

998 11 operator == 0 4 1593 54 PointerToArrayBase< UnalignedLVecBase4d >::operator == 0 1 195 64
// These are implemented in PointerToVoid, but expose them here.
129
inline bool PointerToArrayBase< UnalignedLVecBase4d >::operator ==(PointerToArrayBase< UnalignedLVecBase4d > const &other) const;

999 11 operator != 0 4 1593 54 PointerToArrayBase< UnalignedLVecBase4d >::operator != 0 1 196 0
129
inline bool PointerToArrayBase< UnalignedLVecBase4d >::operator !=(PointerToArrayBase< UnalignedLVecBase4d > const &other) const;

1000 19 ConstPointerToArray 0 4 1592 63 ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray 0 2 181 182 0
250
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4d > const &copy);

1001 5 clear 0 4 1592 49 ConstPointerToArray< UnalignedLVecBase4d >::clear 0 1 183 0
68
inline void ConstPointerToArray< UnalignedLVecBase4d >::clear(void);

1002 4 size 0 4 1592 48 ConstPointerToArray< UnalignedLVecBase4d >::size 0 1 184 0
91
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4d >::size(void) const;

1003 11 get_element 0 4 1592 55 ConstPointerToArray< UnalignedLVecBase4d >::get_element 0 1 185 0
122
inline UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::get_element(unsigned long long int n) const;

1004 11 __getitem__ 0 4 1592 55 ConstPointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 186 0
115
UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned long long int n) const;

1005 8 get_data 0 4 1592 52 ConstPointerToArray< UnalignedLVecBase4d >::get_data 0 1 187 0
75
PyObject *ConstPointerToArray< UnalignedLVecBase4d >::get_data(void) const;

1006 11 get_subdata 0 4 1592 55 ConstPointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 188 0
128
PyObject *ConstPointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1007 13 get_ref_count 0 4 1592 57 ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 189 0
81
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

1008 18 get_node_ref_count 0 4 1592 62 ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 190 0
86
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

1009 5 count 0 4 1592 49 ConstPointerToArray< UnalignedLVecBase4d >::count 0 1 191 0
115
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4d >::count(UnalignedLVecBase4d const &) const;

1010 10 __reduce__ 0 4 1592 54 ConstPointerToArray< UnalignedLVecBase4d >::__reduce__ 0 1 192 0
87
PyObject *ConstPointerToArray< UnalignedLVecBase4d >::__reduce__(PyObject *self) const;

1011 13 __getbuffer__ 0 4 1592 57 ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 193 0
112
int ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1012 17 __releasebuffer__ 0 4 1592 61 ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 194 0
106
void ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1013 20 ~ConstPointerToArray 0 4 1592 64 ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray(void);

1014 5 clear 0 4 1597 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear 0 1 215 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear(void);

1015 6 output 0 4 1597 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output 0 1 216 0
101
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output(std::ostream &out) const;

1016 19 ~PointerToArrayBase 0 4 1596 62 PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase(void);

1017 11 operator == 0 4 1596 54 PointerToArrayBase< UnalignedLVecBase4f >::operator == 0 1 213 64
// These are implemented in PointerToVoid, but expose them here.
129
inline bool PointerToArrayBase< UnalignedLVecBase4f >::operator ==(PointerToArrayBase< UnalignedLVecBase4f > const &other) const;

1018 11 operator != 0 4 1596 54 PointerToArrayBase< UnalignedLVecBase4f >::operator != 0 1 214 0
129
inline bool PointerToArrayBase< UnalignedLVecBase4f >::operator !=(PointerToArrayBase< UnalignedLVecBase4f > const &other) const;

1019 19 ConstPointerToArray 0 4 1595 63 ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray 0 2 199 200 0
250
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4f > const &copy);

1020 5 clear 0 4 1595 49 ConstPointerToArray< UnalignedLVecBase4f >::clear 0 1 201 0
68
inline void ConstPointerToArray< UnalignedLVecBase4f >::clear(void);

1021 4 size 0 4 1595 48 ConstPointerToArray< UnalignedLVecBase4f >::size 0 1 202 0
91
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4f >::size(void) const;

1022 11 get_element 0 4 1595 55 ConstPointerToArray< UnalignedLVecBase4f >::get_element 0 1 203 0
122
inline UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::get_element(unsigned long long int n) const;

1023 11 __getitem__ 0 4 1595 55 ConstPointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 204 0
115
UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned long long int n) const;

1024 8 get_data 0 4 1595 52 ConstPointerToArray< UnalignedLVecBase4f >::get_data 0 1 205 0
75
PyObject *ConstPointerToArray< UnalignedLVecBase4f >::get_data(void) const;

1025 11 get_subdata 0 4 1595 55 ConstPointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 206 0
128
PyObject *ConstPointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1026 13 get_ref_count 0 4 1595 57 ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 207 0
81
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

1027 18 get_node_ref_count 0 4 1595 62 ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 208 0
86
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

1028 5 count 0 4 1595 49 ConstPointerToArray< UnalignedLVecBase4f >::count 0 1 209 0
115
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4f >::count(UnalignedLVecBase4f const &) const;

1029 10 __reduce__ 0 4 1595 54 ConstPointerToArray< UnalignedLVecBase4f >::__reduce__ 0 1 210 0
87
PyObject *ConstPointerToArray< UnalignedLVecBase4f >::__reduce__(PyObject *self) const;

1030 13 __getbuffer__ 0 4 1595 57 ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 211 0
112
int ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1031 17 __releasebuffer__ 0 4 1595 61 ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 212 0
106
void ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1032 20 ~ConstPointerToArray 0 4 1595 64 ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray(void);

1033 5 clear 0 4 1600 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear 0 1 233 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear(void);

1034 6 output 0 4 1600 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output 0 1 234 0
101
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output(std::ostream &out) const;

1035 19 ~PointerToArrayBase 0 4 1599 62 PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase(void);

1036 11 operator == 0 4 1599 54 PointerToArrayBase< UnalignedLVecBase4i >::operator == 0 1 231 64
// These are implemented in PointerToVoid, but expose them here.
129
inline bool PointerToArrayBase< UnalignedLVecBase4i >::operator ==(PointerToArrayBase< UnalignedLVecBase4i > const &other) const;

1037 11 operator != 0 4 1599 54 PointerToArrayBase< UnalignedLVecBase4i >::operator != 0 1 232 0
129
inline bool PointerToArrayBase< UnalignedLVecBase4i >::operator !=(PointerToArrayBase< UnalignedLVecBase4i > const &other) const;

1038 19 ConstPointerToArray 0 4 1598 63 ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray 0 2 217 218 0
250
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4i > const &copy);

1039 5 clear 0 4 1598 49 ConstPointerToArray< UnalignedLVecBase4i >::clear 0 1 219 0
68
inline void ConstPointerToArray< UnalignedLVecBase4i >::clear(void);

1040 4 size 0 4 1598 48 ConstPointerToArray< UnalignedLVecBase4i >::size 0 1 220 0
91
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4i >::size(void) const;

1041 11 get_element 0 4 1598 55 ConstPointerToArray< UnalignedLVecBase4i >::get_element 0 1 221 0
122
inline UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::get_element(unsigned long long int n) const;

1042 11 __getitem__ 0 4 1598 55 ConstPointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 222 0
115
UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned long long int n) const;

1043 8 get_data 0 4 1598 52 ConstPointerToArray< UnalignedLVecBase4i >::get_data 0 1 223 0
75
PyObject *ConstPointerToArray< UnalignedLVecBase4i >::get_data(void) const;

1044 11 get_subdata 0 4 1598 55 ConstPointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 224 0
128
PyObject *ConstPointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1045 13 get_ref_count 0 4 1598 57 ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 225 0
81
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

1046 18 get_node_ref_count 0 4 1598 62 ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 226 0
86
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

1047 5 count 0 4 1598 49 ConstPointerToArray< UnalignedLVecBase4i >::count 0 1 227 0
115
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4i >::count(UnalignedLVecBase4i const &) const;

1048 10 __reduce__ 0 4 1598 54 ConstPointerToArray< UnalignedLVecBase4i >::__reduce__ 0 1 228 0
87
PyObject *ConstPointerToArray< UnalignedLVecBase4i >::__reduce__(PyObject *self) const;

1049 13 __getbuffer__ 0 4 1598 57 ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 229 0
112
int ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1050 17 __releasebuffer__ 0 4 1598 61 ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 230 0
106
void ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1051 20 ~ConstPointerToArray 0 4 1598 64 ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray(void);

1052 14 PointerToArray 0 4 1601 43 PointerToArray< LMatrix3d >::PointerToArray 0 3 235 236 237 0
294
inline PointerToArray< LMatrix3d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LMatrix3d const *)(0))));
inline PointerToArray< LMatrix3d >::PointerToArray(PointerToArray< LMatrix3d > const &copy);
PointerToArray< LMatrix3d >::PointerToArray(PyObject *self, PyObject *source);

1053 11 empty_array 0 4 1601 40 PointerToArray< LMatrix3d >::empty_array 0 1 238 0
180
static inline PointerToArray< LMatrix3d > PointerToArray< LMatrix3d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LMatrix3d const *)(0))));

1054 5 clear 0 4 1601 34 PointerToArray< LMatrix3d >::clear 0 1 239 0
53
inline void PointerToArray< LMatrix3d >::clear(void);

1055 4 size 0 4 1601 33 PointerToArray< LMatrix3d >::size 0 1 240 0
76
inline unsigned long long int PointerToArray< LMatrix3d >::size(void) const;

1056 9 push_back 0 4 1601 38 PointerToArray< LMatrix3d >::push_back 0 1 241 0
71
inline void PointerToArray< LMatrix3d >::push_back(LMatrix3d const &x);

1057 8 pop_back 0 4 1601 37 PointerToArray< LMatrix3d >::pop_back 0 1 242 0
56
inline void PointerToArray< LMatrix3d >::pop_back(void);

1058 11 get_element 0 4 1601 40 PointerToArray< LMatrix3d >::get_element 0 1 243 0
97
inline LMatrix3d const &PointerToArray< LMatrix3d >::get_element(unsigned long long int n) const;

1059 11 set_element 0 4 1601 40 PointerToArray< LMatrix3d >::set_element 0 1 244 0
103
inline void PointerToArray< LMatrix3d >::set_element(unsigned long long int n, LMatrix3d const &value);

1060 11 __getitem__ 0 4 1601 40 PointerToArray< LMatrix3d >::__getitem__ 0 1 245 0
90
LMatrix3d const &PointerToArray< LMatrix3d >::__getitem__(unsigned long long int n) const;

1061 11 __setitem__ 0 4 1601 40 PointerToArray< LMatrix3d >::__setitem__ 0 1 246 0
96
void PointerToArray< LMatrix3d >::__setitem__(unsigned long long int n, LMatrix3d const &value);

1062 8 get_data 0 4 1601 37 PointerToArray< LMatrix3d >::get_data 0 1 247 0
60
PyObject *PointerToArray< LMatrix3d >::get_data(void) const;

1063 8 set_data 0 4 1601 37 PointerToArray< LMatrix3d >::set_data 0 1 248 0
59
void PointerToArray< LMatrix3d >::set_data(PyObject *data);

1064 11 get_subdata 0 4 1601 40 PointerToArray< LMatrix3d >::get_subdata 0 1 249 0
113
PyObject *PointerToArray< LMatrix3d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1065 11 set_subdata 0 4 1601 40 PointerToArray< LMatrix3d >::set_subdata 0 1 250 0
148
inline void PointerToArray< LMatrix3d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1066 13 get_ref_count 0 4 1601 42 PointerToArray< LMatrix3d >::get_ref_count 0 1 251 0
66
inline int PointerToArray< LMatrix3d >::get_ref_count(void) const;

1067 18 get_node_ref_count 0 4 1601 47 PointerToArray< LMatrix3d >::get_node_ref_count 0 1 252 0
71
inline int PointerToArray< LMatrix3d >::get_node_ref_count(void) const;

1068 5 count 0 4 1601 34 PointerToArray< LMatrix3d >::count 0 1 253 0
90
inline unsigned long long int PointerToArray< LMatrix3d >::count(LMatrix3d const &) const;

1069 10 __reduce__ 0 4 1601 39 PointerToArray< LMatrix3d >::__reduce__ 0 1 254 0
72
PyObject *PointerToArray< LMatrix3d >::__reduce__(PyObject *self) const;

1070 13 __getbuffer__ 0 4 1601 42 PointerToArray< LMatrix3d >::__getbuffer__ 0 1 255 0
91
int PointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1071 17 __releasebuffer__ 0 4 1601 46 PointerToArray< LMatrix3d >::__releasebuffer__ 0 1 256 0
91
void PointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1072 15 ~PointerToArray 0 4 1601 44 PointerToArray< LMatrix3d >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3d >::~PointerToArray(void);

1073 14 PointerToArray 0 4 1602 43 PointerToArray< LMatrix3f >::PointerToArray 0 3 257 258 259 0
294
inline PointerToArray< LMatrix3f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LMatrix3f const *)(0))));
inline PointerToArray< LMatrix3f >::PointerToArray(PointerToArray< LMatrix3f > const &copy);
PointerToArray< LMatrix3f >::PointerToArray(PyObject *self, PyObject *source);

1074 11 empty_array 0 4 1602 40 PointerToArray< LMatrix3f >::empty_array 0 1 260 0
180
static inline PointerToArray< LMatrix3f > PointerToArray< LMatrix3f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LMatrix3f const *)(0))));

1075 5 clear 0 4 1602 34 PointerToArray< LMatrix3f >::clear 0 1 261 0
53
inline void PointerToArray< LMatrix3f >::clear(void);

1076 4 size 0 4 1602 33 PointerToArray< LMatrix3f >::size 0 1 262 0
76
inline unsigned long long int PointerToArray< LMatrix3f >::size(void) const;

1077 9 push_back 0 4 1602 38 PointerToArray< LMatrix3f >::push_back 0 1 263 0
71
inline void PointerToArray< LMatrix3f >::push_back(LMatrix3f const &x);

1078 8 pop_back 0 4 1602 37 PointerToArray< LMatrix3f >::pop_back 0 1 264 0
56
inline void PointerToArray< LMatrix3f >::pop_back(void);

1079 11 get_element 0 4 1602 40 PointerToArray< LMatrix3f >::get_element 0 1 265 0
97
inline LMatrix3f const &PointerToArray< LMatrix3f >::get_element(unsigned long long int n) const;

1080 11 set_element 0 4 1602 40 PointerToArray< LMatrix3f >::set_element 0 1 266 0
103
inline void PointerToArray< LMatrix3f >::set_element(unsigned long long int n, LMatrix3f const &value);

1081 11 __getitem__ 0 4 1602 40 PointerToArray< LMatrix3f >::__getitem__ 0 1 267 0
90
LMatrix3f const &PointerToArray< LMatrix3f >::__getitem__(unsigned long long int n) const;

1082 11 __setitem__ 0 4 1602 40 PointerToArray< LMatrix3f >::__setitem__ 0 1 268 0
96
void PointerToArray< LMatrix3f >::__setitem__(unsigned long long int n, LMatrix3f const &value);

1083 8 get_data 0 4 1602 37 PointerToArray< LMatrix3f >::get_data 0 1 269 0
60
PyObject *PointerToArray< LMatrix3f >::get_data(void) const;

1084 8 set_data 0 4 1602 37 PointerToArray< LMatrix3f >::set_data 0 1 270 0
59
void PointerToArray< LMatrix3f >::set_data(PyObject *data);

1085 11 get_subdata 0 4 1602 40 PointerToArray< LMatrix3f >::get_subdata 0 1 271 0
113
PyObject *PointerToArray< LMatrix3f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1086 11 set_subdata 0 4 1602 40 PointerToArray< LMatrix3f >::set_subdata 0 1 272 0
148
inline void PointerToArray< LMatrix3f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1087 13 get_ref_count 0 4 1602 42 PointerToArray< LMatrix3f >::get_ref_count 0 1 273 0
66
inline int PointerToArray< LMatrix3f >::get_ref_count(void) const;

1088 18 get_node_ref_count 0 4 1602 47 PointerToArray< LMatrix3f >::get_node_ref_count 0 1 274 0
71
inline int PointerToArray< LMatrix3f >::get_node_ref_count(void) const;

1089 5 count 0 4 1602 34 PointerToArray< LMatrix3f >::count 0 1 275 0
90
inline unsigned long long int PointerToArray< LMatrix3f >::count(LMatrix3f const &) const;

1090 10 __reduce__ 0 4 1602 39 PointerToArray< LMatrix3f >::__reduce__ 0 1 276 0
72
PyObject *PointerToArray< LMatrix3f >::__reduce__(PyObject *self) const;

1091 13 __getbuffer__ 0 4 1602 42 PointerToArray< LMatrix3f >::__getbuffer__ 0 1 277 0
91
int PointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1092 17 __releasebuffer__ 0 4 1602 46 PointerToArray< LMatrix3f >::__releasebuffer__ 0 1 278 0
91
void PointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1093 15 ~PointerToArray 0 4 1602 44 PointerToArray< LMatrix3f >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3f >::~PointerToArray(void);

1094 14 PointerToArray 0 4 1603 44 PointerToArray< LVecBase2d >::PointerToArray 0 3 279 280 281 0
299
inline PointerToArray< LVecBase2d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase2d const *)(0))));
inline PointerToArray< LVecBase2d >::PointerToArray(PointerToArray< LVecBase2d > const &copy);
PointerToArray< LVecBase2d >::PointerToArray(PyObject *self, PyObject *source);

1095 11 empty_array 0 4 1603 41 PointerToArray< LVecBase2d >::empty_array 0 1 282 0
183
static inline PointerToArray< LVecBase2d > PointerToArray< LVecBase2d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase2d const *)(0))));

1096 5 clear 0 4 1603 35 PointerToArray< LVecBase2d >::clear 0 1 283 0
54
inline void PointerToArray< LVecBase2d >::clear(void);

1097 4 size 0 4 1603 34 PointerToArray< LVecBase2d >::size 0 1 284 0
77
inline unsigned long long int PointerToArray< LVecBase2d >::size(void) const;

1098 9 push_back 0 4 1603 39 PointerToArray< LVecBase2d >::push_back 0 1 285 0
73
inline void PointerToArray< LVecBase2d >::push_back(LVecBase2d const &x);

1099 8 pop_back 0 4 1603 38 PointerToArray< LVecBase2d >::pop_back 0 1 286 0
57
inline void PointerToArray< LVecBase2d >::pop_back(void);

1100 11 get_element 0 4 1603 41 PointerToArray< LVecBase2d >::get_element 0 1 287 0
99
inline LVecBase2d const &PointerToArray< LVecBase2d >::get_element(unsigned long long int n) const;

1101 11 set_element 0 4 1603 41 PointerToArray< LVecBase2d >::set_element 0 1 288 0
105
inline void PointerToArray< LVecBase2d >::set_element(unsigned long long int n, LVecBase2d const &value);

1102 11 __getitem__ 0 4 1603 41 PointerToArray< LVecBase2d >::__getitem__ 0 1 289 0
92
LVecBase2d const &PointerToArray< LVecBase2d >::__getitem__(unsigned long long int n) const;

1103 11 __setitem__ 0 4 1603 41 PointerToArray< LVecBase2d >::__setitem__ 0 1 290 0
98
void PointerToArray< LVecBase2d >::__setitem__(unsigned long long int n, LVecBase2d const &value);

1104 8 get_data 0 4 1603 38 PointerToArray< LVecBase2d >::get_data 0 1 291 0
61
PyObject *PointerToArray< LVecBase2d >::get_data(void) const;

1105 8 set_data 0 4 1603 38 PointerToArray< LVecBase2d >::set_data 0 1 292 0
60
void PointerToArray< LVecBase2d >::set_data(PyObject *data);

1106 11 get_subdata 0 4 1603 41 PointerToArray< LVecBase2d >::get_subdata 0 1 293 0
114
PyObject *PointerToArray< LVecBase2d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1107 11 set_subdata 0 4 1603 41 PointerToArray< LVecBase2d >::set_subdata 0 1 294 0
149
inline void PointerToArray< LVecBase2d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1108 13 get_ref_count 0 4 1603 43 PointerToArray< LVecBase2d >::get_ref_count 0 1 295 0
67
inline int PointerToArray< LVecBase2d >::get_ref_count(void) const;

1109 18 get_node_ref_count 0 4 1603 48 PointerToArray< LVecBase2d >::get_node_ref_count 0 1 296 0
72
inline int PointerToArray< LVecBase2d >::get_node_ref_count(void) const;

1110 5 count 0 4 1603 35 PointerToArray< LVecBase2d >::count 0 1 297 0
92
inline unsigned long long int PointerToArray< LVecBase2d >::count(LVecBase2d const &) const;

1111 10 __reduce__ 0 4 1603 40 PointerToArray< LVecBase2d >::__reduce__ 0 1 298 0
73
PyObject *PointerToArray< LVecBase2d >::__reduce__(PyObject *self) const;

1112 13 __getbuffer__ 0 4 1603 43 PointerToArray< LVecBase2d >::__getbuffer__ 0 1 299 0
92
int PointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1113 17 __releasebuffer__ 0 4 1603 47 PointerToArray< LVecBase2d >::__releasebuffer__ 0 1 300 0
92
void PointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1114 15 ~PointerToArray 0 4 1603 45 PointerToArray< LVecBase2d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2d >::~PointerToArray(void);

1115 14 PointerToArray 0 4 1604 44 PointerToArray< LVecBase2f >::PointerToArray 0 3 301 302 303 0
299
inline PointerToArray< LVecBase2f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase2f const *)(0))));
inline PointerToArray< LVecBase2f >::PointerToArray(PointerToArray< LVecBase2f > const &copy);
PointerToArray< LVecBase2f >::PointerToArray(PyObject *self, PyObject *source);

1116 11 empty_array 0 4 1604 41 PointerToArray< LVecBase2f >::empty_array 0 1 304 0
183
static inline PointerToArray< LVecBase2f > PointerToArray< LVecBase2f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase2f const *)(0))));

1117 5 clear 0 4 1604 35 PointerToArray< LVecBase2f >::clear 0 1 305 0
54
inline void PointerToArray< LVecBase2f >::clear(void);

1118 4 size 0 4 1604 34 PointerToArray< LVecBase2f >::size 0 1 306 0
77
inline unsigned long long int PointerToArray< LVecBase2f >::size(void) const;

1119 9 push_back 0 4 1604 39 PointerToArray< LVecBase2f >::push_back 0 1 307 0
73
inline void PointerToArray< LVecBase2f >::push_back(LVecBase2f const &x);

1120 8 pop_back 0 4 1604 38 PointerToArray< LVecBase2f >::pop_back 0 1 308 0
57
inline void PointerToArray< LVecBase2f >::pop_back(void);

1121 11 get_element 0 4 1604 41 PointerToArray< LVecBase2f >::get_element 0 1 309 0
99
inline LVecBase2f const &PointerToArray< LVecBase2f >::get_element(unsigned long long int n) const;

1122 11 set_element 0 4 1604 41 PointerToArray< LVecBase2f >::set_element 0 1 310 0
105
inline void PointerToArray< LVecBase2f >::set_element(unsigned long long int n, LVecBase2f const &value);

1123 11 __getitem__ 0 4 1604 41 PointerToArray< LVecBase2f >::__getitem__ 0 1 311 0
92
LVecBase2f const &PointerToArray< LVecBase2f >::__getitem__(unsigned long long int n) const;

1124 11 __setitem__ 0 4 1604 41 PointerToArray< LVecBase2f >::__setitem__ 0 1 312 0
98
void PointerToArray< LVecBase2f >::__setitem__(unsigned long long int n, LVecBase2f const &value);

1125 8 get_data 0 4 1604 38 PointerToArray< LVecBase2f >::get_data 0 1 313 0
61
PyObject *PointerToArray< LVecBase2f >::get_data(void) const;

1126 8 set_data 0 4 1604 38 PointerToArray< LVecBase2f >::set_data 0 1 314 0
60
void PointerToArray< LVecBase2f >::set_data(PyObject *data);

1127 11 get_subdata 0 4 1604 41 PointerToArray< LVecBase2f >::get_subdata 0 1 315 0
114
PyObject *PointerToArray< LVecBase2f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1128 11 set_subdata 0 4 1604 41 PointerToArray< LVecBase2f >::set_subdata 0 1 316 0
149
inline void PointerToArray< LVecBase2f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1129 13 get_ref_count 0 4 1604 43 PointerToArray< LVecBase2f >::get_ref_count 0 1 317 0
67
inline int PointerToArray< LVecBase2f >::get_ref_count(void) const;

1130 18 get_node_ref_count 0 4 1604 48 PointerToArray< LVecBase2f >::get_node_ref_count 0 1 318 0
72
inline int PointerToArray< LVecBase2f >::get_node_ref_count(void) const;

1131 5 count 0 4 1604 35 PointerToArray< LVecBase2f >::count 0 1 319 0
92
inline unsigned long long int PointerToArray< LVecBase2f >::count(LVecBase2f const &) const;

1132 10 __reduce__ 0 4 1604 40 PointerToArray< LVecBase2f >::__reduce__ 0 1 320 0
73
PyObject *PointerToArray< LVecBase2f >::__reduce__(PyObject *self) const;

1133 13 __getbuffer__ 0 4 1604 43 PointerToArray< LVecBase2f >::__getbuffer__ 0 1 321 0
92
int PointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1134 17 __releasebuffer__ 0 4 1604 47 PointerToArray< LVecBase2f >::__releasebuffer__ 0 1 322 0
92
void PointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1135 15 ~PointerToArray 0 4 1604 45 PointerToArray< LVecBase2f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2f >::~PointerToArray(void);

1136 14 PointerToArray 0 4 1605 44 PointerToArray< LVecBase2i >::PointerToArray 0 3 323 324 325 0
299
inline PointerToArray< LVecBase2i >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase2i const *)(0))));
inline PointerToArray< LVecBase2i >::PointerToArray(PointerToArray< LVecBase2i > const &copy);
PointerToArray< LVecBase2i >::PointerToArray(PyObject *self, PyObject *source);

1137 11 empty_array 0 4 1605 41 PointerToArray< LVecBase2i >::empty_array 0 1 326 0
183
static inline PointerToArray< LVecBase2i > PointerToArray< LVecBase2i >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase2i const *)(0))));

1138 5 clear 0 4 1605 35 PointerToArray< LVecBase2i >::clear 0 1 327 0
54
inline void PointerToArray< LVecBase2i >::clear(void);

1139 4 size 0 4 1605 34 PointerToArray< LVecBase2i >::size 0 1 328 0
77
inline unsigned long long int PointerToArray< LVecBase2i >::size(void) const;

1140 9 push_back 0 4 1605 39 PointerToArray< LVecBase2i >::push_back 0 1 329 0
73
inline void PointerToArray< LVecBase2i >::push_back(LVecBase2i const &x);

1141 8 pop_back 0 4 1605 38 PointerToArray< LVecBase2i >::pop_back 0 1 330 0
57
inline void PointerToArray< LVecBase2i >::pop_back(void);

1142 11 get_element 0 4 1605 41 PointerToArray< LVecBase2i >::get_element 0 1 331 0
99
inline LVecBase2i const &PointerToArray< LVecBase2i >::get_element(unsigned long long int n) const;

1143 11 set_element 0 4 1605 41 PointerToArray< LVecBase2i >::set_element 0 1 332 0
105
inline void PointerToArray< LVecBase2i >::set_element(unsigned long long int n, LVecBase2i const &value);

1144 11 __getitem__ 0 4 1605 41 PointerToArray< LVecBase2i >::__getitem__ 0 1 333 0
92
LVecBase2i const &PointerToArray< LVecBase2i >::__getitem__(unsigned long long int n) const;

1145 11 __setitem__ 0 4 1605 41 PointerToArray< LVecBase2i >::__setitem__ 0 1 334 0
98
void PointerToArray< LVecBase2i >::__setitem__(unsigned long long int n, LVecBase2i const &value);

1146 8 get_data 0 4 1605 38 PointerToArray< LVecBase2i >::get_data 0 1 335 0
61
PyObject *PointerToArray< LVecBase2i >::get_data(void) const;

1147 8 set_data 0 4 1605 38 PointerToArray< LVecBase2i >::set_data 0 1 336 0
60
void PointerToArray< LVecBase2i >::set_data(PyObject *data);

1148 11 get_subdata 0 4 1605 41 PointerToArray< LVecBase2i >::get_subdata 0 1 337 0
114
PyObject *PointerToArray< LVecBase2i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1149 11 set_subdata 0 4 1605 41 PointerToArray< LVecBase2i >::set_subdata 0 1 338 0
149
inline void PointerToArray< LVecBase2i >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1150 13 get_ref_count 0 4 1605 43 PointerToArray< LVecBase2i >::get_ref_count 0 1 339 0
67
inline int PointerToArray< LVecBase2i >::get_ref_count(void) const;

1151 18 get_node_ref_count 0 4 1605 48 PointerToArray< LVecBase2i >::get_node_ref_count 0 1 340 0
72
inline int PointerToArray< LVecBase2i >::get_node_ref_count(void) const;

1152 5 count 0 4 1605 35 PointerToArray< LVecBase2i >::count 0 1 341 0
92
inline unsigned long long int PointerToArray< LVecBase2i >::count(LVecBase2i const &) const;

1153 10 __reduce__ 0 4 1605 40 PointerToArray< LVecBase2i >::__reduce__ 0 1 342 0
73
PyObject *PointerToArray< LVecBase2i >::__reduce__(PyObject *self) const;

1154 13 __getbuffer__ 0 4 1605 43 PointerToArray< LVecBase2i >::__getbuffer__ 0 1 343 0
92
int PointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1155 17 __releasebuffer__ 0 4 1605 47 PointerToArray< LVecBase2i >::__releasebuffer__ 0 1 344 0
92
void PointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1156 15 ~PointerToArray 0 4 1605 45 PointerToArray< LVecBase2i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2i >::~PointerToArray(void);

1157 14 PointerToArray 0 4 1606 44 PointerToArray< LVecBase3d >::PointerToArray 0 3 345 346 347 0
299
inline PointerToArray< LVecBase3d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase3d const *)(0))));
inline PointerToArray< LVecBase3d >::PointerToArray(PointerToArray< LVecBase3d > const &copy);
PointerToArray< LVecBase3d >::PointerToArray(PyObject *self, PyObject *source);

1158 11 empty_array 0 4 1606 41 PointerToArray< LVecBase3d >::empty_array 0 1 348 0
183
static inline PointerToArray< LVecBase3d > PointerToArray< LVecBase3d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase3d const *)(0))));

1159 5 clear 0 4 1606 35 PointerToArray< LVecBase3d >::clear 0 1 349 0
54
inline void PointerToArray< LVecBase3d >::clear(void);

1160 4 size 0 4 1606 34 PointerToArray< LVecBase3d >::size 0 1 350 0
77
inline unsigned long long int PointerToArray< LVecBase3d >::size(void) const;

1161 9 push_back 0 4 1606 39 PointerToArray< LVecBase3d >::push_back 0 1 351 0
73
inline void PointerToArray< LVecBase3d >::push_back(LVecBase3d const &x);

1162 8 pop_back 0 4 1606 38 PointerToArray< LVecBase3d >::pop_back 0 1 352 0
57
inline void PointerToArray< LVecBase3d >::pop_back(void);

1163 11 get_element 0 4 1606 41 PointerToArray< LVecBase3d >::get_element 0 1 353 0
99
inline LVecBase3d const &PointerToArray< LVecBase3d >::get_element(unsigned long long int n) const;

1164 11 set_element 0 4 1606 41 PointerToArray< LVecBase3d >::set_element 0 1 354 0
105
inline void PointerToArray< LVecBase3d >::set_element(unsigned long long int n, LVecBase3d const &value);

1165 11 __getitem__ 0 4 1606 41 PointerToArray< LVecBase3d >::__getitem__ 0 1 355 0
92
LVecBase3d const &PointerToArray< LVecBase3d >::__getitem__(unsigned long long int n) const;

1166 11 __setitem__ 0 4 1606 41 PointerToArray< LVecBase3d >::__setitem__ 0 1 356 0
98
void PointerToArray< LVecBase3d >::__setitem__(unsigned long long int n, LVecBase3d const &value);

1167 8 get_data 0 4 1606 38 PointerToArray< LVecBase3d >::get_data 0 1 357 0
61
PyObject *PointerToArray< LVecBase3d >::get_data(void) const;

1168 8 set_data 0 4 1606 38 PointerToArray< LVecBase3d >::set_data 0 1 358 0
60
void PointerToArray< LVecBase3d >::set_data(PyObject *data);

1169 11 get_subdata 0 4 1606 41 PointerToArray< LVecBase3d >::get_subdata 0 1 359 0
114
PyObject *PointerToArray< LVecBase3d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1170 11 set_subdata 0 4 1606 41 PointerToArray< LVecBase3d >::set_subdata 0 1 360 0
149
inline void PointerToArray< LVecBase3d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1171 13 get_ref_count 0 4 1606 43 PointerToArray< LVecBase3d >::get_ref_count 0 1 361 0
67
inline int PointerToArray< LVecBase3d >::get_ref_count(void) const;

1172 18 get_node_ref_count 0 4 1606 48 PointerToArray< LVecBase3d >::get_node_ref_count 0 1 362 0
72
inline int PointerToArray< LVecBase3d >::get_node_ref_count(void) const;

1173 5 count 0 4 1606 35 PointerToArray< LVecBase3d >::count 0 1 363 0
92
inline unsigned long long int PointerToArray< LVecBase3d >::count(LVecBase3d const &) const;

1174 10 __reduce__ 0 4 1606 40 PointerToArray< LVecBase3d >::__reduce__ 0 1 364 0
73
PyObject *PointerToArray< LVecBase3d >::__reduce__(PyObject *self) const;

1175 13 __getbuffer__ 0 4 1606 43 PointerToArray< LVecBase3d >::__getbuffer__ 0 1 365 0
92
int PointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1176 17 __releasebuffer__ 0 4 1606 47 PointerToArray< LVecBase3d >::__releasebuffer__ 0 1 366 0
92
void PointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1177 15 ~PointerToArray 0 4 1606 45 PointerToArray< LVecBase3d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3d >::~PointerToArray(void);

1178 14 PointerToArray 0 4 1607 44 PointerToArray< LVecBase3f >::PointerToArray 0 3 367 368 369 0
299
inline PointerToArray< LVecBase3f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase3f const *)(0))));
inline PointerToArray< LVecBase3f >::PointerToArray(PointerToArray< LVecBase3f > const &copy);
PointerToArray< LVecBase3f >::PointerToArray(PyObject *self, PyObject *source);

1179 11 empty_array 0 4 1607 41 PointerToArray< LVecBase3f >::empty_array 0 1 370 0
183
static inline PointerToArray< LVecBase3f > PointerToArray< LVecBase3f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase3f const *)(0))));

1180 5 clear 0 4 1607 35 PointerToArray< LVecBase3f >::clear 0 1 371 0
54
inline void PointerToArray< LVecBase3f >::clear(void);

1181 4 size 0 4 1607 34 PointerToArray< LVecBase3f >::size 0 1 372 0
77
inline unsigned long long int PointerToArray< LVecBase3f >::size(void) const;

1182 9 push_back 0 4 1607 39 PointerToArray< LVecBase3f >::push_back 0 1 373 0
73
inline void PointerToArray< LVecBase3f >::push_back(LVecBase3f const &x);

1183 8 pop_back 0 4 1607 38 PointerToArray< LVecBase3f >::pop_back 0 1 374 0
57
inline void PointerToArray< LVecBase3f >::pop_back(void);

1184 11 get_element 0 4 1607 41 PointerToArray< LVecBase3f >::get_element 0 1 375 0
99
inline LVecBase3f const &PointerToArray< LVecBase3f >::get_element(unsigned long long int n) const;

1185 11 set_element 0 4 1607 41 PointerToArray< LVecBase3f >::set_element 0 1 376 0
105
inline void PointerToArray< LVecBase3f >::set_element(unsigned long long int n, LVecBase3f const &value);

1186 11 __getitem__ 0 4 1607 41 PointerToArray< LVecBase3f >::__getitem__ 0 1 377 0
92
LVecBase3f const &PointerToArray< LVecBase3f >::__getitem__(unsigned long long int n) const;

1187 11 __setitem__ 0 4 1607 41 PointerToArray< LVecBase3f >::__setitem__ 0 1 378 0
98
void PointerToArray< LVecBase3f >::__setitem__(unsigned long long int n, LVecBase3f const &value);

1188 8 get_data 0 4 1607 38 PointerToArray< LVecBase3f >::get_data 0 1 379 0
61
PyObject *PointerToArray< LVecBase3f >::get_data(void) const;

1189 8 set_data 0 4 1607 38 PointerToArray< LVecBase3f >::set_data 0 1 380 0
60
void PointerToArray< LVecBase3f >::set_data(PyObject *data);

1190 11 get_subdata 0 4 1607 41 PointerToArray< LVecBase3f >::get_subdata 0 1 381 0
114
PyObject *PointerToArray< LVecBase3f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1191 11 set_subdata 0 4 1607 41 PointerToArray< LVecBase3f >::set_subdata 0 1 382 0
149
inline void PointerToArray< LVecBase3f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1192 13 get_ref_count 0 4 1607 43 PointerToArray< LVecBase3f >::get_ref_count 0 1 383 0
67
inline int PointerToArray< LVecBase3f >::get_ref_count(void) const;

1193 18 get_node_ref_count 0 4 1607 48 PointerToArray< LVecBase3f >::get_node_ref_count 0 1 384 0
72
inline int PointerToArray< LVecBase3f >::get_node_ref_count(void) const;

1194 5 count 0 4 1607 35 PointerToArray< LVecBase3f >::count 0 1 385 0
92
inline unsigned long long int PointerToArray< LVecBase3f >::count(LVecBase3f const &) const;

1195 10 __reduce__ 0 4 1607 40 PointerToArray< LVecBase3f >::__reduce__ 0 1 386 0
73
PyObject *PointerToArray< LVecBase3f >::__reduce__(PyObject *self) const;

1196 13 __getbuffer__ 0 4 1607 43 PointerToArray< LVecBase3f >::__getbuffer__ 0 1 387 0
92
int PointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1197 17 __releasebuffer__ 0 4 1607 47 PointerToArray< LVecBase3f >::__releasebuffer__ 0 1 388 0
92
void PointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1198 15 ~PointerToArray 0 4 1607 45 PointerToArray< LVecBase3f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3f >::~PointerToArray(void);

1199 14 PointerToArray 0 4 1608 44 PointerToArray< LVecBase3i >::PointerToArray 0 3 389 390 391 0
299
inline PointerToArray< LVecBase3i >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase3i const *)(0))));
inline PointerToArray< LVecBase3i >::PointerToArray(PointerToArray< LVecBase3i > const &copy);
PointerToArray< LVecBase3i >::PointerToArray(PyObject *self, PyObject *source);

1200 11 empty_array 0 4 1608 41 PointerToArray< LVecBase3i >::empty_array 0 1 392 0
183
static inline PointerToArray< LVecBase3i > PointerToArray< LVecBase3i >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase3i const *)(0))));

1201 5 clear 0 4 1608 35 PointerToArray< LVecBase3i >::clear 0 1 393 0
54
inline void PointerToArray< LVecBase3i >::clear(void);

1202 4 size 0 4 1608 34 PointerToArray< LVecBase3i >::size 0 1 394 0
77
inline unsigned long long int PointerToArray< LVecBase3i >::size(void) const;

1203 9 push_back 0 4 1608 39 PointerToArray< LVecBase3i >::push_back 0 1 395 0
73
inline void PointerToArray< LVecBase3i >::push_back(LVecBase3i const &x);

1204 8 pop_back 0 4 1608 38 PointerToArray< LVecBase3i >::pop_back 0 1 396 0
57
inline void PointerToArray< LVecBase3i >::pop_back(void);

1205 11 get_element 0 4 1608 41 PointerToArray< LVecBase3i >::get_element 0 1 397 0
99
inline LVecBase3i const &PointerToArray< LVecBase3i >::get_element(unsigned long long int n) const;

1206 11 set_element 0 4 1608 41 PointerToArray< LVecBase3i >::set_element 0 1 398 0
105
inline void PointerToArray< LVecBase3i >::set_element(unsigned long long int n, LVecBase3i const &value);

1207 11 __getitem__ 0 4 1608 41 PointerToArray< LVecBase3i >::__getitem__ 0 1 399 0
92
LVecBase3i const &PointerToArray< LVecBase3i >::__getitem__(unsigned long long int n) const;

1208 11 __setitem__ 0 4 1608 41 PointerToArray< LVecBase3i >::__setitem__ 0 1 400 0
98
void PointerToArray< LVecBase3i >::__setitem__(unsigned long long int n, LVecBase3i const &value);

1209 8 get_data 0 4 1608 38 PointerToArray< LVecBase3i >::get_data 0 1 401 0
61
PyObject *PointerToArray< LVecBase3i >::get_data(void) const;

1210 8 set_data 0 4 1608 38 PointerToArray< LVecBase3i >::set_data 0 1 402 0
60
void PointerToArray< LVecBase3i >::set_data(PyObject *data);

1211 11 get_subdata 0 4 1608 41 PointerToArray< LVecBase3i >::get_subdata 0 1 403 0
114
PyObject *PointerToArray< LVecBase3i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1212 11 set_subdata 0 4 1608 41 PointerToArray< LVecBase3i >::set_subdata 0 1 404 0
149
inline void PointerToArray< LVecBase3i >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1213 13 get_ref_count 0 4 1608 43 PointerToArray< LVecBase3i >::get_ref_count 0 1 405 0
67
inline int PointerToArray< LVecBase3i >::get_ref_count(void) const;

1214 18 get_node_ref_count 0 4 1608 48 PointerToArray< LVecBase3i >::get_node_ref_count 0 1 406 0
72
inline int PointerToArray< LVecBase3i >::get_node_ref_count(void) const;

1215 5 count 0 4 1608 35 PointerToArray< LVecBase3i >::count 0 1 407 0
92
inline unsigned long long int PointerToArray< LVecBase3i >::count(LVecBase3i const &) const;

1216 10 __reduce__ 0 4 1608 40 PointerToArray< LVecBase3i >::__reduce__ 0 1 408 0
73
PyObject *PointerToArray< LVecBase3i >::__reduce__(PyObject *self) const;

1217 13 __getbuffer__ 0 4 1608 43 PointerToArray< LVecBase3i >::__getbuffer__ 0 1 409 0
92
int PointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1218 17 __releasebuffer__ 0 4 1608 47 PointerToArray< LVecBase3i >::__releasebuffer__ 0 1 410 0
92
void PointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1219 15 ~PointerToArray 0 4 1608 45 PointerToArray< LVecBase3i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3i >::~PointerToArray(void);

1220 14 PointerToArray 0 4 1609 52 PointerToArray< UnalignedLMatrix4d >::PointerToArray 0 3 411 412 413 0
339
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4d const *)(0))));
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
PointerToArray< UnalignedLMatrix4d >::PointerToArray(PyObject *self, PyObject *source);

1221 11 empty_array 0 4 1609 49 PointerToArray< UnalignedLMatrix4d >::empty_array 0 1 414 0
207
static inline PointerToArray< UnalignedLMatrix4d > PointerToArray< UnalignedLMatrix4d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4d const *)(0))));

1222 5 clear 0 4 1609 43 PointerToArray< UnalignedLMatrix4d >::clear 0 1 415 0
62
inline void PointerToArray< UnalignedLMatrix4d >::clear(void);

1223 4 size 0 4 1609 42 PointerToArray< UnalignedLMatrix4d >::size 0 1 416 0
85
inline unsigned long long int PointerToArray< UnalignedLMatrix4d >::size(void) const;

1224 9 push_back 0 4 1609 47 PointerToArray< UnalignedLMatrix4d >::push_back 0 1 417 0
89
inline void PointerToArray< UnalignedLMatrix4d >::push_back(UnalignedLMatrix4d const &x);

1225 8 pop_back 0 4 1609 46 PointerToArray< UnalignedLMatrix4d >::pop_back 0 1 418 0
65
inline void PointerToArray< UnalignedLMatrix4d >::pop_back(void);

1226 11 get_element 0 4 1609 49 PointerToArray< UnalignedLMatrix4d >::get_element 0 1 419 0
115
inline UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::get_element(unsigned long long int n) const;

1227 11 set_element 0 4 1609 49 PointerToArray< UnalignedLMatrix4d >::set_element 0 1 420 0
121
inline void PointerToArray< UnalignedLMatrix4d >::set_element(unsigned long long int n, UnalignedLMatrix4d const &value);

1228 11 __getitem__ 0 4 1609 49 PointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 421 0
108
UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned long long int n) const;

1229 11 __setitem__ 0 4 1609 49 PointerToArray< UnalignedLMatrix4d >::__setitem__ 0 1 422 0
114
void PointerToArray< UnalignedLMatrix4d >::__setitem__(unsigned long long int n, UnalignedLMatrix4d const &value);

1230 8 get_data 0 4 1609 46 PointerToArray< UnalignedLMatrix4d >::get_data 0 1 423 0
69
PyObject *PointerToArray< UnalignedLMatrix4d >::get_data(void) const;

1231 8 set_data 0 4 1609 46 PointerToArray< UnalignedLMatrix4d >::set_data 0 1 424 0
68
void PointerToArray< UnalignedLMatrix4d >::set_data(PyObject *data);

1232 11 get_subdata 0 4 1609 49 PointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 425 0
122
PyObject *PointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1233 11 set_subdata 0 4 1609 49 PointerToArray< UnalignedLMatrix4d >::set_subdata 0 1 426 0
157
inline void PointerToArray< UnalignedLMatrix4d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1234 13 get_ref_count 0 4 1609 51 PointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 427 0
75
inline int PointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

1235 18 get_node_ref_count 0 4 1609 56 PointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 428 0
80
inline int PointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

1236 5 count 0 4 1609 43 PointerToArray< UnalignedLMatrix4d >::count 0 1 429 0
108
inline unsigned long long int PointerToArray< UnalignedLMatrix4d >::count(UnalignedLMatrix4d const &) const;

1237 10 __reduce__ 0 4 1609 48 PointerToArray< UnalignedLMatrix4d >::__reduce__ 0 1 430 0
81
PyObject *PointerToArray< UnalignedLMatrix4d >::__reduce__(PyObject *self) const;

1238 13 __getbuffer__ 0 4 1609 51 PointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 431 0
100
int PointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1239 17 __releasebuffer__ 0 4 1609 55 PointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 432 0
100
void PointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1240 15 ~PointerToArray 0 4 1609 53 PointerToArray< UnalignedLMatrix4d >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4d >::~PointerToArray(void);

1241 14 PointerToArray 0 4 1610 52 PointerToArray< UnalignedLMatrix4f >::PointerToArray 0 3 433 434 435 0
339
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4f const *)(0))));
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
PointerToArray< UnalignedLMatrix4f >::PointerToArray(PyObject *self, PyObject *source);

1242 11 empty_array 0 4 1610 49 PointerToArray< UnalignedLMatrix4f >::empty_array 0 1 436 0
207
static inline PointerToArray< UnalignedLMatrix4f > PointerToArray< UnalignedLMatrix4f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4f const *)(0))));

1243 5 clear 0 4 1610 43 PointerToArray< UnalignedLMatrix4f >::clear 0 1 437 0
62
inline void PointerToArray< UnalignedLMatrix4f >::clear(void);

1244 4 size 0 4 1610 42 PointerToArray< UnalignedLMatrix4f >::size 0 1 438 0
85
inline unsigned long long int PointerToArray< UnalignedLMatrix4f >::size(void) const;

1245 9 push_back 0 4 1610 47 PointerToArray< UnalignedLMatrix4f >::push_back 0 1 439 0
89
inline void PointerToArray< UnalignedLMatrix4f >::push_back(UnalignedLMatrix4f const &x);

1246 8 pop_back 0 4 1610 46 PointerToArray< UnalignedLMatrix4f >::pop_back 0 1 440 0
65
inline void PointerToArray< UnalignedLMatrix4f >::pop_back(void);

1247 11 get_element 0 4 1610 49 PointerToArray< UnalignedLMatrix4f >::get_element 0 1 441 0
115
inline UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::get_element(unsigned long long int n) const;

1248 11 set_element 0 4 1610 49 PointerToArray< UnalignedLMatrix4f >::set_element 0 1 442 0
121
inline void PointerToArray< UnalignedLMatrix4f >::set_element(unsigned long long int n, UnalignedLMatrix4f const &value);

1249 11 __getitem__ 0 4 1610 49 PointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 443 0
108
UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned long long int n) const;

1250 11 __setitem__ 0 4 1610 49 PointerToArray< UnalignedLMatrix4f >::__setitem__ 0 1 444 0
114
void PointerToArray< UnalignedLMatrix4f >::__setitem__(unsigned long long int n, UnalignedLMatrix4f const &value);

1251 8 get_data 0 4 1610 46 PointerToArray< UnalignedLMatrix4f >::get_data 0 1 445 0
69
PyObject *PointerToArray< UnalignedLMatrix4f >::get_data(void) const;

1252 8 set_data 0 4 1610 46 PointerToArray< UnalignedLMatrix4f >::set_data 0 1 446 0
68
void PointerToArray< UnalignedLMatrix4f >::set_data(PyObject *data);

1253 11 get_subdata 0 4 1610 49 PointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 447 0
122
PyObject *PointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1254 11 set_subdata 0 4 1610 49 PointerToArray< UnalignedLMatrix4f >::set_subdata 0 1 448 0
157
inline void PointerToArray< UnalignedLMatrix4f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1255 13 get_ref_count 0 4 1610 51 PointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 449 0
75
inline int PointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

1256 18 get_node_ref_count 0 4 1610 56 PointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 450 0
80
inline int PointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

1257 5 count 0 4 1610 43 PointerToArray< UnalignedLMatrix4f >::count 0 1 451 0
108
inline unsigned long long int PointerToArray< UnalignedLMatrix4f >::count(UnalignedLMatrix4f const &) const;

1258 10 __reduce__ 0 4 1610 48 PointerToArray< UnalignedLMatrix4f >::__reduce__ 0 1 452 0
81
PyObject *PointerToArray< UnalignedLMatrix4f >::__reduce__(PyObject *self) const;

1259 13 __getbuffer__ 0 4 1610 51 PointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 453 0
100
int PointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1260 17 __releasebuffer__ 0 4 1610 55 PointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 454 0
100
void PointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1261 15 ~PointerToArray 0 4 1610 53 PointerToArray< UnalignedLMatrix4f >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4f >::~PointerToArray(void);

1262 14 PointerToArray 0 4 1611 53 PointerToArray< UnalignedLVecBase4d >::PointerToArray 0 3 455 456 457 0
344
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4d const *)(0))));
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
PointerToArray< UnalignedLVecBase4d >::PointerToArray(PyObject *self, PyObject *source);

1263 11 empty_array 0 4 1611 50 PointerToArray< UnalignedLVecBase4d >::empty_array 0 1 458 0
210
static inline PointerToArray< UnalignedLVecBase4d > PointerToArray< UnalignedLVecBase4d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4d const *)(0))));

1264 5 clear 0 4 1611 44 PointerToArray< UnalignedLVecBase4d >::clear 0 1 459 0
63
inline void PointerToArray< UnalignedLVecBase4d >::clear(void);

1265 4 size 0 4 1611 43 PointerToArray< UnalignedLVecBase4d >::size 0 1 460 0
86
inline unsigned long long int PointerToArray< UnalignedLVecBase4d >::size(void) const;

1266 9 push_back 0 4 1611 48 PointerToArray< UnalignedLVecBase4d >::push_back 0 1 461 0
91
inline void PointerToArray< UnalignedLVecBase4d >::push_back(UnalignedLVecBase4d const &x);

1267 8 pop_back 0 4 1611 47 PointerToArray< UnalignedLVecBase4d >::pop_back 0 1 462 0
66
inline void PointerToArray< UnalignedLVecBase4d >::pop_back(void);

1268 11 get_element 0 4 1611 50 PointerToArray< UnalignedLVecBase4d >::get_element 0 1 463 0
117
inline UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::get_element(unsigned long long int n) const;

1269 11 set_element 0 4 1611 50 PointerToArray< UnalignedLVecBase4d >::set_element 0 1 464 0
123
inline void PointerToArray< UnalignedLVecBase4d >::set_element(unsigned long long int n, UnalignedLVecBase4d const &value);

1270 11 __getitem__ 0 4 1611 50 PointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 465 0
110
UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned long long int n) const;

1271 11 __setitem__ 0 4 1611 50 PointerToArray< UnalignedLVecBase4d >::__setitem__ 0 1 466 0
116
void PointerToArray< UnalignedLVecBase4d >::__setitem__(unsigned long long int n, UnalignedLVecBase4d const &value);

1272 8 get_data 0 4 1611 47 PointerToArray< UnalignedLVecBase4d >::get_data 0 1 467 0
70
PyObject *PointerToArray< UnalignedLVecBase4d >::get_data(void) const;

1273 8 set_data 0 4 1611 47 PointerToArray< UnalignedLVecBase4d >::set_data 0 1 468 0
69
void PointerToArray< UnalignedLVecBase4d >::set_data(PyObject *data);

1274 11 get_subdata 0 4 1611 50 PointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 469 0
123
PyObject *PointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1275 11 set_subdata 0 4 1611 50 PointerToArray< UnalignedLVecBase4d >::set_subdata 0 1 470 0
158
inline void PointerToArray< UnalignedLVecBase4d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1276 13 get_ref_count 0 4 1611 52 PointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 471 0
76
inline int PointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

1277 18 get_node_ref_count 0 4 1611 57 PointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 472 0
81
inline int PointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

1278 5 count 0 4 1611 44 PointerToArray< UnalignedLVecBase4d >::count 0 1 473 0
110
inline unsigned long long int PointerToArray< UnalignedLVecBase4d >::count(UnalignedLVecBase4d const &) const;

1279 10 __reduce__ 0 4 1611 49 PointerToArray< UnalignedLVecBase4d >::__reduce__ 0 1 474 0
82
PyObject *PointerToArray< UnalignedLVecBase4d >::__reduce__(PyObject *self) const;

1280 13 __getbuffer__ 0 4 1611 52 PointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 475 0
101
int PointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1281 17 __releasebuffer__ 0 4 1611 56 PointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 476 0
101
void PointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1282 15 ~PointerToArray 0 4 1611 54 PointerToArray< UnalignedLVecBase4d >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4d >::~PointerToArray(void);

1283 14 PointerToArray 0 4 1612 53 PointerToArray< UnalignedLVecBase4f >::PointerToArray 0 3 477 478 479 0
344
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4f const *)(0))));
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
PointerToArray< UnalignedLVecBase4f >::PointerToArray(PyObject *self, PyObject *source);

1284 11 empty_array 0 4 1612 50 PointerToArray< UnalignedLVecBase4f >::empty_array 0 1 480 0
210
static inline PointerToArray< UnalignedLVecBase4f > PointerToArray< UnalignedLVecBase4f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4f const *)(0))));

1285 5 clear 0 4 1612 44 PointerToArray< UnalignedLVecBase4f >::clear 0 1 481 0
63
inline void PointerToArray< UnalignedLVecBase4f >::clear(void);

1286 4 size 0 4 1612 43 PointerToArray< UnalignedLVecBase4f >::size 0 1 482 0
86
inline unsigned long long int PointerToArray< UnalignedLVecBase4f >::size(void) const;

1287 9 push_back 0 4 1612 48 PointerToArray< UnalignedLVecBase4f >::push_back 0 1 483 0
91
inline void PointerToArray< UnalignedLVecBase4f >::push_back(UnalignedLVecBase4f const &x);

1288 8 pop_back 0 4 1612 47 PointerToArray< UnalignedLVecBase4f >::pop_back 0 1 484 0
66
inline void PointerToArray< UnalignedLVecBase4f >::pop_back(void);

1289 11 get_element 0 4 1612 50 PointerToArray< UnalignedLVecBase4f >::get_element 0 1 485 0
117
inline UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::get_element(unsigned long long int n) const;

1290 11 set_element 0 4 1612 50 PointerToArray< UnalignedLVecBase4f >::set_element 0 1 486 0
123
inline void PointerToArray< UnalignedLVecBase4f >::set_element(unsigned long long int n, UnalignedLVecBase4f const &value);

1291 11 __getitem__ 0 4 1612 50 PointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 487 0
110
UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned long long int n) const;

1292 11 __setitem__ 0 4 1612 50 PointerToArray< UnalignedLVecBase4f >::__setitem__ 0 1 488 0
116
void PointerToArray< UnalignedLVecBase4f >::__setitem__(unsigned long long int n, UnalignedLVecBase4f const &value);

1293 8 get_data 0 4 1612 47 PointerToArray< UnalignedLVecBase4f >::get_data 0 1 489 0
70
PyObject *PointerToArray< UnalignedLVecBase4f >::get_data(void) const;

1294 8 set_data 0 4 1612 47 PointerToArray< UnalignedLVecBase4f >::set_data 0 1 490 0
69
void PointerToArray< UnalignedLVecBase4f >::set_data(PyObject *data);

1295 11 get_subdata 0 4 1612 50 PointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 491 0
123
PyObject *PointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1296 11 set_subdata 0 4 1612 50 PointerToArray< UnalignedLVecBase4f >::set_subdata 0 1 492 0
158
inline void PointerToArray< UnalignedLVecBase4f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1297 13 get_ref_count 0 4 1612 52 PointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 493 0
76
inline int PointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

1298 18 get_node_ref_count 0 4 1612 57 PointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 494 0
81
inline int PointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

1299 5 count 0 4 1612 44 PointerToArray< UnalignedLVecBase4f >::count 0 1 495 0
110
inline unsigned long long int PointerToArray< UnalignedLVecBase4f >::count(UnalignedLVecBase4f const &) const;

1300 10 __reduce__ 0 4 1612 49 PointerToArray< UnalignedLVecBase4f >::__reduce__ 0 1 496 0
82
PyObject *PointerToArray< UnalignedLVecBase4f >::__reduce__(PyObject *self) const;

1301 13 __getbuffer__ 0 4 1612 52 PointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 497 0
101
int PointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1302 17 __releasebuffer__ 0 4 1612 56 PointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 498 0
101
void PointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1303 15 ~PointerToArray 0 4 1612 54 PointerToArray< UnalignedLVecBase4f >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4f >::~PointerToArray(void);

1304 14 PointerToArray 0 4 1613 53 PointerToArray< UnalignedLVecBase4i >::PointerToArray 0 3 499 500 501 0
344
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4i const *)(0))));
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
PointerToArray< UnalignedLVecBase4i >::PointerToArray(PyObject *self, PyObject *source);

1305 11 empty_array 0 4 1613 50 PointerToArray< UnalignedLVecBase4i >::empty_array 0 1 502 0
210
static inline PointerToArray< UnalignedLVecBase4i > PointerToArray< UnalignedLVecBase4i >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4i const *)(0))));

1306 5 clear 0 4 1613 44 PointerToArray< UnalignedLVecBase4i >::clear 0 1 503 0
63
inline void PointerToArray< UnalignedLVecBase4i >::clear(void);

1307 4 size 0 4 1613 43 PointerToArray< UnalignedLVecBase4i >::size 0 1 504 0
86
inline unsigned long long int PointerToArray< UnalignedLVecBase4i >::size(void) const;

1308 9 push_back 0 4 1613 48 PointerToArray< UnalignedLVecBase4i >::push_back 0 1 505 0
91
inline void PointerToArray< UnalignedLVecBase4i >::push_back(UnalignedLVecBase4i const &x);

1309 8 pop_back 0 4 1613 47 PointerToArray< UnalignedLVecBase4i >::pop_back 0 1 506 0
66
inline void PointerToArray< UnalignedLVecBase4i >::pop_back(void);

1310 11 get_element 0 4 1613 50 PointerToArray< UnalignedLVecBase4i >::get_element 0 1 507 0
117
inline UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::get_element(unsigned long long int n) const;

1311 11 set_element 0 4 1613 50 PointerToArray< UnalignedLVecBase4i >::set_element 0 1 508 0
123
inline void PointerToArray< UnalignedLVecBase4i >::set_element(unsigned long long int n, UnalignedLVecBase4i const &value);

1312 11 __getitem__ 0 4 1613 50 PointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 509 0
110
UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned long long int n) const;

1313 11 __setitem__ 0 4 1613 50 PointerToArray< UnalignedLVecBase4i >::__setitem__ 0 1 510 0
116
void PointerToArray< UnalignedLVecBase4i >::__setitem__(unsigned long long int n, UnalignedLVecBase4i const &value);

1314 8 get_data 0 4 1613 47 PointerToArray< UnalignedLVecBase4i >::get_data 0 1 511 0
70
PyObject *PointerToArray< UnalignedLVecBase4i >::get_data(void) const;

1315 8 set_data 0 4 1613 47 PointerToArray< UnalignedLVecBase4i >::set_data 0 1 512 0
69
void PointerToArray< UnalignedLVecBase4i >::set_data(PyObject *data);

1316 11 get_subdata 0 4 1613 50 PointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 513 0
123
PyObject *PointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1317 11 set_subdata 0 4 1613 50 PointerToArray< UnalignedLVecBase4i >::set_subdata 0 1 514 0
158
inline void PointerToArray< UnalignedLVecBase4i >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1318 13 get_ref_count 0 4 1613 52 PointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 515 0
76
inline int PointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

1319 18 get_node_ref_count 0 4 1613 57 PointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 516 0
81
inline int PointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

1320 5 count 0 4 1613 44 PointerToArray< UnalignedLVecBase4i >::count 0 1 517 0
110
inline unsigned long long int PointerToArray< UnalignedLVecBase4i >::count(UnalignedLVecBase4i const &) const;

1321 10 __reduce__ 0 4 1613 49 PointerToArray< UnalignedLVecBase4i >::__reduce__ 0 1 518 0
82
PyObject *PointerToArray< UnalignedLVecBase4i >::__reduce__(PyObject *self) const;

1322 13 __getbuffer__ 0 4 1613 52 PointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 519 0
101
int PointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1323 17 __releasebuffer__ 0 4 1613 56 PointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 520 0
101
void PointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1324 15 ~PointerToArray 0 4 1613 54 PointerToArray< UnalignedLVecBase4i >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4i >::~PointerToArray(void);

1325 9 make_copy 0 6 1614 25 BoundingVolume::make_copy 0 1 521 0
66
virtual BoundingVolume *BoundingVolume::make_copy(void) const = 0;

1326 8 is_empty 0 4 1614 24 BoundingVolume::is_empty 0 1 522 253
/**
 * Any kind of volume might be empty.  This is a degenerate volume that
 * contains no points; it's not the same as, for instance, a sphere with
 * radius zero, since that contains one point (the center).  It intersects
 * with no other volumes.
 */
49
inline bool BoundingVolume::is_empty(void) const;

1327 11 is_infinite 0 4 1614 27 BoundingVolume::is_infinite 0 1 523 536
/**
 * The other side of the empty coin is an infinite volume.  This is a
 * degenerate state of a normally finite volume that contains all points.
 * (Note that some kinds of infinite bounding volumes, like binary separating
 * planes, do not contain all points and thus correctly return is_infinite()
 * == false, even though they are technically infinite.  This is a special
 * case of the word 'infinite' meaning the volume covers all points in space.)
 *
 * It completely intersects with all other volumes except empty volumes.
 */
52
inline bool BoundingVolume::is_infinite(void) const;

1328 12 set_infinite 0 4 1614 28 BoundingVolume::set_infinite 0 1 524 135
/**
 * Marks the volume as infinite, even if it is normally finite.  You can think
 * of this as an infinite extend_by() operation.
 */
47
inline void BoundingVolume::set_infinite(void);

1329 9 extend_by 0 4 1614 25 BoundingVolume::extend_by 0 1 525 72
/**
 * Increases the size of the volume to include the given volume.
 */
65
inline bool BoundingVolume::extend_by(BoundingVolume const *vol);

1330 8 contains 0 4 1614 24 BoundingVolume::contains 0 1 526 128
/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */
69
inline int BoundingVolume::contains(BoundingVolume const *vol) const;

1331 6 output 0 6 1614 22 BoundingVolume::output 0 1 527 0
65
virtual void BoundingVolume::output(std::ostream &out) const = 0;

1332 5 write 0 6 1614 21 BoundingVolume::write 0 1 528 10
/**
 *
 */
82
virtual void BoundingVolume::write(std::ostream &out, int indent_level = 0) const;

1333 14 get_class_type 0 4 1614 30 BoundingVolume::get_class_type 0 1 529 0
55
static TypeHandle BoundingVolume::get_class_type(void);

1334 15 ~BoundingVolume 0 4 1614 31 BoundingVolume::~BoundingVolume 0 0 0
38
BoundingVolume::~BoundingVolume(void);

1335 9 extend_by 0 4 1618 34 GeometricBoundingVolume::extend_by 0 2 530 531 145
/**
 * Increases the size of the volume to include the given volume.
 */

/**
 * Increases the size of the volume to include the given point.
 */
153
inline bool GeometricBoundingVolume::extend_by(GeometricBoundingVolume const *vol);
inline bool GeometricBoundingVolume::extend_by(LPoint3 const &point);

1336 8 contains 0 4 1618 33 GeometricBoundingVolume::contains 0 3 532 533 534 393
/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */

/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated point.
 */

/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated line segment.
 */
249
inline int GeometricBoundingVolume::contains(GeometricBoundingVolume const *vol) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &point) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &a, LPoint3 const &b) const;

1337 17 get_approx_center 0 6 1618 42 GeometricBoundingVolume::get_approx_center 0 1 535 0
75
virtual LPoint3 GeometricBoundingVolume::get_approx_center(void) const = 0;

1338 5 xform 0 6 1618 30 GeometricBoundingVolume::xform 0 1 536 0
69
virtual void GeometricBoundingVolume::xform(LMatrix4 const &mat) = 0;

1339 14 get_class_type 0 4 1618 39 GeometricBoundingVolume::get_class_type 0 1 537 0
64
static TypeHandle GeometricBoundingVolume::get_class_type(void);

1340 24 ~GeometricBoundingVolume 0 4 1618 49 GeometricBoundingVolume::~GeometricBoundingVolume 0 0 0
56
GeometricBoundingVolume::~GeometricBoundingVolume(void);

1341 7 get_min 0 6 1619 29 FiniteBoundingVolume::get_min 0 1 538 0
62
virtual LPoint3 FiniteBoundingVolume::get_min(void) const = 0;

1342 7 get_max 0 6 1619 29 FiniteBoundingVolume::get_max 0 1 539 0
62
virtual LPoint3 FiniteBoundingVolume::get_max(void) const = 0;

1343 10 get_volume 0 6 1619 32 FiniteBoundingVolume::get_volume 0 1 540 10
/**
 *
 */
65
virtual PN_stdfloat FiniteBoundingVolume::get_volume(void) const;

1344 14 get_class_type 0 4 1619 36 FiniteBoundingVolume::get_class_type 0 1 541 0
61
static TypeHandle FiniteBoundingVolume::get_class_type(void);

1345 21 ~FiniteBoundingVolume 0 4 1619 43 FiniteBoundingVolume::~FiniteBoundingVolume 0 0 0
50
FiniteBoundingVolume::~FiniteBoundingVolume(void);

1346 10 LParabolaf 0 4 1624 22 LParabolaf::LParabolaf 0 3 542 543 544 209
/**
 * Constructs a meaningless degenerate parabola.
 */

/**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */

/**
 *
 */
185
inline LParabolaf::LParabolaf(void);
inline LParabolaf::LParabolaf(LVecBase3f const &a, LVecBase3f const &b, LVecBase3f const &c);
inline LParabolaf::LParabolaf(LParabolaf const &copy);

1347 10 operator = 0 4 1624 22 LParabolaf::operator = 0 1 545 0
59
inline void LParabolaf::operator =(LParabolaf const &copy);

1348 11 ~LParabolaf 0 4 1624 23 LParabolaf::~LParabolaf 0 0 10
/**
 *
 */
37
inline LParabolaf::~LParabolaf(void);

1349 5 xform 0 4 1624 17 LParabolaf::xform 0 1 546 59
/**
 * Transforms the parabola by the indicated matrix.
 */
45
void LParabolaf::xform(LMatrix4f const &mat);

1350 5 get_a 0 4 1624 17 LParabolaf::get_a 0 1 547 94
/**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */
55
inline LVecBase3f const &LParabolaf::get_a(void) const;

1351 5 get_b 0 4 1624 17 LParabolaf::get_b 0 1 548 99
/**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */
55
inline LVecBase3f const &LParabolaf::get_b(void) const;

1352 5 get_c 0 4 1624 17 LParabolaf::get_c 0 1 549 93
/**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */
55
inline LVecBase3f const &LParabolaf::get_c(void) const;

1353 10 calc_point 0 4 1624 22 LParabolaf::calc_point 0 1 550 56
/**
 * Computes the point on the parabola at time t.
 */
54
inline LPoint3f LParabolaf::calc_point(float t) const;

1354 6 output 0 4 1624 18 LParabolaf::output 0 1 551 10
/**
 *
 */
49
void LParabolaf::output(std::ostream &out) const;

1355 5 write 0 4 1624 17 LParabolaf::write 0 1 552 10
/**
 *
 */
70
void LParabolaf::write(std::ostream &out, int indent_level = 0) const;

1356 20 write_datagram_fixed 0 4 1624 32 LParabolaf::write_datagram_fixed 0 1 553 336
/**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */
67
void LParabolaf::write_datagram_fixed(Datagram &destination) const;

1357 19 read_datagram_fixed 0 4 1624 31 LParabolaf::read_datagram_fixed 0 1 554 116
/**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */
63
void LParabolaf::read_datagram_fixed(DatagramIterator &source);

1358 14 write_datagram 0 4 1624 26 LParabolaf::write_datagram 0 1 555 207
/**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */
61
void LParabolaf::write_datagram(Datagram &destination) const;

1359 13 read_datagram 0 4 1624 25 LParabolaf::read_datagram 0 1 556 69
/**
 * Reads the parabola from the Datagram using get_stdfloat().
 */
57
void LParabolaf::read_datagram(DatagramIterator &source);

1360 10 LParabolad 0 4 1625 22 LParabolad::LParabolad 0 3 557 558 559 209
/**
 * Constructs a meaningless degenerate parabola.
 */

/**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */

/**
 *
 */
185
inline LParabolad::LParabolad(void);
inline LParabolad::LParabolad(LVecBase3d const &a, LVecBase3d const &b, LVecBase3d const &c);
inline LParabolad::LParabolad(LParabolad const &copy);

1361 10 operator = 0 4 1625 22 LParabolad::operator = 0 1 560 0
59
inline void LParabolad::operator =(LParabolad const &copy);

1362 11 ~LParabolad 0 4 1625 23 LParabolad::~LParabolad 0 0 10
/**
 *
 */
37
inline LParabolad::~LParabolad(void);

1363 5 xform 0 4 1625 17 LParabolad::xform 0 1 561 59
/**
 * Transforms the parabola by the indicated matrix.
 */
45
void LParabolad::xform(LMatrix4d const &mat);

1364 5 get_a 0 4 1625 17 LParabolad::get_a 0 1 562 94
/**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */
55
inline LVecBase3d const &LParabolad::get_a(void) const;

1365 5 get_b 0 4 1625 17 LParabolad::get_b 0 1 563 99
/**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */
55
inline LVecBase3d const &LParabolad::get_b(void) const;

1366 5 get_c 0 4 1625 17 LParabolad::get_c 0 1 564 93
/**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */
55
inline LVecBase3d const &LParabolad::get_c(void) const;

1367 10 calc_point 0 4 1625 22 LParabolad::calc_point 0 1 565 56
/**
 * Computes the point on the parabola at time t.
 */
55
inline LPoint3d LParabolad::calc_point(double t) const;

1368 6 output 0 4 1625 18 LParabolad::output 0 1 566 10
/**
 *
 */
49
void LParabolad::output(std::ostream &out) const;

1369 5 write 0 4 1625 17 LParabolad::write 0 1 567 10
/**
 *
 */
70
void LParabolad::write(std::ostream &out, int indent_level = 0) const;

1370 20 write_datagram_fixed 0 4 1625 32 LParabolad::write_datagram_fixed 0 1 568 336
/**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */
67
void LParabolad::write_datagram_fixed(Datagram &destination) const;

1371 19 read_datagram_fixed 0 4 1625 31 LParabolad::read_datagram_fixed 0 1 569 116
/**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */
63
void LParabolad::read_datagram_fixed(DatagramIterator &source);

1372 14 write_datagram 0 4 1625 26 LParabolad::write_datagram 0 1 570 207
/**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */
61
void LParabolad::write_datagram(Datagram &destination) const;

1373 13 read_datagram 0 4 1625 25 LParabolad::read_datagram 0 1 571 69
/**
 * Reads the parabola from the Datagram using get_stdfloat().
 */
57
void LParabolad::read_datagram(DatagramIterator &source);

1374 7 LPlanef 0 4 1627 16 LPlanef::LPlanef 0 6 572 573 574 575 576 577 518
/**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */

/**
 *
 */

/**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */

/**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */

/**
 * Constructs a plane given the four terms of the plane equation.
 */
347
inline LPlanef::LPlanef(void);
inline LPlanef::LPlanef(LVecBase4f const &copy);
inline LPlanef::LPlanef(LPoint3f const &a, LPoint3f const &b, LPoint3f const &c);
inline LPlanef::LPlanef(LVector3f const &normal, LPoint3f const &point);
inline LPlanef::LPlanef(float a, float b, float c, float d);
inline LPlanef::LPlanef(LPlanef const &) = default;

1375 10 operator * 0 4 1627 19 LPlanef::operator * 0 2 578 579 0
127
inline LPlanef LPlanef::operator *(LMatrix3f const &mat) const;
inline LPlanef LPlanef::operator *(LMatrix4f const &mat) const;

1376 11 operator *= 0 4 1627 20 LPlanef::operator *= 0 1 580 0
55
inline void LPlanef::operator *=(LMatrix4f const &mat);

1377 5 xform 0 4 1627 14 LPlanef::xform 0 1 581 56
/**
 * Transforms the plane by the indicated matrix.
 */
49
inline void LPlanef::xform(LMatrix4f const &mat);

1378 10 operator - 0 68 1627 19 LPlanef::operator - 0 1 582 0
47
inline LPlanef LPlanef::operator -(void) const;

1379 18 get_reflection_mat 0 4 1627 27 LPlanef::get_reflection_mat 0 1 583 121
/**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */
50
LMatrix4f LPlanef::get_reflection_mat(void) const;

1380 10 get_normal 0 4 1627 19 LPlanef::get_normal 0 1 584 51
/**
 * Returns the surface normal of the plane.
 */
49
inline LVector3f LPlanef::get_normal(void) const;

1381 9 get_point 0 4 1627 18 LPlanef::get_point 0 1 585 145
/**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */
40
LPoint3f LPlanef::get_point(void) const;

1382 13 dist_to_plane 0 4 1627 22 LPlanef::dist_to_plane 0 1 586 328
/**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */
65
inline float LPlanef::dist_to_plane(LPoint3f const &point) const;

1383 9 normalize 0 4 1627 18 LPlanef::normalize 0 1 587 139
/**
 * Normalizes the plane in place.  Returns true if the plane was normalized,
 * false if the plane had a zero-length normal vector.
 */
37
inline bool LPlanef::normalize(void);

1384 10 normalized 0 4 1627 19 LPlanef::normalized 0 1 588 155
/**
 * Normalizes the plane and returns the normalized plane as a copy.  If the
 * plane's normal was a zero-length vector, the same plane is returned.
 */
47
inline LPlanef LPlanef::normalized(void) const;

1385 7 project 0 4 1627 16 LPlanef::project 0 1 589 86
/**
 * Returns the point within the plane nearest to the indicated point in space.
 */
62
inline LPoint3f LPlanef::project(LPoint3f const &point) const;

1386 4 flip 0 4 1627 13 LPlanef::flip 0 1 590 115
/**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */
32
inline void LPlanef::flip(void);

1387 15 intersects_line 0 4 1627 24 LPlanef::intersects_line 0 1 591 968
/**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */

/**
 * This flavor of intersects_line() returns a bit more information about the
 * nature of the intersecting point.  The line is defined via the parametric
 * equation from + t * delta for all real values of t.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t undefined.  If there is an intersection with the plane, the
 * function returns true and sets t to the parametric value that defines the
 * point of intersection.  That is, t == 0.0f implies that the intersection
 * occurred exactly at point from, and t == 1.0f implies at point from +
 * delta, with other values of t accordingly.
 */
213
inline bool LPlanef::intersects_line(LPoint3f &intersection_point, LPoint3f const &p1, LPoint3f const &p2) const;
inline bool LPlanef::intersects_line(float &t, LPoint3f const &from, LVector3f const &delta) const;

1388 16 intersects_plane 0 4 1627 25 LPlanef::intersects_plane 0 1 592 300
/**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */
93
bool LPlanef::intersects_plane(LPoint3f &from, LVector3f &delta, LPlanef const &other) const;

1389 19 intersects_parabola 0 4 1627 28 LPlanef::intersects_parabola 0 0 437
/**
 * Determines whether and where the indicated parabola intersects with the
 * plane.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t1 and t2 undefined.  If there is an intersection with the plane,
 * the function returns true and sets t1 and t2 to the parametric value that
 * defines the two points of intersection.  If the parabola is exactly tangent
 * to the plane, then t1 == t2.
 */
90
bool LPlanef::intersects_parabola(float &t1, float &t2, LParabolaf const &parabola) const;

1390 6 output 0 4 1627 15 LPlanef::output 0 1 593 10
/**
 *
 */
46
void LPlanef::output(std::ostream &out) const;

1391 5 write 0 4 1627 14 LPlanef::write 0 1 594 10
/**
 *
 */
67
void LPlanef::write(std::ostream &out, int indent_level = 0) const;

1392 8 ~LPlanef 0 4 1627 17 LPlanef::~LPlanef 0 0 0
24
LPlanef::~LPlanef(void);

1393 7 LPlaned 0 4 1629 16 LPlaned::LPlaned 0 6 595 596 597 598 599 600 518
/**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */

/**
 *
 */

/**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */

/**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */

/**
 * Constructs a plane given the four terms of the plane equation.
 */
351
inline LPlaned::LPlaned(void);
inline LPlaned::LPlaned(LVecBase4d const &copy);
inline LPlaned::LPlaned(LPoint3d const &a, LPoint3d const &b, LPoint3d const &c);
inline LPlaned::LPlaned(LVector3d const &normal, LPoint3d const &point);
inline LPlaned::LPlaned(double a, double b, double c, double d);
inline LPlaned::LPlaned(LPlaned const &) = default;

1394 10 operator * 0 4 1629 19 LPlaned::operator * 0 2 601 602 0
127
inline LPlaned LPlaned::operator *(LMatrix3d const &mat) const;
inline LPlaned LPlaned::operator *(LMatrix4d const &mat) const;

1395 11 operator *= 0 4 1629 20 LPlaned::operator *= 0 1 603 0
55
inline void LPlaned::operator *=(LMatrix4d const &mat);

1396 5 xform 0 4 1629 14 LPlaned::xform 0 1 604 56
/**
 * Transforms the plane by the indicated matrix.
 */
49
inline void LPlaned::xform(LMatrix4d const &mat);

1397 10 operator - 0 68 1629 19 LPlaned::operator - 0 1 605 0
47
inline LPlaned LPlaned::operator -(void) const;

1398 18 get_reflection_mat 0 4 1629 27 LPlaned::get_reflection_mat 0 1 606 121
/**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */
50
LMatrix4d LPlaned::get_reflection_mat(void) const;

1399 10 get_normal 0 4 1629 19 LPlaned::get_normal 0 1 607 51
/**
 * Returns the surface normal of the plane.
 */
49
inline LVector3d LPlaned::get_normal(void) const;

1400 9 get_point 0 4 1629 18 LPlaned::get_point 0 1 608 145
/**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */
40
LPoint3d LPlaned::get_point(void) const;

1401 13 dist_to_plane 0 4 1629 22 LPlaned::dist_to_plane 0 1 609 328
/**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */
66
inline double LPlaned::dist_to_plane(LPoint3d const &point) const;

1402 9 normalize 0 4 1629 18 LPlaned::normalize 0 1 610 139
/**
 * Normalizes the plane in place.  Returns true if the plane was normalized,
 * false if the plane had a zero-length normal vector.
 */
37
inline bool LPlaned::normalize(void);

1403 10 normalized 0 4 1629 19 LPlaned::normalized 0 1 611 155
/**
 * Normalizes the plane and returns the normalized plane as a copy.  If the
 * plane's normal was a zero-length vector, the same plane is returned.
 */
47
inline LPlaned LPlaned::normalized(void) const;

1404 7 project 0 4 1629 16 LPlaned::project 0 1 612 86
/**
 * Returns the point within the plane nearest to the indicated point in space.
 */
62
inline LPoint3d LPlaned::project(LPoint3d const &point) const;

1405 4 flip 0 4 1629 13 LPlaned::flip 0 1 613 115
/**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */
32
inline void LPlaned::flip(void);

1406 15 intersects_line 0 4 1629 24 LPlaned::intersects_line 0 1 614 968
/**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */

/**
 * This flavor of intersects_line() returns a bit more information about the
 * nature of the intersecting point.  The line is defined via the parametric
 * equation from + t * delta for all real values of t.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t undefined.  If there is an intersection with the plane, the
 * function returns true and sets t to the parametric value that defines the
 * point of intersection.  That is, t == 0.0f implies that the intersection
 * occurred exactly at point from, and t == 1.0f implies at point from +
 * delta, with other values of t accordingly.
 */
214
inline bool LPlaned::intersects_line(LPoint3d &intersection_point, LPoint3d const &p1, LPoint3d const &p2) const;
inline bool LPlaned::intersects_line(double &t, LPoint3d const &from, LVector3d const &delta) const;

1407 16 intersects_plane 0 4 1629 25 LPlaned::intersects_plane 0 1 615 300
/**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */
93
bool LPlaned::intersects_plane(LPoint3d &from, LVector3d &delta, LPlaned const &other) const;

1408 19 intersects_parabola 0 4 1629 28 LPlaned::intersects_parabola 0 0 437
/**
 * Determines whether and where the indicated parabola intersects with the
 * plane.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t1 and t2 undefined.  If there is an intersection with the plane,
 * the function returns true and sets t1 and t2 to the parametric value that
 * defines the two points of intersection.  If the parabola is exactly tangent
 * to the plane, then t1 == t2.
 */
92
bool LPlaned::intersects_parabola(double &t1, double &t2, LParabolad const &parabola) const;

1409 6 output 0 4 1629 15 LPlaned::output 0 1 616 10
/**
 *
 */
46
void LPlaned::output(std::ostream &out) const;

1410 5 write 0 4 1629 14 LPlaned::write 0 1 617 10
/**
 *
 */
67
void LPlaned::write(std::ostream &out, int indent_level = 0) const;

1411 8 ~LPlaned 0 4 1629 17 LPlaned::~LPlaned 0 0 0
24
LPlaned::~LPlaned(void);

1412 11 BoundingBox 0 4 1635 24 BoundingBox::BoundingBox 0 2 618 619 88
/**
 * Constructs an empty box object.
 */

/**
 * Constructs a specific box object.
 */
120
inline BoundingBox::BoundingBox(void);
inline explicit BoundingBox::BoundingBox(LPoint3 const &min, LPoint3 const &max);

1413 12 operator new 0 4 1635 25 BoundingBox::operator new 0 1 620 0
126
inline void *BoundingBox::operator new(std::size_t size);
inline void *BoundingBox::operator new(std::size_t size, void *ptr);

1414 15 operator delete 0 4 1635 28 BoundingBox::operator delete 0 0 0
110
inline void BoundingBox::operator delete(void *ptr);
inline void BoundingBox::operator delete(void *, void *);

1415 12 validate_ptr 0 4 1635 25 BoundingBox::validate_ptr 0 0 0
62
static inline bool BoundingBox::validate_ptr(void const *ptr);

1416 14 get_num_points 0 4 1635 27 BoundingBox::get_num_points 0 1 621 68
/**
 * Returns 8: the number of vertices of a rectangular solid.
 */
51
inline int BoundingBox::get_num_points(void) const;

1417 9 get_point 0 4 1635 22 BoundingBox::get_point 0 1 622 59
/**
 * Returns the nth vertex of the rectangular solid.
 */
51
inline LPoint3 BoundingBox::get_point(int n) const;

1418 14 get_num_planes 0 4 1635 27 BoundingBox::get_num_planes 0 1 623 65
/**
 * Returns 6: the number of faces of a rectangular solid.
 */
51
inline int BoundingBox::get_num_planes(void) const;

1419 9 get_plane 0 4 1635 22 BoundingBox::get_plane 0 1 624 57
/**
 * Returns the nth face of the rectangular solid.
 */
50
inline LPlane BoundingBox::get_plane(int n) const;

1420 11 set_min_max 0 4 1635 24 BoundingBox::set_min_max 0 1 625 63
/**
 * Sets the min and max point of the rectangular solid.
 */
77
inline void BoundingBox::set_min_max(LPoint3 const &min, LPoint3 const &max);

1421 14 get_class_type 0 4 1635 27 BoundingBox::get_class_type 0 1 626 0
52
static TypeHandle BoundingBox::get_class_type(void);

1422 12 ~BoundingBox 0 4 1635 25 BoundingBox::~BoundingBox 0 0 0
32
BoundingBox::~BoundingBox(void);

1423 9 LFrustumf 0 4 1636 20 LFrustumf::LFrustumf 0 2 627 628 10
/**
 *
 */
92
inline LFrustumf::LFrustumf(void);
inline LFrustumf::LFrustumf(LFrustumf const &) = default;

1424 13 make_ortho_2D 0 4 1636 24 LFrustumf::make_ortho_2D 0 2 629 630 116
/**
 * Sets up a two-dimensional orthographic frustum
 */

/**
 * Sets up a two-dimensional orthographic frustum
 */
117
inline void LFrustumf::make_ortho_2D(void);
inline void LFrustumf::make_ortho_2D(float l, float r, float t, float b);

1425 10 make_ortho 0 4 1636 21 LFrustumf::make_ortho 0 2 631 632 66
/**
 * Behaves like gluOrtho
 */

/**
 * Behaves like gluOrtho
 */
155
inline void LFrustumf::make_ortho(float fnear, float ffar);
inline void LFrustumf::make_ortho(float fnear, float ffar, float l, float r, float t, float b);

1426 21 make_perspective_hfov 0 4 1636 32 LFrustumf::make_perspective_hfov 0 1 633 238
/**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */
96
inline void LFrustumf::make_perspective_hfov(float xfov, float aspect, float fnear, float ffar);

1427 21 make_perspective_vfov 0 4 1636 32 LFrustumf::make_perspective_vfov 0 1 634 0
96
inline void LFrustumf::make_perspective_vfov(float yfov, float aspect, float fnear, float ffar);

1428 16 make_perspective 0 4 1636 27 LFrustumf::make_perspective 0 1 635 0
89
inline void LFrustumf::make_perspective(float xfov, float yfov, float fnear, float ffar);

1429 22 get_perspective_params 0 4 1636 33 LFrustumf::get_perspective_params 0 0 22
/**
 *
 */

/**
 *
 */
228
inline void LFrustumf::get_perspective_params(float &yfov, float &aspect, float &fnear, float &ffar) const;
inline void LFrustumf::get_perspective_params(float &xfov, float &yfov, float &aspect, float &fnear, float &ffar) const;

1430 10 ~LFrustumf 0 4 1636 21 LFrustumf::~LFrustumf 0 0 0
28
LFrustumf::~LFrustumf(void);

1431 9 LFrustumd 0 4 1637 20 LFrustumd::LFrustumd 0 2 636 637 10
/**
 *
 */
92
inline LFrustumd::LFrustumd(void);
inline LFrustumd::LFrustumd(LFrustumd const &) = default;

1432 13 make_ortho_2D 0 4 1637 24 LFrustumd::make_ortho_2D 0 2 638 639 116
/**
 * Sets up a two-dimensional orthographic frustum
 */

/**
 * Sets up a two-dimensional orthographic frustum
 */
121
inline void LFrustumd::make_ortho_2D(void);
inline void LFrustumd::make_ortho_2D(double l, double r, double t, double b);

1433 10 make_ortho 0 4 1637 21 LFrustumd::make_ortho 0 2 640 641 66
/**
 * Behaves like gluOrtho
 */

/**
 * Behaves like gluOrtho
 */
163
inline void LFrustumd::make_ortho(double fnear, double ffar);
inline void LFrustumd::make_ortho(double fnear, double ffar, double l, double r, double t, double b);

1434 21 make_perspective_hfov 0 4 1637 32 LFrustumd::make_perspective_hfov 0 1 642 238
/**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */
100
inline void LFrustumd::make_perspective_hfov(double xfov, double aspect, double fnear, double ffar);

1435 21 make_perspective_vfov 0 4 1637 32 LFrustumd::make_perspective_vfov 0 1 643 0
100
inline void LFrustumd::make_perspective_vfov(double yfov, double aspect, double fnear, double ffar);

1436 16 make_perspective 0 4 1637 27 LFrustumd::make_perspective 0 1 644 0
93
inline void LFrustumd::make_perspective(double xfov, double yfov, double fnear, double ffar);

1437 22 get_perspective_params 0 4 1637 33 LFrustumd::get_perspective_params 0 0 22
/**
 *
 */

/**
 *
 */
237
inline void LFrustumd::get_perspective_params(double &yfov, double &aspect, double &fnear, double &ffar) const;
inline void LFrustumd::get_perspective_params(double &xfov, double &yfov, double &aspect, double &fnear, double &ffar) const;

1438 10 ~LFrustumd 0 4 1637 21 LFrustumd::~LFrustumd 0 0 0
28
LFrustumd::~LFrustumd(void);

1439 18 BoundingHexahedron 0 4 1642 38 BoundingHexahedron::BoundingHexahedron 0 2 645 646 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
315
BoundingHexahedron::BoundingHexahedron(LFrustum const &frustum, bool is_ortho, CoordinateSystem cs = ::CS_default);
BoundingHexahedron::BoundingHexahedron(LPoint3 const &fll, LPoint3 const &flr, LPoint3 const &fur, LPoint3 const &ful, LPoint3 const &nll, LPoint3 const &nlr, LPoint3 const &nur, LPoint3 const &nul);

1440 14 get_num_points 0 4 1642 34 BoundingHexahedron::get_num_points 0 1 647 61
/**
 * Returns 8: the number of vertices of a hexahedron.
 */
58
inline int BoundingHexahedron::get_num_points(void) const;

1441 9 get_point 0 4 1642 29 BoundingHexahedron::get_point 0 1 648 52
/**
 * Returns the nth vertex of the hexahedron.
 */
58
inline LPoint3 BoundingHexahedron::get_point(int n) const;

1442 14 get_num_planes 0 4 1642 34 BoundingHexahedron::get_num_planes 0 1 649 58
/**
 * Returns 6: the number of faces of a hexahedron.
 */
58
inline int BoundingHexahedron::get_num_planes(void) const;

1443 9 get_plane 0 4 1642 29 BoundingHexahedron::get_plane 0 1 650 50
/**
 * Returns the nth face of the hexahedron.
 */
57
inline LPlane BoundingHexahedron::get_plane(int n) const;

1444 14 get_class_type 0 4 1642 34 BoundingHexahedron::get_class_type 0 1 651 0
59
static TypeHandle BoundingHexahedron::get_class_type(void);

1445 19 ~BoundingHexahedron 0 4 1642 39 BoundingHexahedron::~BoundingHexahedron 0 0 0
46
BoundingHexahedron::~BoundingHexahedron(void);

1446 12 BoundingLine 0 4 1643 26 BoundingLine::BoundingLine 0 1 652 22
/**
 *
 */

/**
 *
 */
79
inline explicit BoundingLine::BoundingLine(LPoint3 const &a, LPoint3 const &b);

1447 12 operator new 0 4 1643 26 BoundingLine::operator new 0 1 653 0
128
inline void *BoundingLine::operator new(std::size_t size);
inline void *BoundingLine::operator new(std::size_t size, void *ptr);

1448 15 operator delete 0 4 1643 29 BoundingLine::operator delete 0 0 0
112
inline void BoundingLine::operator delete(void *ptr);
inline void BoundingLine::operator delete(void *, void *);

1449 12 validate_ptr 0 4 1643 26 BoundingLine::validate_ptr 0 0 0
63
static inline bool BoundingLine::validate_ptr(void const *ptr);

1450 11 get_point_a 0 4 1643 25 BoundingLine::get_point_a 0 1 654 57
/**
 * Returns the first point that defines the line.
 */
60
inline LPoint3 const &BoundingLine::get_point_a(void) const;

1451 11 get_point_b 0 4 1643 25 BoundingLine::get_point_b 0 1 655 58
/**
 * Returns the second point that defines the line.
 */
53
inline LPoint3 BoundingLine::get_point_b(void) const;

1452 14 get_class_type 0 4 1643 28 BoundingLine::get_class_type 0 1 656 0
53
static TypeHandle BoundingLine::get_class_type(void);

1453 13 ~BoundingLine 0 4 1643 27 BoundingLine::~BoundingLine 0 0 0
34
BoundingLine::~BoundingLine(void);

1454 13 BoundingPlane 0 4 1644 28 BoundingPlane::BoundingPlane 0 2 657 658 77
/**
 * Constructs an empty "plane" that has no intersections.
 */

/**
 *
 */
100
inline BoundingPlane::BoundingPlane(void);
inline BoundingPlane::BoundingPlane(LPlane const &plane);

1455 12 operator new 0 4 1644 27 BoundingPlane::operator new 0 1 659 0
130
inline void *BoundingPlane::operator new(std::size_t size);
inline void *BoundingPlane::operator new(std::size_t size, void *ptr);

1456 15 operator delete 0 4 1644 30 BoundingPlane::operator delete 0 0 0
114
inline void BoundingPlane::operator delete(void *ptr);
inline void BoundingPlane::operator delete(void *, void *);

1457 12 validate_ptr 0 4 1644 27 BoundingPlane::validate_ptr 0 0 0
64
static inline bool BoundingPlane::validate_ptr(void const *ptr);

1458 9 get_plane 0 4 1644 24 BoundingPlane::get_plane 0 1 660 10
/**
 *
 */
58
inline LPlane const &BoundingPlane::get_plane(void) const;

1459 14 get_class_type 0 4 1644 29 BoundingPlane::get_class_type 0 1 661 0
54
static TypeHandle BoundingPlane::get_class_type(void);

1460 14 ~BoundingPlane 0 4 1644 29 BoundingPlane::~BoundingPlane 0 0 0
36
BoundingPlane::~BoundingPlane(void);

1461 14 BoundingSphere 0 4 1646 30 BoundingSphere::BoundingSphere 0 2 662 663 80
/**
 * Constructs an empty sphere.
 */

/**
 * Constructs a specific sphere.
 */
135
inline BoundingSphere::BoundingSphere(void);
inline explicit BoundingSphere::BoundingSphere(LPoint3 const &center, PN_stdfloat radius);

1462 12 operator new 0 4 1646 28 BoundingSphere::operator new 0 1 664 0
132
inline void *BoundingSphere::operator new(std::size_t size);
inline void *BoundingSphere::operator new(std::size_t size, void *ptr);

1463 15 operator delete 0 4 1646 31 BoundingSphere::operator delete 0 0 0
116
inline void BoundingSphere::operator delete(void *ptr);
inline void BoundingSphere::operator delete(void *, void *);

1464 12 validate_ptr 0 4 1646 28 BoundingSphere::validate_ptr 0 0 0
65
static inline bool BoundingSphere::validate_ptr(void const *ptr);

1465 10 get_center 0 4 1646 26 BoundingSphere::get_center 0 1 665 10
/**
 *
 */
54
inline LPoint3 BoundingSphere::get_center(void) const;

1466 10 get_radius 0 4 1646 26 BoundingSphere::get_radius 0 1 666 10
/**
 *
 */
58
inline PN_stdfloat BoundingSphere::get_radius(void) const;

1467 10 set_center 0 4 1646 26 BoundingSphere::set_center 0 1 667 47
/**
 * Sets the center point of the sphere.
 */
62
inline void BoundingSphere::set_center(LPoint3 const &center);

1468 10 set_radius 0 4 1646 26 BoundingSphere::set_radius 0 1 668 41
/**
 * Sets the radius of the sphere.
 */
59
inline void BoundingSphere::set_radius(PN_stdfloat radius);

1469 14 get_class_type 0 4 1646 30 BoundingSphere::get_class_type 0 1 669 0
55
static TypeHandle BoundingSphere::get_class_type(void);

1470 15 ~BoundingSphere 0 4 1646 31 BoundingSphere::~BoundingSphere 0 0 0
38
BoundingSphere::~BoundingSphere(void);

1471 26 IntersectionBoundingVolume 0 4 1647 54 IntersectionBoundingVolume::IntersectionBoundingVolume 0 1 670 56
/**
 * Constructs an empty intersection.
 */

/**
 *
 */
68
inline IntersectionBoundingVolume::IntersectionBoundingVolume(void);

1472 12 operator new 0 4 1647 40 IntersectionBoundingVolume::operator new 0 1 671 0
156
inline void *IntersectionBoundingVolume::operator new(std::size_t size);
inline void *IntersectionBoundingVolume::operator new(std::size_t size, void *ptr);

1473 15 operator delete 0 4 1647 43 IntersectionBoundingVolume::operator delete 0 0 0
140
inline void IntersectionBoundingVolume::operator delete(void *ptr);
inline void IntersectionBoundingVolume::operator delete(void *, void *);

1474 12 validate_ptr 0 4 1647 40 IntersectionBoundingVolume::validate_ptr 0 0 0
77
static inline bool IntersectionBoundingVolume::validate_ptr(void const *ptr);

1475 18 get_num_components 0 4 1647 46 IntersectionBoundingVolume::get_num_components 0 1 672 64
/**
 * Returns the number of components in the intersection.
 */
70
inline int IntersectionBoundingVolume::get_num_components(void) const;

1476 13 get_component 0 4 1647 41 IntersectionBoundingVolume::get_component 0 1 673 57
/**
 * Returns the nth component in the intersection.
 */
93
inline GeometricBoundingVolume const *IntersectionBoundingVolume::get_component(int n) const;

1477 16 clear_components 0 4 1647 44 IntersectionBoundingVolume::clear_components 0 1 674 50
/**
 * Removes all components from the volume.
 */
56
void IntersectionBoundingVolume::clear_components(void);

1478 13 add_component 0 4 1647 41 IntersectionBoundingVolume::add_component 0 1 675 373
/**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */
89
void IntersectionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1479 14 get_class_type 0 4 1647 42 IntersectionBoundingVolume::get_class_type 0 1 676 0
67
static TypeHandle IntersectionBoundingVolume::get_class_type(void);

1480 27 ~IntersectionBoundingVolume 0 4 1647 55 IntersectionBoundingVolume::~IntersectionBoundingVolume 0 0 0
62
IntersectionBoundingVolume::~IntersectionBoundingVolume(void);

1481 8 heads_up 0 1 0 8 heads_up 0 12 777 778 779 780 781 782 783 784 785 786 787 788 0
1297
void heads_up(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void heads_up(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1482 7 look_at 0 1 0 7 look_at 0 12 789 790 791 792 793 794 795 796 797 798 799 800 0
1285
void look_at(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void look_at(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1483 8 Mersenne 0 4 1650 18 Mersenne::Mersenne 0 2 677 678 35
/* initializes mt[N] with a seed */
107
explicit Mersenne::Mersenne(unsigned long int seed);
inline Mersenne::Mersenne(Mersenne const &) = default;

1484 10 get_uint31 0 4 1650 20 Mersenne::get_uint31 0 1 679 58
/* generates a random number on [0,0x7fffffff]-interval */
45
unsigned long int Mersenne::get_uint31(void);

1485 9 ~Mersenne 0 4 1650 19 Mersenne::~Mersenne 0 0 0
26
Mersenne::~Mersenne(void);

1486 18 OmniBoundingVolume 0 4 1652 38 OmniBoundingVolume::OmniBoundingVolume 0 1 680 10
/**
 *
 */
52
inline OmniBoundingVolume::OmniBoundingVolume(void);

1487 14 get_class_type 0 4 1652 34 OmniBoundingVolume::get_class_type 0 1 681 0
59
static TypeHandle OmniBoundingVolume::get_class_type(void);

1488 19 ~OmniBoundingVolume 0 4 1652 39 OmniBoundingVolume::~OmniBoundingVolume 0 0 0
46
OmniBoundingVolume::~OmniBoundingVolume(void);

1489 19 UnionBoundingVolume 0 4 1653 40 UnionBoundingVolume::UnionBoundingVolume 0 1 682 49
/**
 * Constructs an empty union.
 */

/**
 *
 */
54
inline UnionBoundingVolume::UnionBoundingVolume(void);

1490 12 operator new 0 4 1653 33 UnionBoundingVolume::operator new 0 1 683 0
142
inline void *UnionBoundingVolume::operator new(std::size_t size);
inline void *UnionBoundingVolume::operator new(std::size_t size, void *ptr);

1491 15 operator delete 0 4 1653 36 UnionBoundingVolume::operator delete 0 0 0
126
inline void UnionBoundingVolume::operator delete(void *ptr);
inline void UnionBoundingVolume::operator delete(void *, void *);

1492 12 validate_ptr 0 4 1653 33 UnionBoundingVolume::validate_ptr 0 0 0
70
static inline bool UnionBoundingVolume::validate_ptr(void const *ptr);

1493 18 get_num_components 0 4 1653 39 UnionBoundingVolume::get_num_components 0 1 684 57
/**
 * Returns the number of components in the union.
 */
63
inline int UnionBoundingVolume::get_num_components(void) const;

1494 13 get_component 0 4 1653 34 UnionBoundingVolume::get_component 0 1 685 50
/**
 * Returns the nth component in the union.
 */
86
inline GeometricBoundingVolume const *UnionBoundingVolume::get_component(int n) const;

1495 16 clear_components 0 4 1653 37 UnionBoundingVolume::clear_components 0 1 686 50
/**
 * Removes all components from the volume.
 */
49
void UnionBoundingVolume::clear_components(void);

1496 13 add_component 0 4 1653 34 UnionBoundingVolume::add_component 0 1 687 373
/**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */
82
void UnionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1497 19 filter_intersection 0 4 1653 40 UnionBoundingVolume::filter_intersection 0 1 688 104
/**
 * Removes from the union any components that have no intersection with the
 * indicated volume.
 */
76
void UnionBoundingVolume::filter_intersection(BoundingVolume const *volume);

1498 14 get_class_type 0 4 1653 35 UnionBoundingVolume::get_class_type 0 1 689 0
60
static TypeHandle UnionBoundingVolume::get_class_type(void);

1499 20 ~UnionBoundingVolume 0 4 1653 41 UnionBoundingVolume::~UnionBoundingVolume 0 0 0
48
UnionBoundingVolume::~UnionBoundingVolume(void);

1500 10 Randomizer 0 4 1654 22 Randomizer::Randomizer 0 2 690 691 120
/**
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 *
 */
122
inline explicit Randomizer::Randomizer(unsigned long int seed = 0);
inline Randomizer::Randomizer(Randomizer const &copy);

1501 10 operator = 0 4 1654 22 Randomizer::operator = 0 1 692 0
59
inline void Randomizer::operator =(Randomizer const &copy);

1502 10 random_int 0 4 1654 22 Randomizer::random_int 0 1 693 60
/**
 * Returns a random integer in the range [0, range).
 */
45
inline int Randomizer::random_int(int range);

1503 11 random_real 0 4 1654 23 Randomizer::random_real 0 1 694 59
/**
 * Returns a random double in the range [0, range).
 */
52
inline double Randomizer::random_real(double range);

1504 16 random_real_unit 0 4 1654 28 Randomizer::random_real_unit 0 1 695 60
/**
 * Returns a random double in the range [-0.5, 0.5).
 */
49
inline double Randomizer::random_real_unit(void);

1505 13 get_next_seed 0 4 1654 25 Randomizer::get_next_seed 0 1 696 77
/**
 * Returns a random seed value for the next global Randomizer object.
 */
64
static inline unsigned long int Randomizer::get_next_seed(void);

1506 8 get_seed 0 4 1654 20 Randomizer::get_seed 0 1 697 126
/**
 * Returns a unique seed value based on the seed value passed to this
 * Randomizer object (and on its current state).
 */
52
inline unsigned long int Randomizer::get_seed(void);

1507 11 ~Randomizer 0 4 1654 23 Randomizer::~Randomizer 0 0 0
30
Randomizer::~Randomizer(void);

1508 8 get_seed 0 4 1655 21 PerlinNoise::get_seed 0 1 698 127
/**
 * Returns a unique seed value based on the seed value passed to this
 * PerlinNoise object (and on its current state).
 */
53
inline unsigned long int PerlinNoise::get_seed(void);

1509 12 ~PerlinNoise 0 4 1655 25 PerlinNoise::~PerlinNoise 0 0 0
32
PerlinNoise::~PerlinNoise(void);

1510 12 PerlinNoise2 0 4 1656 26 PerlinNoise2::PerlinNoise2 0 3 699 700 701 400
/**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */

/**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */
217
inline PerlinNoise2::PerlinNoise2(void);
inline explicit PerlinNoise2::PerlinNoise2(double sx, double sy, int table_size = 256, unsigned long int seed = 0);
inline PerlinNoise2::PerlinNoise2(PerlinNoise2 const &copy);

1511 10 operator = 0 4 1656 24 PerlinNoise2::operator = 0 1 702 0
63
inline void PerlinNoise2::operator =(PerlinNoise2 const &copy);

1512 9 set_scale 0 4 1656 23 PerlinNoise2::set_scale 0 4 703 704 705 706 222
/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */
233
inline void PerlinNoise2::set_scale(double scale);
inline void PerlinNoise2::set_scale(double sx, double sy);
inline void PerlinNoise2::set_scale(LVecBase2f const &scale);
inline void PerlinNoise2::set_scale(LVecBase2d const &scale);

1513 5 noise 0 4 1656 19 PerlinNoise2::noise 0 3 707 708 709 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
184
inline double PerlinNoise2::noise(double x, double y) const;
inline float PerlinNoise2::noise(LVecBase2f const &value) const;
double PerlinNoise2::noise(LVecBase2d const &value) const;

1514 11 operator () 0 4 1656 25 PerlinNoise2::operator () 0 3 710 711 712 0
209
inline double PerlinNoise2::operator ()(double x, double y) const;
inline float PerlinNoise2::operator ()(LVecBase2f const &value) const;
inline double PerlinNoise2::operator ()(LVecBase2d const &value) const;

1515 13 ~PerlinNoise2 0 4 1656 27 PerlinNoise2::~PerlinNoise2 0 0 0
34
PerlinNoise2::~PerlinNoise2(void);

1516 12 PerlinNoise3 0 4 1657 26 PerlinNoise3::PerlinNoise3 0 3 713 714 715 400
/**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */

/**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */
228
inline PerlinNoise3::PerlinNoise3(void);
inline explicit PerlinNoise3::PerlinNoise3(double sx, double sy, double sz, int table_size = 256, unsigned long int seed = 0);
inline PerlinNoise3::PerlinNoise3(PerlinNoise3 const &copy);

1517 10 operator = 0 4 1657 24 PerlinNoise3::operator = 0 1 716 0
63
inline void PerlinNoise3::operator =(PerlinNoise3 const &copy);

1518 9 set_scale 0 4 1657 23 PerlinNoise3::set_scale 0 4 717 718 719 720 222
/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */
244
inline void PerlinNoise3::set_scale(double scale);
inline void PerlinNoise3::set_scale(double sx, double sy, double sz);
inline void PerlinNoise3::set_scale(LVecBase3f const &scale);
inline void PerlinNoise3::set_scale(LVecBase3d const &scale);

1519 5 noise 0 4 1657 19 PerlinNoise3::noise 0 3 721 722 723 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
194
inline double PerlinNoise3::noise(double x, double y, double z) const;
inline float PerlinNoise3::noise(LVecBase3f const &value) const;
double PerlinNoise3::noise(LVecBase3d const &value) const;

1520 11 operator () 0 4 1657 25 PerlinNoise3::operator () 0 3 724 725 726 0
219
inline double PerlinNoise3::operator ()(double x, double y, double z) const;
inline float PerlinNoise3::operator ()(LVecBase3f const &value) const;
inline double PerlinNoise3::operator ()(LVecBase3d const &value) const;

1521 13 ~PerlinNoise3 0 4 1657 27 PerlinNoise3::~PerlinNoise3 0 0 0
34
PerlinNoise3::~PerlinNoise3(void);

1522 9 rotate_to 0 1 0 9 rotate_to 0 4 801 802 803 804 0
287
void rotate_to(LMatrix3f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix3d &mat, LVector3d const &a, LVector3d const &b);
void rotate_to(LMatrix4f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix4d &mat, LVector3d const &a, LVector3d const &b);

1523 19 StackedPerlinNoise2 0 4 1714 40 StackedPerlinNoise2::StackedPerlinNoise2 0 3 727 728 729 555
/**
 * Creates a StackedPerlinNoise2 object with no levels.  You should call
 * add_level() to add each level by hand.
 */

/**
 * Creates num_levels nested PerlinNoise2 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */

/**
 * Creates an exact duplicate of the existing StackedPerlinNoise2 object,
 * including the random seed.
 */
323
inline StackedPerlinNoise2::StackedPerlinNoise2(void);
explicit StackedPerlinNoise2::StackedPerlinNoise2(double sx, double sy, int num_levels = 2, double scale_factor = 4.0, double amp_scale = 0.5, int table_size = 256, unsigned long int seed = 0);
StackedPerlinNoise2::StackedPerlinNoise2(StackedPerlinNoise2 const &copy);

1524 10 operator = 0 4 1714 31 StackedPerlinNoise2::operator = 0 1 730 0
70
void StackedPerlinNoise2::operator =(StackedPerlinNoise2 const &copy);

1525 9 add_level 0 4 1714 30 StackedPerlinNoise2::add_level 0 1 731 95
/**
 * Adds an arbitrary PerlinNoise2 object, and an associated amplitude, to the
 * stack.
 */
81
void StackedPerlinNoise2::add_level(PerlinNoise2 const &level, double amp = 1.0);

1526 5 clear 0 4 1714 26 StackedPerlinNoise2::clear 0 1 732 98
/**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */
38
void StackedPerlinNoise2::clear(void);

1527 5 noise 0 4 1714 26 StackedPerlinNoise2::noise 0 3 733 734 735 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
187
inline double StackedPerlinNoise2::noise(double x, double y);
inline float StackedPerlinNoise2::noise(LVecBase2f const &value);
double StackedPerlinNoise2::noise(LVecBase2d const &value);

1528 11 operator () 0 4 1714 32 StackedPerlinNoise2::operator () 0 3 736 737 738 0
212
inline double StackedPerlinNoise2::operator ()(double x, double y);
inline float StackedPerlinNoise2::operator ()(LVecBase2f const &value);
inline double StackedPerlinNoise2::operator ()(LVecBase2d const &value);

1529 20 ~StackedPerlinNoise2 0 4 1714 41 StackedPerlinNoise2::~StackedPerlinNoise2 0 0 0
48
StackedPerlinNoise2::~StackedPerlinNoise2(void);

1530 19 StackedPerlinNoise3 0 4 1715 40 StackedPerlinNoise3::StackedPerlinNoise3 0 3 739 740 741 555
/**
 * Creates a StackedPerlinNoise3 object with no levels.  You should call
 * add_level() to add each level by hand.
 */

/**
 * Creates num_levels nested PerlinNoise3 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */

/**
 * Creates an exact duplicate of the existing StackedPerlinNoise3 object,
 * including the random seed.
 */
334
inline StackedPerlinNoise3::StackedPerlinNoise3(void);
explicit StackedPerlinNoise3::StackedPerlinNoise3(double sx, double sy, double sz, int num_levels = 3, double scale_factor = 4.0, double amp_scale = 0.5, int table_size = 256, unsigned long int seed = 0);
StackedPerlinNoise3::StackedPerlinNoise3(StackedPerlinNoise3 const &copy);

1531 10 operator = 0 4 1715 31 StackedPerlinNoise3::operator = 0 1 742 0
70
void StackedPerlinNoise3::operator =(StackedPerlinNoise3 const &copy);

1532 9 add_level 0 4 1715 30 StackedPerlinNoise3::add_level 0 1 743 95
/**
 * Adds an arbitrary PerlinNoise3 object, and an associated amplitude, to the
 * stack.
 */
81
void StackedPerlinNoise3::add_level(PerlinNoise3 const &level, double amp = 1.0);

1533 5 clear 0 4 1715 26 StackedPerlinNoise3::clear 0 1 744 98
/**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */
38
void StackedPerlinNoise3::clear(void);

1534 5 noise 0 4 1715 26 StackedPerlinNoise3::noise 0 3 745 746 747 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
197
inline double StackedPerlinNoise3::noise(double x, double y, double z);
inline float StackedPerlinNoise3::noise(LVecBase3f const &value);
double StackedPerlinNoise3::noise(LVecBase3d const &value);

1535 11 operator () 0 4 1715 32 StackedPerlinNoise3::operator () 0 3 748 749 750 0
222
inline double StackedPerlinNoise3::operator ()(double x, double y, double z);
inline float StackedPerlinNoise3::operator ()(LVecBase3f const &value);
inline double StackedPerlinNoise3::operator ()(LVecBase3d const &value);

1536 20 ~StackedPerlinNoise3 0 4 1715 41 StackedPerlinNoise3::~StackedPerlinNoise3 0 0 0
48
StackedPerlinNoise3::~StackedPerlinNoise3(void);

1537 12 Triangulator 0 4 1716 26 Triangulator::Triangulator 0 2 751 752 10
/**
 *
 */
100
Triangulator::Triangulator(void);
inline Triangulator::Triangulator(Triangulator const &) = default;

1538 5 clear 0 4 1716 19 Triangulator::clear 0 1 753 115
/**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */
31
void Triangulator::clear(void);

1539 10 add_vertex 0 4 1716 24 Triangulator::add_vertex 0 2 754 755 166
/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */

/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */
109
int Triangulator::add_vertex(LPoint2d const &point);
inline int Triangulator::add_vertex(double x, double y);

1540 16 get_num_vertices 0 4 1716 30 Triangulator::get_num_vertices 0 1 756 267
/**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */
54
inline int Triangulator::get_num_vertices(void) const;

1541 10 get_vertex 0 4 1716 24 Triangulator::get_vertex 0 1 757 34
/**
 * Returns the nth vertex.
 */
61
inline LPoint2d const &Triangulator::get_vertex(int n) const;

1542 13 clear_polygon 0 4 1716 27 Triangulator::clear_polygon 0 1 758 112
/**
 * Removes the current polygon definition (and its set of holes), but does not
 * clear the vertex pool.
 */
39
void Triangulator::clear_polygon(void);

1543 18 add_polygon_vertex 0 4 1716 32 Triangulator::add_polygon_vertex 0 1 759 334
/**
 * Adds the next consecutive vertex of the polygon.  This vertex should index
 * into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.  In particular, do not repeat the first
 * vertex at the end.
 */
49
void Triangulator::add_polygon_vertex(int index);

1544 15 is_left_winding 0 4 1716 29 Triangulator::is_left_winding 0 1 760 145
/**
 * Returns true if the polygon vertices are listed in counterclockwise order,
 * or false if they appear to be listed in clockwise order.
 */
54
inline bool Triangulator::is_left_winding(void) const;

1545 10 begin_hole 0 4 1716 24 Triangulator::begin_hole 0 1 761 78
/**
 * Finishes the previous hole, if any, and prepares to add a new hole.
 */
36
void Triangulator::begin_hole(void);

1546 15 add_hole_vertex 0 4 1716 29 Triangulator::add_hole_vertex 0 1 762 277
/**
 * Adds the next consecutive vertex of the current hole.  This vertex should
 * index into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.
 */
46
void Triangulator::add_hole_vertex(int index);

1547 11 triangulate 0 4 1716 25 Triangulator::triangulate 0 1 763 181
/**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */
37
void Triangulator::triangulate(void);

1548 17 get_num_triangles 0 4 1716 31 Triangulator::get_num_triangles 0 1 764 94
/**
 * Returns the number of triangles generated by the previous call to
 * triangulate().
 */
48
int Triangulator::get_num_triangles(void) const;

1549 15 get_triangle_v0 0 4 1716 29 Triangulator::get_triangle_v0 0 1 765 194
/**
 * Returns vertex 0 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v0(int n) const;

1550 15 get_triangle_v1 0 4 1716 29 Triangulator::get_triangle_v1 0 1 766 194
/**
 * Returns vertex 1 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v1(int n) const;

1551 15 get_triangle_v2 0 4 1716 29 Triangulator::get_triangle_v2 0 1 767 194
/**
 * Returns vertex 2 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v2(int n) const;

1552 13 ~Triangulator 0 4 1716 27 Triangulator::~Triangulator 0 0 0
34
Triangulator::~Triangulator(void);

1553 13 Triangulator3 0 4 1719 28 Triangulator3::Triangulator3 0 2 768 769 10
/**
 *
 */
105
Triangulator3::Triangulator3(void);
inline Triangulator3::Triangulator3(Triangulator3 const &) = default;

1554 5 clear 0 4 1719 20 Triangulator3::clear 0 1 770 115
/**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */
32
void Triangulator3::clear(void);

1555 10 add_vertex 0 4 1719 25 Triangulator3::add_vertex 0 2 771 772 166
/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */

/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */
121
int Triangulator3::add_vertex(LPoint3d const &point);
inline int Triangulator3::add_vertex(double x, double y, double z);

1556 16 get_num_vertices 0 4 1719 31 Triangulator3::get_num_vertices 0 1 773 267
/**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */
55
inline int Triangulator3::get_num_vertices(void) const;

1557 10 get_vertex 0 4 1719 25 Triangulator3::get_vertex 0 1 774 34
/**
 * Returns the nth vertex.
 */
62
inline LPoint3d const &Triangulator3::get_vertex(int n) const;

1558 11 triangulate 0 4 1719 26 Triangulator3::triangulate 0 1 775 181
/**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */
38
void Triangulator3::triangulate(void);

1559 9 get_plane 0 4 1719 24 Triangulator3::get_plane 0 1 776 100
/**
 * Returns the plane of the polygon.  This is only available after calling
 * triangulate().
 */
59
inline LPlaned const &Triangulator3::get_plane(void) const;

1560 14 ~Triangulator3 0 4 1719 29 Triangulator3::~Triangulator3 0 0 0
36
Triangulator3::~Triangulator3(void);

804
1 0 0 7 10 1725 823 0 0 1 4 copy 1 1723  
2 0 0 7 10 1725 823 0 0 1 4 copy 1 1726  
3 0 0 4 11 1728 0 0 0 1 4 this 3 1725  
4 0 0 6 12 1729 0 0 0 1 4 this 3 1723  
5 0 0 6 13 1730 0 0 0 2 4 this 3 1723  1 n 1 1729  
6 0 0 6 14 1730 0 0 0 2 4 this 3 1723  1 n 1 1729  
7 0 0 6 15 1733 0 0 0 1 4 this 3 1723  
8 0 0 6 16 1733 0 0 0 3 4 this 3 1723  1 n 1 1729  5 count 1 1729  
9 0 0 6 17 1736 0 0 0 1 4 this 3 1723  
10 0 0 6 18 1736 0 0 0 1 4 this 3 1723  
11 0 0 6 19 1729 0 0 0 2 4 this 3 1723  6 param0 0 1730  
12 0 0 6 20 1733 0 0 0 1 4 this 3 1723  
13 0 0 6 21 1736 0 0 0 3 4 this 3 1723  4 view 1 1737  5 flags 1 1736  
14 0 0 4 22 1728 0 0 0 2 4 this 3 1723  4 view 1 1737  
15 0 0 6 8 1742 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1740  5 other 1 1740  
16 0 0 6 9 1742 0 0 0 2 4 this 3 1740  5 other 1 1740  
17 0 0 4 5 1728 0 0 0 1 4 this 3 1743  
18 0 0 4 6 1728 0 0 0 2 4 this 3 1744  3 out 1 1746  
19 0 0 7 32 1750 842 0 0 1 4 copy 1 1748  
20 0 0 7 32 1750 842 0 0 1 4 copy 1 1751  
21 0 0 4 33 1728 0 0 0 1 4 this 3 1750  
22 0 0 6 34 1729 0 0 0 1 4 this 3 1748  
23 0 0 6 35 1753 0 0 0 2 4 this 3 1748  1 n 1 1729  
24 0 0 6 36 1753 0 0 0 2 4 this 3 1748  1 n 1 1729  
25 0 0 6 37 1733 0 0 0 1 4 this 3 1748  
26 0 0 6 38 1733 0 0 0 3 4 this 3 1748  1 n 1 1729  5 count 1 1729  
27 0 0 6 39 1736 0 0 0 1 4 this 3 1748  
28 0 0 6 40 1736 0 0 0 1 4 this 3 1748  
29 0 0 6 41 1729 0 0 0 2 4 this 3 1748  6 param0 0 1753  
30 0 0 6 42 1733 0 0 0 1 4 this 3 1748  
31 0 0 6 43 1736 0 0 0 3 4 this 3 1748  4 view 1 1737  5 flags 1 1736  
32 0 0 4 44 1728 0 0 0 2 4 this 3 1748  4 view 1 1737  
33 0 0 6 30 1742 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1756  5 other 1 1756  
34 0 0 6 31 1742 0 0 0 2 4 this 3 1756  5 other 1 1756  
35 0 0 4 27 1728 0 0 0 1 4 this 3 1758  
36 0 0 4 28 1728 0 0 0 2 4 this 3 1759  3 out 1 1746  
37 0 0 7 54 1763 861 0 0 1 4 copy 1 1761  
38 0 0 7 54 1763 861 0 0 1 4 copy 1 1764  
39 0 0 4 55 1728 0 0 0 1 4 this 3 1763  
40 0 0 6 56 1729 0 0 0 1 4 this 3 1761  
41 0 0 6 57 1766 0 0 0 2 4 this 3 1761  1 n 1 1729  
42 0 0 6 58 1766 0 0 0 2 4 this 3 1761  1 n 1 1729  
43 0 0 6 59 1733 0 0 0 1 4 this 3 1761  
44 0 0 6 60 1733 0 0 0 3 4 this 3 1761  1 n 1 1729  5 count 1 1729  
45 0 0 6 61 1736 0 0 0 1 4 this 3 1761  
46 0 0 6 62 1736 0 0 0 1 4 this 3 1761  
47 0 0 6 63 1729 0 0 0 2 4 this 3 1761  6 param0 0 1766  
48 0 0 6 64 1733 0 0 0 1 4 this 3 1761  
49 0 0 6 65 1736 0 0 0 3 4 this 3 1761  4 view 1 1737  5 flags 1 1736  
50 0 0 4 66 1728 0 0 0 2 4 this 3 1761  4 view 1 1737  
51 0 0 6 52 1742 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1769  5 other 1 1769  
52 0 0 6 53 1742 0 0 0 2 4 this 3 1769  5 other 1 1769  
53 0 0 4 49 1728 0 0 0 1 4 this 3 1771  
54 0 0 4 50 1728 0 0 0 2 4 this 3 1772  3 out 1 1746  
55 0 0 7 76 1776 880 0 0 1 4 copy 1 1774  
56 0 0 7 76 1776 880 0 0 1 4 copy 1 1777  
57 0 0 4 77 1728 0 0 0 1 4 this 3 1776  
58 0 0 6 78 1729 0 0 0 1 4 this 3 1774  
59 0 0 6 79 1779 0 0 0 2 4 this 3 1774  1 n 1 1729  
60 0 0 6 80 1779 0 0 0 2 4 this 3 1774  1 n 1 1729  
61 0 0 6 81 1733 0 0 0 1 4 this 3 1774  
62 0 0 6 82 1733 0 0 0 3 4 this 3 1774  1 n 1 1729  5 count 1 1729  
63 0 0 6 83 1736 0 0 0 1 4 this 3 1774  
64 0 0 6 84 1736 0 0 0 1 4 this 3 1774  
65 0 0 6 85 1729 0 0 0 2 4 this 3 1774  6 param0 0 1779  
66 0 0 6 86 1733 0 0 0 1 4 this 3 1774  
67 0 0 6 87 1736 0 0 0 3 4 this 3 1774  4 view 1 1737  5 flags 1 1736  
68 0 0 4 88 1728 0 0 0 2 4 this 3 1774  4 view 1 1737  
69 0 0 6 74 1742 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1782  5 other 1 1782  
70 0 0 6 75 1742 0 0 0 2 4 this 3 1782  5 other 1 1782  
71 0 0 4 71 1728 0 0 0 1 4 this 3 1784  
72 0 0 4 72 1728 0 0 0 2 4 this 3 1785  3 out 1 1746  
73 0 0 7 98 1789 899 0 0 1 4 copy 1 1787  
74 0 0 7 98 1789 899 0 0 1 4 copy 1 1790  
75 0 0 4 99 1728 0 0 0 1 4 this 3 1789  
76 0 0 6 100 1729 0 0 0 1 4 this 3 1787  
77 0 0 6 101 1792 0 0 0 2 4 this 3 1787  1 n 1 1729  
78 0 0 6 102 1792 0 0 0 2 4 this 3 1787  1 n 1 1729  
79 0 0 6 103 1733 0 0 0 1 4 this 3 1787  
80 0 0 6 104 1733 0 0 0 3 4 this 3 1787  1 n 1 1729  5 count 1 1729  
81 0 0 6 105 1736 0 0 0 1 4 this 3 1787  
82 0 0 6 106 1736 0 0 0 1 4 this 3 1787  
83 0 0 6 107 1729 0 0 0 2 4 this 3 1787  6 param0 0 1792  
84 0 0 6 108 1733 0 0 0 1 4 this 3 1787  
85 0 0 6 109 1736 0 0 0 3 4 this 3 1787  4 view 1 1737  5 flags 1 1736  
86 0 0 4 110 1728 0 0 0 2 4 this 3 1787  4 view 1 1737  
87 0 0 6 96 1742 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1795  5 other 1 1795  
88 0 0 6 97 1742 0 0 0 2 4 this 3 1795  5 other 1 1795  
89 0 0 4 93 1728 0 0 0 1 4 this 3 1797  
90 0 0 4 94 1728 0 0 0 2 4 this 3 1798  3 out 1 1746  
91 0 0 7 120 1802 918 0 0 1 4 copy 1 1800  
92 0 0 7 120 1802 918 0 0 1 4 copy 1 1803  
93 0 0 4 121 1728 0 0 0 1 4 this 3 1802  
94 0 0 6 122 1729 0 0 0 1 4 this 3 1800  
95 0 0 6 123 1805 0 0 0 2 4 this 3 1800  1 n 1 1729  
96 0 0 6 124 1805 0 0 0 2 4 this 3 1800  1 n 1 1729  
97 0 0 6 125 1733 0 0 0 1 4 this 3 1800  
98 0 0 6 126 1733 0 0 0 3 4 this 3 1800  1 n 1 1729  5 count 1 1729  
99 0 0 6 127 1736 0 0 0 1 4 this 3 1800  
100 0 0 6 128 1736 0 0 0 1 4 this 3 1800  
101 0 0 6 129 1729 0 0 0 2 4 this 3 1800  6 param0 0 1805  
102 0 0 6 130 1733 0 0 0 1 4 this 3 1800  
103 0 0 6 131 1736 0 0 0 3 4 this 3 1800  4 view 1 1737  5 flags 1 1736  
104 0 0 4 132 1728 0 0 0 2 4 this 3 1800  4 view 1 1737  
105 0 0 6 118 1742 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1808  5 other 1 1808  
106 0 0 6 119 1742 0 0 0 2 4 this 3 1808  5 other 1 1808  
107 0 0 4 115 1728 0 0 0 1 4 this 3 1810  
108 0 0 4 116 1728 0 0 0 2 4 this 3 1811  3 out 1 1746  
109 0 0 7 142 1815 937 0 0 1 4 copy 1 1813  
110 0 0 7 142 1815 937 0 0 1 4 copy 1 1816  
111 0 0 4 143 1728 0 0 0 1 4 this 3 1815  
112 0 0 6 144 1729 0 0 0 1 4 this 3 1813  
113 0 0 6 145 1818 0 0 0 2 4 this 3 1813  1 n 1 1729  
114 0 0 6 146 1818 0 0 0 2 4 this 3 1813  1 n 1 1729  
115 0 0 6 147 1733 0 0 0 1 4 this 3 1813  
116 0 0 6 148 1733 0 0 0 3 4 this 3 1813  1 n 1 1729  5 count 1 1729  
117 0 0 6 149 1736 0 0 0 1 4 this 3 1813  
118 0 0 6 150 1736 0 0 0 1 4 this 3 1813  
119 0 0 6 151 1729 0 0 0 2 4 this 3 1813  6 param0 0 1818  
120 0 0 6 152 1733 0 0 0 1 4 this 3 1813  
121 0 0 6 153 1736 0 0 0 3 4 this 3 1813  4 view 1 1737  5 flags 1 1736  
122 0 0 4 154 1728 0 0 0 2 4 this 3 1813  4 view 1 1737  
123 0 0 6 140 1742 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1821  5 other 1 1821  
124 0 0 6 141 1742 0 0 0 2 4 this 3 1821  5 other 1 1821  
125 0 0 4 137 1728 0 0 0 1 4 this 3 1823  
126 0 0 4 138 1728 0 0 0 2 4 this 3 1824  3 out 1 1746  
127 0 0 7 164 1828 956 0 0 1 4 copy 1 1826  
128 0 0 7 164 1828 956 0 0 1 4 copy 1 1829  
129 0 0 4 165 1728 0 0 0 1 4 this 3 1828  
130 0 0 6 166 1729 0 0 0 1 4 this 3 1826  
131 0 0 6 167 1831 0 0 0 2 4 this 3 1826  1 n 1 1729  
132 0 0 6 168 1831 0 0 0 2 4 this 3 1826  1 n 1 1729  
133 0 0 6 169 1733 0 0 0 1 4 this 3 1826  
134 0 0 6 170 1733 0 0 0 3 4 this 3 1826  1 n 1 1729  5 count 1 1729  
135 0 0 6 171 1736 0 0 0 1 4 this 3 1826  
136 0 0 6 172 1736 0 0 0 1 4 this 3 1826  
137 0 0 6 173 1729 0 0 0 2 4 this 3 1826  6 param0 0 1831  
138 0 0 6 174 1733 0 0 0 1 4 this 3 1826  
139 0 0 6 175 1736 0 0 0 3 4 this 3 1826  4 view 1 1737  5 flags 1 1736  
140 0 0 4 176 1728 0 0 0 2 4 this 3 1826  4 view 1 1737  
141 0 0 6 162 1742 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1834  5 other 1 1834  
142 0 0 6 163 1742 0 0 0 2 4 this 3 1834  5 other 1 1834  
143 0 0 4 159 1728 0 0 0 1 4 this 3 1836  
144 0 0 4 160 1728 0 0 0 2 4 this 3 1837  3 out 1 1746  
145 0 0 7 186 1841 975 0 0 1 4 copy 1 1839  
146 0 0 7 186 1841 975 0 0 1 4 copy 1 1842  
147 0 0 4 187 1728 0 0 0 1 4 this 3 1841  
148 0 0 6 188 1729 0 0 0 1 4 this 3 1839  
149 0 0 6 189 1844 0 0 0 2 4 this 3 1839  1 n 1 1729  
150 0 0 6 190 1844 0 0 0 2 4 this 3 1839  1 n 1 1729  
151 0 0 6 191 1733 0 0 0 1 4 this 3 1839  
152 0 0 6 192 1733 0 0 0 3 4 this 3 1839  1 n 1 1729  5 count 1 1729  
153 0 0 6 193 1736 0 0 0 1 4 this 3 1839  
154 0 0 6 194 1736 0 0 0 1 4 this 3 1839  
155 0 0 6 195 1729 0 0 0 2 4 this 3 1839  6 param0 0 1844  
156 0 0 6 196 1733 0 0 0 1 4 this 3 1839  
157 0 0 6 197 1736 0 0 0 3 4 this 3 1839  4 view 1 1737  5 flags 1 1736  
158 0 0 4 198 1728 0 0 0 2 4 this 3 1839  4 view 1 1737  
159 0 0 6 184 1742 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1847  5 other 1 1847  
160 0 0 6 185 1742 0 0 0 2 4 this 3 1847  5 other 1 1847  
161 0 0 4 181 1728 0 0 0 1 4 this 3 1849  
162 0 0 4 182 1728 0 0 0 2 4 this 3 1850  3 out 1 1746  
163 0 0 7 208 1854 994 0 0 1 4 copy 1 1852  
164 0 0 7 208 1854 994 0 0 1 4 copy 1 1855  
165 0 0 4 209 1728 0 0 0 1 4 this 3 1854  
166 0 0 6 210 1729 0 0 0 1 4 this 3 1852  
167 0 0 6 211 1857 0 0 0 2 4 this 3 1852  1 n 1 1729  
168 0 0 6 212 1857 0 0 0 2 4 this 3 1852  1 n 1 1729  
169 0 0 6 213 1733 0 0 0 1 4 this 3 1852  
170 0 0 6 214 1733 0 0 0 3 4 this 3 1852  1 n 1 1729  5 count 1 1729  
171 0 0 6 215 1736 0 0 0 1 4 this 3 1852  
172 0 0 6 216 1736 0 0 0 1 4 this 3 1852  
173 0 0 6 217 1729 0 0 0 2 4 this 3 1852  6 param0 0 1857  
174 0 0 6 218 1733 0 0 0 1 4 this 3 1852  
175 0 0 6 219 1736 0 0 0 3 4 this 3 1852  4 view 1 1737  5 flags 1 1736  
176 0 0 4 220 1728 0 0 0 2 4 this 3 1852  4 view 1 1737  
177 0 0 6 206 1742 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1860  5 other 1 1860  
178 0 0 6 207 1742 0 0 0 2 4 this 3 1860  5 other 1 1860  
179 0 0 4 203 1728 0 0 0 1 4 this 3 1862  
180 0 0 4 204 1728 0 0 0 2 4 this 3 1863  3 out 1 1746  
181 0 0 7 230 1867 1013 0 0 1 4 copy 1 1865  
182 0 0 7 230 1867 1013 0 0 1 4 copy 1 1868  
183 0 0 4 231 1728 0 0 0 1 4 this 3 1867  
184 0 0 6 232 1729 0 0 0 1 4 this 3 1865  
185 0 0 6 233 1870 0 0 0 2 4 this 3 1865  1 n 1 1729  
186 0 0 6 234 1870 0 0 0 2 4 this 3 1865  1 n 1 1729  
187 0 0 6 235 1733 0 0 0 1 4 this 3 1865  
188 0 0 6 236 1733 0 0 0 3 4 this 3 1865  1 n 1 1729  5 count 1 1729  
189 0 0 6 237 1736 0 0 0 1 4 this 3 1865  
190 0 0 6 238 1736 0 0 0 1 4 this 3 1865  
191 0 0 6 239 1729 0 0 0 2 4 this 3 1865  6 param0 0 1870  
192 0 0 6 240 1733 0 0 0 1 4 this 3 1865  
193 0 0 6 241 1736 0 0 0 3 4 this 3 1865  4 view 1 1737  5 flags 1 1736  
194 0 0 4 242 1728 0 0 0 2 4 this 3 1865  4 view 1 1737  
195 0 0 6 228 1742 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1873  5 other 1 1873  
196 0 0 6 229 1742 0 0 0 2 4 this 3 1873  5 other 1 1873  
197 0 0 4 225 1728 0 0 0 1 4 this 3 1875  
198 0 0 4 226 1728 0 0 0 2 4 this 3 1876  3 out 1 1746  
199 0 0 7 252 1880 1032 0 0 1 4 copy 1 1878  
200 0 0 7 252 1880 1032 0 0 1 4 copy 1 1881  
201 0 0 4 253 1728 0 0 0 1 4 this 3 1880  
202 0 0 6 254 1729 0 0 0 1 4 this 3 1878  
203 0 0 6 255 1883 0 0 0 2 4 this 3 1878  1 n 1 1729  
204 0 0 6 256 1883 0 0 0 2 4 this 3 1878  1 n 1 1729  
205 0 0 6 257 1733 0 0 0 1 4 this 3 1878  
206 0 0 6 258 1733 0 0 0 3 4 this 3 1878  1 n 1 1729  5 count 1 1729  
207 0 0 6 259 1736 0 0 0 1 4 this 3 1878  
208 0 0 6 260 1736 0 0 0 1 4 this 3 1878  
209 0 0 6 261 1729 0 0 0 2 4 this 3 1878  6 param0 0 1883  
210 0 0 6 262 1733 0 0 0 1 4 this 3 1878  
211 0 0 6 263 1736 0 0 0 3 4 this 3 1878  4 view 1 1737  5 flags 1 1736  
212 0 0 4 264 1728 0 0 0 2 4 this 3 1878  4 view 1 1737  
213 0 0 6 250 1742 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1886  5 other 1 1886  
214 0 0 6 251 1742 0 0 0 2 4 this 3 1886  5 other 1 1886  
215 0 0 4 247 1728 0 0 0 1 4 this 3 1888  
216 0 0 4 248 1728 0 0 0 2 4 this 3 1889  3 out 1 1746  
217 0 0 7 274 1893 1051 0 0 1 4 copy 1 1891  
218 0 0 7 274 1893 1051 0 0 1 4 copy 1 1894  
219 0 0 4 275 1728 0 0 0 1 4 this 3 1893  
220 0 0 6 276 1729 0 0 0 1 4 this 3 1891  
221 0 0 6 277 1896 0 0 0 2 4 this 3 1891  1 n 1 1729  
222 0 0 6 278 1896 0 0 0 2 4 this 3 1891  1 n 1 1729  
223 0 0 6 279 1733 0 0 0 1 4 this 3 1891  
224 0 0 6 280 1733 0 0 0 3 4 this 3 1891  1 n 1 1729  5 count 1 1729  
225 0 0 6 281 1736 0 0 0 1 4 this 3 1891  
226 0 0 6 282 1736 0 0 0 1 4 this 3 1891  
227 0 0 6 283 1729 0 0 0 2 4 this 3 1891  6 param0 0 1896  
228 0 0 6 284 1733 0 0 0 1 4 this 3 1891  
229 0 0 6 285 1736 0 0 0 3 4 this 3 1891  4 view 1 1737  5 flags 1 1736  
230 0 0 4 286 1728 0 0 0 2 4 this 3 1891  4 view 1 1737  
231 0 0 6 272 1742 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1899  5 other 1 1899  
232 0 0 6 273 1742 0 0 0 2 4 this 3 1899  5 other 1 1899  
233 0 0 4 269 1728 0 0 0 1 4 this 3 1901  
234 0 0 4 270 1728 0 0 0 2 4 this 3 1902  3 out 1 1746  
235 0 0 7 289 1904 1072 0 0 1 4 copy 1 1726  
236 0 0 7 289 1904 1072 0 0 1 6 source 1 1733  
237 0 0 7 289 1904 1072 0 0 1 11 type_handle 1 1905  
238 0 0 7 290 1904 1072 0 0 2 1 n 1 1729  11 type_handle 1 1905  
239 0 0 4 291 1728 0 0 0 1 4 this 3 1904  
240 0 0 6 292 1729 0 0 0 1 4 this 3 1726  
241 0 0 4 293 1728 0 0 0 2 4 this 3 1904  1 x 1 1730  
242 0 0 4 294 1728 0 0 0 1 4 this 3 1904  
243 0 0 6 295 1730 0 0 0 2 4 this 3 1726  1 n 1 1729  
244 0 0 4 296 1728 0 0 0 3 4 this 3 1904  1 n 1 1729  5 value 1 1730  
245 0 0 6 297 1730 0 0 0 2 4 this 3 1726  1 n 1 1729  
246 0 0 4 298 1728 0 0 0 3 4 this 3 1904  1 n 1 1729  5 value 1 1730  
247 0 0 6 299 1733 0 0 0 1 4 this 3 1726  
248 0 0 4 300 1728 0 0 0 2 4 this 3 1904  4 data 1 1733  
249 0 0 6 301 1733 0 0 0 3 4 this 3 1726  1 n 1 1729  5 count 1 1729  
250 0 0 4 302 1728 0 0 0 4 4 this 3 1904  1 n 1 1729  5 count 1 1729  4 data 1 1907  
251 0 0 6 303 1736 0 0 0 1 4 this 3 1726  
252 0 0 6 304 1736 0 0 0 1 4 this 3 1726  
253 0 0 6 305 1729 0 0 0 2 4 this 3 1726  6 param0 0 1730  
254 0 0 6 306 1733 0 0 0 1 4 this 3 1726  
255 0 0 6 307 1736 0 0 0 3 4 this 3 1904  4 view 1 1737  5 flags 1 1736  
256 0 0 4 308 1728 0 0 0 2 4 this 3 1726  4 view 1 1737  
257 0 0 7 311 1908 1093 0 0 1 4 copy 1 1751  
258 0 0 7 311 1908 1093 0 0 1 6 source 1 1733  
259 0 0 7 311 1908 1093 0 0 1 11 type_handle 1 1905  
260 0 0 7 312 1908 1093 0 0 2 1 n 1 1729  11 type_handle 1 1905  
261 0 0 4 313 1728 0 0 0 1 4 this 3 1908  
262 0 0 6 314 1729 0 0 0 1 4 this 3 1751  
263 0 0 4 315 1728 0 0 0 2 4 this 3 1908  1 x 1 1753  
264 0 0 4 316 1728 0 0 0 1 4 this 3 1908  
265 0 0 6 317 1753 0 0 0 2 4 this 3 1751  1 n 1 1729  
266 0 0 4 318 1728 0 0 0 3 4 this 3 1908  1 n 1 1729  5 value 1 1753  
267 0 0 6 319 1753 0 0 0 2 4 this 3 1751  1 n 1 1729  
268 0 0 4 320 1728 0 0 0 3 4 this 3 1908  1 n 1 1729  5 value 1 1753  
269 0 0 6 321 1733 0 0 0 1 4 this 3 1751  
270 0 0 4 322 1728 0 0 0 2 4 this 3 1908  4 data 1 1733  
271 0 0 6 323 1733 0 0 0 3 4 this 3 1751  1 n 1 1729  5 count 1 1729  
272 0 0 4 324 1728 0 0 0 4 4 this 3 1908  1 n 1 1729  5 count 1 1729  4 data 1 1907  
273 0 0 6 325 1736 0 0 0 1 4 this 3 1751  
274 0 0 6 326 1736 0 0 0 1 4 this 3 1751  
275 0 0 6 327 1729 0 0 0 2 4 this 3 1751  6 param0 0 1753  
276 0 0 6 328 1733 0 0 0 1 4 this 3 1751  
277 0 0 6 329 1736 0 0 0 3 4 this 3 1908  4 view 1 1737  5 flags 1 1736  
278 0 0 4 330 1728 0 0 0 2 4 this 3 1751  4 view 1 1737  
279 0 0 7 333 1909 1114 0 0 1 4 copy 1 1764  
280 0 0 7 333 1909 1114 0 0 1 6 source 1 1733  
281 0 0 7 333 1909 1114 0 0 1 11 type_handle 1 1905  
282 0 0 7 334 1909 1114 0 0 2 1 n 1 1729  11 type_handle 1 1905  
283 0 0 4 335 1728 0 0 0 1 4 this 3 1909  
284 0 0 6 336 1729 0 0 0 1 4 this 3 1764  
285 0 0 4 337 1728 0 0 0 2 4 this 3 1909  1 x 1 1766  
286 0 0 4 338 1728 0 0 0 1 4 this 3 1909  
287 0 0 6 339 1766 0 0 0 2 4 this 3 1764  1 n 1 1729  
288 0 0 4 340 1728 0 0 0 3 4 this 3 1909  1 n 1 1729  5 value 1 1766  
289 0 0 6 341 1766 0 0 0 2 4 this 3 1764  1 n 1 1729  
290 0 0 4 342 1728 0 0 0 3 4 this 3 1909  1 n 1 1729  5 value 1 1766  
291 0 0 6 343 1733 0 0 0 1 4 this 3 1764  
292 0 0 4 344 1728 0 0 0 2 4 this 3 1909  4 data 1 1733  
293 0 0 6 345 1733 0 0 0 3 4 this 3 1764  1 n 1 1729  5 count 1 1729  
294 0 0 4 346 1728 0 0 0 4 4 this 3 1909  1 n 1 1729  5 count 1 1729  4 data 1 1907  
295 0 0 6 347 1736 0 0 0 1 4 this 3 1764  
296 0 0 6 348 1736 0 0 0 1 4 this 3 1764  
297 0 0 6 349 1729 0 0 0 2 4 this 3 1764  6 param0 0 1766  
298 0 0 6 350 1733 0 0 0 1 4 this 3 1764  
299 0 0 6 351 1736 0 0 0 3 4 this 3 1909  4 view 1 1737  5 flags 1 1736  
300 0 0 4 352 1728 0 0 0 2 4 this 3 1764  4 view 1 1737  
301 0 0 7 355 1910 1135 0 0 1 4 copy 1 1777  
302 0 0 7 355 1910 1135 0 0 1 6 source 1 1733  
303 0 0 7 355 1910 1135 0 0 1 11 type_handle 1 1905  
304 0 0 7 356 1910 1135 0 0 2 1 n 1 1729  11 type_handle 1 1905  
305 0 0 4 357 1728 0 0 0 1 4 this 3 1910  
306 0 0 6 358 1729 0 0 0 1 4 this 3 1777  
307 0 0 4 359 1728 0 0 0 2 4 this 3 1910  1 x 1 1779  
308 0 0 4 360 1728 0 0 0 1 4 this 3 1910  
309 0 0 6 361 1779 0 0 0 2 4 this 3 1777  1 n 1 1729  
310 0 0 4 362 1728 0 0 0 3 4 this 3 1910  1 n 1 1729  5 value 1 1779  
311 0 0 6 363 1779 0 0 0 2 4 this 3 1777  1 n 1 1729  
312 0 0 4 364 1728 0 0 0 3 4 this 3 1910  1 n 1 1729  5 value 1 1779  
313 0 0 6 365 1733 0 0 0 1 4 this 3 1777  
314 0 0 4 366 1728 0 0 0 2 4 this 3 1910  4 data 1 1733  
315 0 0 6 367 1733 0 0 0 3 4 this 3 1777  1 n 1 1729  5 count 1 1729  
316 0 0 4 368 1728 0 0 0 4 4 this 3 1910  1 n 1 1729  5 count 1 1729  4 data 1 1907  
317 0 0 6 369 1736 0 0 0 1 4 this 3 1777  
318 0 0 6 370 1736 0 0 0 1 4 this 3 1777  
319 0 0 6 371 1729 0 0 0 2 4 this 3 1777  6 param0 0 1779  
320 0 0 6 372 1733 0 0 0 1 4 this 3 1777  
321 0 0 6 373 1736 0 0 0 3 4 this 3 1910  4 view 1 1737  5 flags 1 1736  
322 0 0 4 374 1728 0 0 0 2 4 this 3 1777  4 view 1 1737  
323 0 0 7 377 1911 1156 0 0 1 4 copy 1 1790  
324 0 0 7 377 1911 1156 0 0 1 6 source 1 1733  
325 0 0 7 377 1911 1156 0 0 1 11 type_handle 1 1905  
326 0 0 7 378 1911 1156 0 0 2 1 n 1 1729  11 type_handle 1 1905  
327 0 0 4 379 1728 0 0 0 1 4 this 3 1911  
328 0 0 6 380 1729 0 0 0 1 4 this 3 1790  
329 0 0 4 381 1728 0 0 0 2 4 this 3 1911  1 x 1 1792  
330 0 0 4 382 1728 0 0 0 1 4 this 3 1911  
331 0 0 6 383 1792 0 0 0 2 4 this 3 1790  1 n 1 1729  
332 0 0 4 384 1728 0 0 0 3 4 this 3 1911  1 n 1 1729  5 value 1 1792  
333 0 0 6 385 1792 0 0 0 2 4 this 3 1790  1 n 1 1729  
334 0 0 4 386 1728 0 0 0 3 4 this 3 1911  1 n 1 1729  5 value 1 1792  
335 0 0 6 387 1733 0 0 0 1 4 this 3 1790  
336 0 0 4 388 1728 0 0 0 2 4 this 3 1911  4 data 1 1733  
337 0 0 6 389 1733 0 0 0 3 4 this 3 1790  1 n 1 1729  5 count 1 1729  
338 0 0 4 390 1728 0 0 0 4 4 this 3 1911  1 n 1 1729  5 count 1 1729  4 data 1 1907  
339 0 0 6 391 1736 0 0 0 1 4 this 3 1790  
340 0 0 6 392 1736 0 0 0 1 4 this 3 1790  
341 0 0 6 393 1729 0 0 0 2 4 this 3 1790  6 param0 0 1792  
342 0 0 6 394 1733 0 0 0 1 4 this 3 1790  
343 0 0 6 395 1736 0 0 0 3 4 this 3 1911  4 view 1 1737  5 flags 1 1736  
344 0 0 4 396 1728 0 0 0 2 4 this 3 1790  4 view 1 1737  
345 0 0 7 399 1912 1177 0 0 1 4 copy 1 1803  
346 0 0 7 399 1912 1177 0 0 1 6 source 1 1733  
347 0 0 7 399 1912 1177 0 0 1 11 type_handle 1 1905  
348 0 0 7 400 1912 1177 0 0 2 1 n 1 1729  11 type_handle 1 1905  
349 0 0 4 401 1728 0 0 0 1 4 this 3 1912  
350 0 0 6 402 1729 0 0 0 1 4 this 3 1803  
351 0 0 4 403 1728 0 0 0 2 4 this 3 1912  1 x 1 1805  
352 0 0 4 404 1728 0 0 0 1 4 this 3 1912  
353 0 0 6 405 1805 0 0 0 2 4 this 3 1803  1 n 1 1729  
354 0 0 4 406 1728 0 0 0 3 4 this 3 1912  1 n 1 1729  5 value 1 1805  
355 0 0 6 407 1805 0 0 0 2 4 this 3 1803  1 n 1 1729  
356 0 0 4 408 1728 0 0 0 3 4 this 3 1912  1 n 1 1729  5 value 1 1805  
357 0 0 6 409 1733 0 0 0 1 4 this 3 1803  
358 0 0 4 410 1728 0 0 0 2 4 this 3 1912  4 data 1 1733  
359 0 0 6 411 1733 0 0 0 3 4 this 3 1803  1 n 1 1729  5 count 1 1729  
360 0 0 4 412 1728 0 0 0 4 4 this 3 1912  1 n 1 1729  5 count 1 1729  4 data 1 1907  
361 0 0 6 413 1736 0 0 0 1 4 this 3 1803  
362 0 0 6 414 1736 0 0 0 1 4 this 3 1803  
363 0 0 6 415 1729 0 0 0 2 4 this 3 1803  6 param0 0 1805  
364 0 0 6 416 1733 0 0 0 1 4 this 3 1803  
365 0 0 6 417 1736 0 0 0 3 4 this 3 1912  4 view 1 1737  5 flags 1 1736  
366 0 0 4 418 1728 0 0 0 2 4 this 3 1803  4 view 1 1737  
367 0 0 7 421 1913 1198 0 0 1 4 copy 1 1816  
368 0 0 7 421 1913 1198 0 0 1 6 source 1 1733  
369 0 0 7 421 1913 1198 0 0 1 11 type_handle 1 1905  
370 0 0 7 422 1913 1198 0 0 2 1 n 1 1729  11 type_handle 1 1905  
371 0 0 4 423 1728 0 0 0 1 4 this 3 1913  
372 0 0 6 424 1729 0 0 0 1 4 this 3 1816  
373 0 0 4 425 1728 0 0 0 2 4 this 3 1913  1 x 1 1818  
374 0 0 4 426 1728 0 0 0 1 4 this 3 1913  
375 0 0 6 427 1818 0 0 0 2 4 this 3 1816  1 n 1 1729  
376 0 0 4 428 1728 0 0 0 3 4 this 3 1913  1 n 1 1729  5 value 1 1818  
377 0 0 6 429 1818 0 0 0 2 4 this 3 1816  1 n 1 1729  
378 0 0 4 430 1728 0 0 0 3 4 this 3 1913  1 n 1 1729  5 value 1 1818  
379 0 0 6 431 1733 0 0 0 1 4 this 3 1816  
380 0 0 4 432 1728 0 0 0 2 4 this 3 1913  4 data 1 1733  
381 0 0 6 433 1733 0 0 0 3 4 this 3 1816  1 n 1 1729  5 count 1 1729  
382 0 0 4 434 1728 0 0 0 4 4 this 3 1913  1 n 1 1729  5 count 1 1729  4 data 1 1907  
383 0 0 6 435 1736 0 0 0 1 4 this 3 1816  
384 0 0 6 436 1736 0 0 0 1 4 this 3 1816  
385 0 0 6 437 1729 0 0 0 2 4 this 3 1816  6 param0 0 1818  
386 0 0 6 438 1733 0 0 0 1 4 this 3 1816  
387 0 0 6 439 1736 0 0 0 3 4 this 3 1913  4 view 1 1737  5 flags 1 1736  
388 0 0 4 440 1728 0 0 0 2 4 this 3 1816  4 view 1 1737  
389 0 0 7 443 1914 1219 0 0 1 4 copy 1 1829  
390 0 0 7 443 1914 1219 0 0 1 6 source 1 1733  
391 0 0 7 443 1914 1219 0 0 1 11 type_handle 1 1905  
392 0 0 7 444 1914 1219 0 0 2 1 n 1 1729  11 type_handle 1 1905  
393 0 0 4 445 1728 0 0 0 1 4 this 3 1914  
394 0 0 6 446 1729 0 0 0 1 4 this 3 1829  
395 0 0 4 447 1728 0 0 0 2 4 this 3 1914  1 x 1 1831  
396 0 0 4 448 1728 0 0 0 1 4 this 3 1914  
397 0 0 6 449 1831 0 0 0 2 4 this 3 1829  1 n 1 1729  
398 0 0 4 450 1728 0 0 0 3 4 this 3 1914  1 n 1 1729  5 value 1 1831  
399 0 0 6 451 1831 0 0 0 2 4 this 3 1829  1 n 1 1729  
400 0 0 4 452 1728 0 0 0 3 4 this 3 1914  1 n 1 1729  5 value 1 1831  
401 0 0 6 453 1733 0 0 0 1 4 this 3 1829  
402 0 0 4 454 1728 0 0 0 2 4 this 3 1914  4 data 1 1733  
403 0 0 6 455 1733 0 0 0 3 4 this 3 1829  1 n 1 1729  5 count 1 1729  
404 0 0 4 456 1728 0 0 0 4 4 this 3 1914  1 n 1 1729  5 count 1 1729  4 data 1 1907  
405 0 0 6 457 1736 0 0 0 1 4 this 3 1829  
406 0 0 6 458 1736 0 0 0 1 4 this 3 1829  
407 0 0 6 459 1729 0 0 0 2 4 this 3 1829  6 param0 0 1831  
408 0 0 6 460 1733 0 0 0 1 4 this 3 1829  
409 0 0 6 461 1736 0 0 0 3 4 this 3 1914  4 view 1 1737  5 flags 1 1736  
410 0 0 4 462 1728 0 0 0 2 4 this 3 1829  4 view 1 1737  
411 0 0 7 465 1915 1240 0 0 1 4 copy 1 1842  
412 0 0 7 465 1915 1240 0 0 1 6 source 1 1733  
413 0 0 7 465 1915 1240 0 0 1 11 type_handle 1 1905  
414 0 0 7 466 1915 1240 0 0 2 1 n 1 1729  11 type_handle 1 1905  
415 0 0 4 467 1728 0 0 0 1 4 this 3 1915  
416 0 0 6 468 1729 0 0 0 1 4 this 3 1842  
417 0 0 4 469 1728 0 0 0 2 4 this 3 1915  1 x 1 1844  
418 0 0 4 470 1728 0 0 0 1 4 this 3 1915  
419 0 0 6 471 1844 0 0 0 2 4 this 3 1842  1 n 1 1729  
420 0 0 4 472 1728 0 0 0 3 4 this 3 1915  1 n 1 1729  5 value 1 1844  
421 0 0 6 473 1844 0 0 0 2 4 this 3 1842  1 n 1 1729  
422 0 0 4 474 1728 0 0 0 3 4 this 3 1915  1 n 1 1729  5 value 1 1844  
423 0 0 6 475 1733 0 0 0 1 4 this 3 1842  
424 0 0 4 476 1728 0 0 0 2 4 this 3 1915  4 data 1 1733  
425 0 0 6 477 1733 0 0 0 3 4 this 3 1842  1 n 1 1729  5 count 1 1729  
426 0 0 4 478 1728 0 0 0 4 4 this 3 1915  1 n 1 1729  5 count 1 1729  4 data 1 1907  
427 0 0 6 479 1736 0 0 0 1 4 this 3 1842  
428 0 0 6 480 1736 0 0 0 1 4 this 3 1842  
429 0 0 6 481 1729 0 0 0 2 4 this 3 1842  6 param0 0 1844  
430 0 0 6 482 1733 0 0 0 1 4 this 3 1842  
431 0 0 6 483 1736 0 0 0 3 4 this 3 1915  4 view 1 1737  5 flags 1 1736  
432 0 0 4 484 1728 0 0 0 2 4 this 3 1842  4 view 1 1737  
433 0 0 7 487 1916 1261 0 0 1 4 copy 1 1855  
434 0 0 7 487 1916 1261 0 0 1 6 source 1 1733  
435 0 0 7 487 1916 1261 0 0 1 11 type_handle 1 1905  
436 0 0 7 488 1916 1261 0 0 2 1 n 1 1729  11 type_handle 1 1905  
437 0 0 4 489 1728 0 0 0 1 4 this 3 1916  
438 0 0 6 490 1729 0 0 0 1 4 this 3 1855  
439 0 0 4 491 1728 0 0 0 2 4 this 3 1916  1 x 1 1857  
440 0 0 4 492 1728 0 0 0 1 4 this 3 1916  
441 0 0 6 493 1857 0 0 0 2 4 this 3 1855  1 n 1 1729  
442 0 0 4 494 1728 0 0 0 3 4 this 3 1916  1 n 1 1729  5 value 1 1857  
443 0 0 6 495 1857 0 0 0 2 4 this 3 1855  1 n 1 1729  
444 0 0 4 496 1728 0 0 0 3 4 this 3 1916  1 n 1 1729  5 value 1 1857  
445 0 0 6 497 1733 0 0 0 1 4 this 3 1855  
446 0 0 4 498 1728 0 0 0 2 4 this 3 1916  4 data 1 1733  
447 0 0 6 499 1733 0 0 0 3 4 this 3 1855  1 n 1 1729  5 count 1 1729  
448 0 0 4 500 1728 0 0 0 4 4 this 3 1916  1 n 1 1729  5 count 1 1729  4 data 1 1907  
449 0 0 6 501 1736 0 0 0 1 4 this 3 1855  
450 0 0 6 502 1736 0 0 0 1 4 this 3 1855  
451 0 0 6 503 1729 0 0 0 2 4 this 3 1855  6 param0 0 1857  
452 0 0 6 504 1733 0 0 0 1 4 this 3 1855  
453 0 0 6 505 1736 0 0 0 3 4 this 3 1916  4 view 1 1737  5 flags 1 1736  
454 0 0 4 506 1728 0 0 0 2 4 this 3 1855  4 view 1 1737  
455 0 0 7 509 1917 1282 0 0 1 4 copy 1 1868  
456 0 0 7 509 1917 1282 0 0 1 6 source 1 1733  
457 0 0 7 509 1917 1282 0 0 1 11 type_handle 1 1905  
458 0 0 7 510 1917 1282 0 0 2 1 n 1 1729  11 type_handle 1 1905  
459 0 0 4 511 1728 0 0 0 1 4 this 3 1917  
460 0 0 6 512 1729 0 0 0 1 4 this 3 1868  
461 0 0 4 513 1728 0 0 0 2 4 this 3 1917  1 x 1 1870  
462 0 0 4 514 1728 0 0 0 1 4 this 3 1917  
463 0 0 6 515 1870 0 0 0 2 4 this 3 1868  1 n 1 1729  
464 0 0 4 516 1728 0 0 0 3 4 this 3 1917  1 n 1 1729  5 value 1 1870  
465 0 0 6 517 1870 0 0 0 2 4 this 3 1868  1 n 1 1729  
466 0 0 4 518 1728 0 0 0 3 4 this 3 1917  1 n 1 1729  5 value 1 1870  
467 0 0 6 519 1733 0 0 0 1 4 this 3 1868  
468 0 0 4 520 1728 0 0 0 2 4 this 3 1917  4 data 1 1733  
469 0 0 6 521 1733 0 0 0 3 4 this 3 1868  1 n 1 1729  5 count 1 1729  
470 0 0 4 522 1728 0 0 0 4 4 this 3 1917  1 n 1 1729  5 count 1 1729  4 data 1 1907  
471 0 0 6 523 1736 0 0 0 1 4 this 3 1868  
472 0 0 6 524 1736 0 0 0 1 4 this 3 1868  
473 0 0 6 525 1729 0 0 0 2 4 this 3 1868  6 param0 0 1870  
474 0 0 6 526 1733 0 0 0 1 4 this 3 1868  
475 0 0 6 527 1736 0 0 0 3 4 this 3 1917  4 view 1 1737  5 flags 1 1736  
476 0 0 4 528 1728 0 0 0 2 4 this 3 1868  4 view 1 1737  
477 0 0 7 531 1918 1303 0 0 1 4 copy 1 1881  
478 0 0 7 531 1918 1303 0 0 1 6 source 1 1733  
479 0 0 7 531 1918 1303 0 0 1 11 type_handle 1 1905  
480 0 0 7 532 1918 1303 0 0 2 1 n 1 1729  11 type_handle 1 1905  
481 0 0 4 533 1728 0 0 0 1 4 this 3 1918  
482 0 0 6 534 1729 0 0 0 1 4 this 3 1881  
483 0 0 4 535 1728 0 0 0 2 4 this 3 1918  1 x 1 1883  
484 0 0 4 536 1728 0 0 0 1 4 this 3 1918  
485 0 0 6 537 1883 0 0 0 2 4 this 3 1881  1 n 1 1729  
486 0 0 4 538 1728 0 0 0 3 4 this 3 1918  1 n 1 1729  5 value 1 1883  
487 0 0 6 539 1883 0 0 0 2 4 this 3 1881  1 n 1 1729  
488 0 0 4 540 1728 0 0 0 3 4 this 3 1918  1 n 1 1729  5 value 1 1883  
489 0 0 6 541 1733 0 0 0 1 4 this 3 1881  
490 0 0 4 542 1728 0 0 0 2 4 this 3 1918  4 data 1 1733  
491 0 0 6 543 1733 0 0 0 3 4 this 3 1881  1 n 1 1729  5 count 1 1729  
492 0 0 4 544 1728 0 0 0 4 4 this 3 1918  1 n 1 1729  5 count 1 1729  4 data 1 1907  
493 0 0 6 545 1736 0 0 0 1 4 this 3 1881  
494 0 0 6 546 1736 0 0 0 1 4 this 3 1881  
495 0 0 6 547 1729 0 0 0 2 4 this 3 1881  6 param0 0 1883  
496 0 0 6 548 1733 0 0 0 1 4 this 3 1881  
497 0 0 6 549 1736 0 0 0 3 4 this 3 1918  4 view 1 1737  5 flags 1 1736  
498 0 0 4 550 1728 0 0 0 2 4 this 3 1881  4 view 1 1737  
499 0 0 7 553 1919 1324 0 0 1 4 copy 1 1894  
500 0 0 7 553 1919 1324 0 0 1 6 source 1 1733  
501 0 0 7 553 1919 1324 0 0 1 11 type_handle 1 1905  
502 0 0 7 554 1919 1324 0 0 2 1 n 1 1729  11 type_handle 1 1905  
503 0 0 4 555 1728 0 0 0 1 4 this 3 1919  
504 0 0 6 556 1729 0 0 0 1 4 this 3 1894  
505 0 0 4 557 1728 0 0 0 2 4 this 3 1919  1 x 1 1896  
506 0 0 4 558 1728 0 0 0 1 4 this 3 1919  
507 0 0 6 559 1896 0 0 0 2 4 this 3 1894  1 n 1 1729  
508 0 0 4 560 1728 0 0 0 3 4 this 3 1919  1 n 1 1729  5 value 1 1896  
509 0 0 6 561 1896 0 0 0 2 4 this 3 1894  1 n 1 1729  
510 0 0 4 562 1728 0 0 0 3 4 this 3 1919  1 n 1 1729  5 value 1 1896  
511 0 0 6 563 1733 0 0 0 1 4 this 3 1894  
512 0 0 4 564 1728 0 0 0 2 4 this 3 1919  4 data 1 1733  
513 0 0 6 565 1733 0 0 0 3 4 this 3 1894  1 n 1 1729  5 count 1 1729  
514 0 0 4 566 1728 0 0 0 4 4 this 3 1919  1 n 1 1729  5 count 1 1729  4 data 1 1907  
515 0 0 6 567 1736 0 0 0 1 4 this 3 1894  
516 0 0 6 568 1736 0 0 0 1 4 this 3 1894  
517 0 0 6 569 1729 0 0 0 2 4 this 3 1894  6 param0 0 1896  
518 0 0 6 570 1733 0 0 0 1 4 this 3 1894  
519 0 0 6 571 1736 0 0 0 3 4 this 3 1919  4 view 1 1737  5 flags 1 1736  
520 0 0 4 572 1728 0 0 0 2 4 this 3 1894  4 view 1 1737  
521 0 0 7 576 1922 1334 0 0 1 4 this 3 1920  
522 0 0 6 577 1742 0 0 253 /**
 * Any kind of volume might be empty.  This is a degenerate volume that
 * contains no points; it's not the same as, for instance, a sphere with
 * radius zero, since that contains one point (the center).  It intersects
 * with no other volumes.
 */ 1 4 this 3 1920  
523 0 0 6 578 1742 0 0 536 /**
 * The other side of the empty coin is an infinite volume.  This is a
 * degenerate state of a normally finite volume that contains all points.
 * (Note that some kinds of infinite bounding volumes, like binary separating
 * planes, do not contain all points and thus correctly return is_infinite()
 * == false, even though they are technically infinite.  This is a special
 * case of the word 'infinite' meaning the volume covers all points in space.)
 *
 * It completely intersects with all other volumes except empty volumes.
 */ 1 4 this 3 1920  
524 0 0 4 579 1728 0 0 135 /**
 * Marks the volume as infinite, even if it is normally finite.  You can think
 * of this as an infinite extend_by() operation.
 */ 1 4 this 3 1922  
525 0 0 6 580 1742 0 0 72 /**
 * Increases the size of the volume to include the given volume.
 */ 2 4 this 3 1922  3 vol 1 1920  
526 0 0 6 582 1736 0 0 128 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */ 2 4 this 3 1920  3 vol 1 1920  
527 0 0 4 583 1728 0 0 0 2 4 this 3 1920  3 out 1 1746  
528 0 0 4 584 1728 0 0 10 /**
 *
 */ 3 4 this 3 1920  3 out 1 1746  12 indent_level 1 1736  
529 0 0 7 586 1905 0 0 0 0 
530 0 0 6 589 1742 0 0 72 /**
 * Increases the size of the volume to include the given volume.
 */ 2 4 this 3 1923  3 vol 1 1648  
531 0 0 6 589 1742 0 0 71 /**
 * Increases the size of the volume to include the given point.
 */ 2 4 this 3 1923  5 point 1 1924  
532 0 0 6 590 1736 0 0 128 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */ 2 4 this 3 1648  3 vol 1 1648  
533 0 0 6 590 1736 0 0 127 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated point.
 */ 2 4 this 3 1648  5 point 1 1924  
534 0 0 6 590 1736 0 0 134 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated line segment.
 */ 3 4 this 3 1648  1 a 1 1924  1 b 1 1924  
535 0 0 7 591 1926 0 0 0 1 4 this 3 1648  
536 0 0 4 592 1728 0 0 0 2 4 this 3 1923  3 mat 1 1927  
537 0 0 7 593 1905 0 0 0 0 
538 0 0 7 596 1926 0 0 0 1 4 this 3 1931  
539 0 0 7 597 1926 0 0 0 1 4 this 3 1931  
540 0 0 6 598 1622 0 0 10 /**
 *
 */ 1 4 this 3 1931  
541 0 0 7 606 1905 0 0 0 0 
542 0 0 7 609 1933 1348 0 56 /**
 * Constructs a meaningless degenerate parabola.
 */ 0 
543 0 0 7 609 1933 1348 0 10 /**
 *
 */ 1 4 copy 1 1934  
544 0 0 7 609 1933 1348 0 139 /**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */ 3 1 a 1 1818  1 b 1 1818  1 c 1 1818  
545 0 0 6 610 1933 0 0 0 2 4 this 3 1933  4 copy 1 1934  
546 0 0 4 612 1728 0 0 59 /**
 * Transforms the parabola by the indicated matrix.
 */ 2 4 this 3 1933  3 mat 1 1936  
547 0 0 6 613 1818 0 0 94 /**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */ 1 4 this 3 1934  
548 0 0 6 614 1818 0 0 99 /**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */ 1 4 this 3 1934  
549 0 0 6 615 1818 0 0 93 /**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */ 1 4 this 3 1934  
550 0 0 7 616 1938 0 0 56 /**
 * Computes the point on the parabola at time t.
 */ 2 4 this 3 1934  1 t 1 1623  
551 0 0 4 617 1728 0 0 10 /**
 *
 */ 2 4 this 3 1934  3 out 1 1746  
552 0 0 4 618 1728 0 0 10 /**
 *
 */ 3 4 this 3 1934  3 out 1 1746  12 indent_level 1 1736  
553 0 0 4 619 1728 0 0 336 /**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */ 2 4 this 3 1934  11 destination 1 1939  
554 0 0 4 620 1728 0 0 116 /**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */ 2 4 this 3 1933  6 source 1 1941  
555 0 0 4 621 1728 0 0 207 /**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */ 2 4 this 3 1934  11 destination 1 1939  
556 0 0 4 622 1728 0 0 69 /**
 * Reads the parabola from the Datagram using get_stdfloat().
 */ 2 4 this 3 1933  6 source 1 1941  
557 0 0 7 624 1943 1362 0 56 /**
 * Constructs a meaningless degenerate parabola.
 */ 0 
558 0 0 7 624 1943 1362 0 10 /**
 *
 */ 1 4 copy 1 1944  
559 0 0 7 624 1943 1362 0 139 /**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */ 3 1 a 1 1805  1 b 1 1805  1 c 1 1805  
560 0 0 6 625 1943 0 0 0 2 4 this 3 1943  4 copy 1 1944  
561 0 0 4 627 1728 0 0 59 /**
 * Transforms the parabola by the indicated matrix.
 */ 2 4 this 3 1943  3 mat 1 1946  
562 0 0 6 628 1805 0 0 94 /**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */ 1 4 this 3 1944  
563 0 0 6 629 1805 0 0 99 /**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */ 1 4 this 3 1944  
564 0 0 6 630 1805 0 0 93 /**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */ 1 4 this 3 1944  
565 0 0 7 631 1950 0 0 56 /**
 * Computes the point on the parabola at time t.
 */ 2 4 this 3 1944  1 t 1 1949  
566 0 0 4 632 1728 0 0 10 /**
 *
 */ 2 4 this 3 1944  3 out 1 1746  
567 0 0 4 633 1728 0 0 10 /**
 *
 */ 3 4 this 3 1944  3 out 1 1746  12 indent_level 1 1736  
568 0 0 4 634 1728 0 0 336 /**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */ 2 4 this 3 1944  11 destination 1 1939  
569 0 0 4 635 1728 0 0 116 /**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */ 2 4 this 3 1943  6 source 1 1941  
570 0 0 4 636 1728 0 0 207 /**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */ 2 4 this 3 1944  11 destination 1 1939  
571 0 0 4 637 1728 0 0 69 /**
 * Reads the parabola from the Datagram using get_stdfloat().
 */ 2 4 this 3 1943  6 source 1 1941  
572 0 0 7 641 1951 1392 0 159 /**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */ 0 
573 0 0 7 641 1951 1392 0 0 1 6 param0 0 1952  
574 0 0 7 641 1951 1392 0 176 /**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */ 3 1 a 1 1954  1 b 1 1954  1 c 1 1954  
575 0 0 7 641 1951 1392 0 10 /**
 *
 */ 1 4 copy 1 1956  
576 0 0 7 641 1951 1392 0 92 /**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */ 2 6 normal 1 1958  5 point 1 1954  
577 0 0 7 641 1951 1392 0 73 /**
 * Constructs a plane given the four terms of the plane equation.
 */ 4 1 a 1 1623  1 b 1 1623  1 c 1 1623  1 d 1 1623  
578 0 0 7 642 1951 1392 0 0 2 4 this 3 1952  3 mat 1 1753  
579 0 0 7 642 1951 1392 0 0 2 4 this 3 1952  3 mat 1 1936  
580 0 0 6 643 1951 0 0 0 2 4 this 3 1951  3 mat 1 1936  
581 0 0 4 644 1728 0 0 56 /**
 * Transforms the plane by the indicated matrix.
 */ 2 4 this 3 1951  3 mat 1 1936  
582 0 0 7 645 1951 1392 0 0 1 4 this 3 1952  
583 0 0 7 646 1961 0 0 121 /**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */ 1 4 this 3 1952  
584 0 0 7 647 1962 0 0 51 /**
 * Returns the surface normal of the plane.
 */ 1 4 this 3 1952  
585 0 0 7 648 1938 0 0 145 /**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */ 1 4 this 3 1952  
586 0 0 6 649 1623 0 0 328 /**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */ 2 4 this 3 1952  5 point 1 1954  
587 0 0 6 650 1742 0 0 139 /**
 * Normalizes the plane in place.  Returns true if the plane was normalized,
 * false if the plane had a zero-length normal vector.
 */ 1 4 this 3 1951  
588 0 0 7 651 1951 1392 0 155 /**
 * Normalizes the plane and returns the normalized plane as a copy.  If the
 * plane's normal was a zero-length vector, the same plane is returned.
 */ 1 4 this 3 1952  
589 0 0 7 652 1938 0 0 86 /**
 * Returns the point within the plane nearest to the indicated point in space.
 */ 2 4 this 3 1952  5 point 1 1954  
590 0 0 4 653 1728 0 0 115 /**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */ 1 4 this 3 1951  
591 0 0 6 654 1742 0 0 325 /**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */ 4 4 this 3 1952  18 intersection_point 1 1938  2 p1 1 1954  2 p2 1 1954  
592 0 0 6 655 1742 0 0 300 /**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */ 4 4 this 3 1952  4 from 1 1938  5 delta 1 1962  5 other 1 1952  
593 0 0 4 657 1728 0 0 10 /**
 *
 */ 2 4 this 3 1952  3 out 1 1746  
594 0 0 4 658 1728 0 0 10 /**
 *
 */ 3 4 this 3 1952  3 out 1 1746  12 indent_level 1 1736  
595 0 0 7 662 1963 1411 0 159 /**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */ 0 
596 0 0 7 662 1963 1411 0 0 1 6 param0 0 1964  
597 0 0 7 662 1963 1411 0 176 /**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */ 3 1 a 1 1965  1 b 1 1965  1 c 1 1965  
598 0 0 7 662 1963 1411 0 10 /**
 *
 */ 1 4 copy 1 1966  
599 0 0 7 662 1963 1411 0 92 /**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */ 2 6 normal 1 1968  5 point 1 1965  
600 0 0 7 662 1963 1411 0 73 /**
 * Constructs a plane given the four terms of the plane equation.
 */ 4 1 a 1 1949  1 b 1 1949  1 c 1 1949  1 d 1 1949  
601 0 0 7 663 1963 1411 0 0 2 4 this 3 1964  3 mat 1 1730  
602 0 0 7 663 1963 1411 0 0 2 4 this 3 1964  3 mat 1 1946  
603 0 0 6 664 1963 0 0 0 2 4 this 3 1963  3 mat 1 1946  
604 0 0 4 665 1728 0 0 56 /**
 * Transforms the plane by the indicated matrix.
 */ 2 4 this 3 1963  3 mat 1 1946  
605 0 0 7 666 1963 1411 0 0 1 4 this 3 1964  
606 0 0 7 667 1971 0 0 121 /**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */ 1 4 this 3 1964  
607 0 0 7 668 1972 0 0 51 /**
 * Returns the surface normal of the plane.
 */ 1 4 this 3 1964  
608 0 0 7 669 1950 0 0 145 /**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */ 1 4 this 3 1964  
609 0 0 6 670 1949 0 0 328 /**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */ 2 4 this 3 1964  5 point 1 1965  
610 0 0 6 671 1742 0 0 139 /**
 * Normalizes the plane in place.  Returns true if the plane was normalized,
 * false if the plane had a zero-length normal vector.
 */ 1 4 this 3 1963  
611 0 0 7 672 1963 1411 0 155 /**
 * Normalizes the plane and returns the normalized plane as a copy.  If the
 * plane's normal was a zero-length vector, the same plane is returned.
 */ 1 4 this 3 1964  
612 0 0 7 673 1950 0 0 86 /**
 * Returns the point within the plane nearest to the indicated point in space.
 */ 2 4 this 3 1964  5 point 1 1965  
613 0 0 4 674 1728 0 0 115 /**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */ 1 4 this 3 1963  
614 0 0 6 675 1742 0 0 325 /**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */ 4 4 this 3 1964  18 intersection_point 1 1950  2 p1 1 1965  2 p2 1 1965  
615 0 0 6 676 1742 0 0 300 /**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */ 4 4 this 3 1964  4 from 1 1950  5 delta 1 1972  5 other 1 1964  
616 0 0 4 678 1728 0 0 10 /**
 *
 */ 2 4 this 3 1964  3 out 1 1746  
617 0 0 4 679 1728 0 0 10 /**
 *
 */ 3 4 this 3 1964  3 out 1 1746  12 indent_level 1 1736  
618 0 0 7 686 1973 1422 0 42 /**
 * Constructs an empty box object.
 */ 0 
619 0 0 7 686 1973 1422 0 44 /**
 * Constructs a specific box object.
 */ 2 3 min 1 1924  3 max 1 1924  
620 0 0 4 687 1728 0 0 0 2 4 this 3 1973  4 size 1 1974  
621 0 0 6 690 1736 0 0 68 /**
 * Returns 8: the number of vertices of a rectangular solid.
 */ 1 4 this 3 1975  
622 0 0 7 691 1926 0 0 59 /**
 * Returns the nth vertex of the rectangular solid.
 */ 2 4 this 3 1975  1 n 1 1736  
623 0 0 6 693 1736 0 0 65 /**
 * Returns 6: the number of faces of a rectangular solid.
 */ 1 4 this 3 1975  
624 0 0 7 694 1977 0 0 57 /**
 * Returns the nth face of the rectangular solid.
 */ 2 4 this 3 1975  1 n 1 1736  
625 0 0 4 698 1728 0 0 63 /**
 * Sets the min and max point of the rectangular solid.
 */ 3 4 this 3 1973  3 min 1 1924  3 max 1 1924  
626 0 0 7 699 1905 0 0 0 0 
627 0 0 7 702 1978 1430 0 10 /**
 *
 */ 0 
628 0 0 7 702 1978 1430 0 0 1 6 param0 0 1979  
629 0 0 4 703 1728 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 1 4 this 3 1978  
630 0 0 4 703 1728 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 5 4 this 3 1978  1 l 1 1623  1 r 1 1623  1 t 1 1623  1 b 1 1623  
631 0 0 4 704 1728 0 0 32 /**
 * Behaves like gluOrtho
 */ 3 4 this 3 1978  5 fnear 1 1623  4 ffar 1 1623  
632 0 0 4 704 1728 0 0 32 /**
 * Behaves like gluOrtho
 */ 7 4 this 3 1978  5 fnear 1 1623  4 ffar 1 1623  1 l 1 1623  1 r 1 1623  1 t 1 1623  1 b 1 1623  
633 0 0 4 705 1728 0 0 238 /**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */ 5 4 this 3 1978  4 xfov 1 1623  6 aspect 1 1623  5 fnear 1 1623  4 ffar 1 1623  
634 0 0 4 706 1728 0 0 0 5 4 this 3 1978  4 yfov 1 1623  6 aspect 1 1623  5 fnear 1 1623  4 ffar 1 1623  
635 0 0 4 707 1728 0 0 0 5 4 this 3 1978  4 xfov 1 1623  4 yfov 1 1623  5 fnear 1 1623  4 ffar 1 1623  
636 0 0 7 711 1981 1438 0 10 /**
 *
 */ 0 
637 0 0 7 711 1981 1438 0 0 1 6 param0 0 1982  
638 0 0 4 712 1728 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 1 4 this 3 1981  
639 0 0 4 712 1728 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 5 4 this 3 1981  1 l 1 1949  1 r 1 1949  1 t 1 1949  1 b 1 1949  
640 0 0 4 713 1728 0 0 32 /**
 * Behaves like gluOrtho
 */ 3 4 this 3 1981  5 fnear 1 1949  4 ffar 1 1949  
641 0 0 4 713 1728 0 0 32 /**
 * Behaves like gluOrtho
 */ 7 4 this 3 1981  5 fnear 1 1949  4 ffar 1 1949  1 l 1 1949  1 r 1 1949  1 t 1 1949  1 b 1 1949  
642 0 0 4 714 1728 0 0 238 /**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */ 5 4 this 3 1981  4 xfov 1 1949  6 aspect 1 1949  5 fnear 1 1949  4 ffar 1 1949  
643 0 0 4 715 1728 0 0 0 5 4 this 3 1981  4 yfov 1 1949  6 aspect 1 1949  5 fnear 1 1949  4 ffar 1 1949  
644 0 0 4 716 1728 0 0 0 5 4 this 3 1981  4 xfov 1 1949  4 yfov 1 1949  5 fnear 1 1949  4 ffar 1 1949  
645 0 0 7 724 1987 1445 0 10 /**
 *
 */ 3 7 frustum 1 1984  8 is_ortho 1 1742  2 cs 1 1986  
646 0 0 7 724 1987 1445 0 10 /**
 *
 */ 8 3 fll 1 1924  3 flr 1 1924  3 fur 1 1924  3 ful 1 1924  3 nll 1 1924  3 nlr 1 1924  3 nur 1 1924  3 nul 1 1924  
647 0 0 6 725 1736 0 0 61 /**
 * Returns 8: the number of vertices of a hexahedron.
 */ 1 4 this 3 1988  
648 0 0 7 726 1926 0 0 52 /**
 * Returns the nth vertex of the hexahedron.
 */ 2 4 this 3 1988  1 n 1 1736  
649 0 0 6 728 1736 0 0 58 /**
 * Returns 6: the number of faces of a hexahedron.
 */ 1 4 this 3 1988  
650 0 0 7 729 1977 0 0 50 /**
 * Returns the nth face of the hexahedron.
 */ 2 4 this 3 1988  1 n 1 1736  
651 0 0 7 733 1905 0 0 0 0 
652 0 0 7 736 1990 1453 0 10 /**
 *
 */ 2 1 a 1 1924  1 b 1 1924  
653 0 0 4 737 1728 0 0 0 2 4 this 3 1990  4 size 1 1974  
654 0 0 6 740 1924 0 0 57 /**
 * Returns the first point that defines the line.
 */ 1 4 this 3 1991  
655 0 0 7 741 1926 0 0 58 /**
 * Returns the second point that defines the line.
 */ 1 4 this 3 1991  
656 0 0 7 742 1905 0 0 0 0 
657 0 0 7 745 1993 1460 0 65 /**
 * Constructs an empty "plane" that has no intersections.
 */ 0 
658 0 0 7 745 1993 1460 0 10 /**
 *
 */ 1 5 plane 1 1994  
659 0 0 4 746 1728 0 0 0 2 4 this 3 1993  4 size 1 1974  
660 0 0 6 749 1994 0 0 10 /**
 *
 */ 1 4 this 3 1995  
661 0 0 7 752 1905 0 0 0 0 
662 0 0 7 755 1997 1470 0 38 /**
 * Constructs an empty sphere.
 */ 0 
663 0 0 7 755 1997 1470 0 40 /**
 * Constructs a specific sphere.
 */ 2 6 center 1 1924  6 radius 1 1622  
664 0 0 4 756 1728 0 0 0 2 4 this 3 1997  4 size 1 1974  
665 0 0 7 759 1926 0 0 10 /**
 *
 */ 1 4 this 3 1998  
666 0 0 6 760 1622 0 0 10 /**
 *
 */ 1 4 this 3 1998  
667 0 0 4 761 1728 0 0 47 /**
 * Sets the center point of the sphere.
 */ 2 4 this 3 1997  6 center 1 1924  
668 0 0 4 762 1728 0 0 41 /**
 * Sets the radius of the sphere.
 */ 2 4 this 3 1997  6 radius 1 1622  
669 0 0 7 765 1905 0 0 0 0 
670 0 0 7 768 2000 1480 0 44 /**
 * Constructs an empty intersection.
 */ 0 
671 0 0 4 769 1728 0 0 0 2 4 this 3 2000  4 size 1 1974  
672 0 0 6 772 1736 0 0 64 /**
 * Returns the number of components in the intersection.
 */ 1 4 this 3 2001  
673 0 0 7 773 1648 0 0 57 /**
 * Returns the nth component in the intersection.
 */ 2 4 this 3 2001  1 n 1 1736  
674 0 0 4 778 1728 0 0 50 /**
 * Removes all components from the volume.
 */ 1 4 this 3 2000  
675 0 0 4 779 1728 0 0 373 /**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */ 2 4 this 3 2000  9 component 1 1648  
676 0 0 7 780 1905 0 0 0 0 
677 0 0 7 785 2005 1485 0 0 1 6 param0 0 2003  
678 0 0 7 785 2005 1485 0 35 /* initializes mt[N] with a seed */ 1 4 seed 1 2006  
679 0 0 6 786 2006 0 0 58 /* generates a random number on [0,0x7fffffff]-interval */ 1 4 this 3 2005  
680 0 0 7 790 2007 1488 0 10 /**
 *
 */ 0 
681 0 0 7 791 1905 0 0 0 0 
682 0 0 7 794 2008 1499 0 37 /**
 * Constructs an empty union.
 */ 0 
683 0 0 4 795 1728 0 0 0 2 4 this 3 2008  4 size 1 1974  
684 0 0 6 798 1736 0 0 57 /**
 * Returns the number of components in the union.
 */ 1 4 this 3 2009  
685 0 0 7 799 1648 0 0 50 /**
 * Returns the nth component in the union.
 */ 2 4 this 3 2009  1 n 1 1736  
686 0 0 4 802 1728 0 0 50 /**
 * Removes all components from the volume.
 */ 1 4 this 3 2008  
687 0 0 4 803 1728 0 0 373 /**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */ 2 4 this 3 2008  9 component 1 1648  
688 0 0 4 804 1728 0 0 104 /**
 * Removes from the union any components that have no intersection with the
 * indicated volume.
 */ 2 4 this 3 2008  6 volume 1 1920  
689 0 0 7 805 1905 0 0 0 0 
690 0 0 7 808 2013 1507 0 10 /**
 *
 */ 1 4 copy 1 2011  
691 0 0 7 808 2013 1507 0 108 /**
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 1 4 seed 1 2006  
692 0 0 6 809 2013 0 0 0 2 4 this 3 2013  4 copy 1 2011  
693 0 0 6 810 1736 0 0 60 /**
 * Returns a random integer in the range [0, range).
 */ 2 4 this 3 2013  5 range 1 1736  
694 0 0 6 811 1949 0 0 59 /**
 * Returns a random double in the range [0, range).
 */ 2 4 this 3 2013  5 range 1 1949  
695 0 0 6 812 1949 0 0 60 /**
 * Returns a random double in the range [-0.5, 0.5).
 */ 1 4 this 3 2013  
696 0 0 6 813 2006 0 0 77 /**
 * Returns a random seed value for the next global Randomizer object.
 */ 0 
697 0 0 6 814 2006 0 0 126 /**
 * Returns a unique seed value based on the seed value passed to this
 * Randomizer object (and on its current state).
 */ 1 4 this 3 2013  
698 0 0 6 817 2006 0 0 127 /**
 * Returns a unique seed value based on the seed value passed to this
 * PerlinNoise object (and on its current state).
 */ 1 4 this 3 2014  
699 0 0 7 820 2015 1515 0 131 /**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */ 0 
700 0 0 7 820 2015 1515 0 96 /**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */ 1 4 copy 1 2016  
701 0 0 7 820 2015 1515 0 169 /**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 4 2 sx 1 1949  2 sy 1 1949  10 table_size 1 1736  4 seed 1 2006  
702 0 0 6 821 2015 0 0 0 2 4 this 3 2015  4 copy 1 2016  
703 0 0 4 822 1728 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 2015  5 scale 1 1766  
704 0 0 4 822 1728 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 2015  5 scale 1 1779  
705 0 0 4 822 1728 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 2015  5 scale 1 1949  
706 0 0 4 822 1728 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 3 4 this 3 2015  2 sx 1 1949  2 sy 1 1949  
707 0 0 6 823 1949 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2016  5 value 1 1766  
708 0 0 6 823 1623 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2016  5 value 1 1779  
709 0 0 6 823 1949 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 3 4 this 3 2016  1 x 1 1949  1 y 1 1949  
710 0 0 6 824 1949 0 0 0 2 4 this 3 2016  5 value 1 1766  
711 0 0 6 824 1623 0 0 0 2 4 this 3 2016  5 value 1 1779  
712 0 0 6 824 1949 0 0 0 3 4 this 3 2016  1 x 1 1949  1 y 1 1949  
713 0 0 7 827 2018 1521 0 131 /**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */ 0 
714 0 0 7 827 2018 1521 0 96 /**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */ 1 4 copy 1 2019  
715 0 0 7 827 2018 1521 0 169 /**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 5 2 sx 1 1949  2 sy 1 1949  2 sz 1 1949  10 table_size 1 1736  4 seed 1 2006  
716 0 0 6 828 2018 0 0 0 2 4 this 3 2018  4 copy 1 2019  
717 0 0 4 829 1728 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 2018  5 scale 1 1805  
718 0 0 4 829 1728 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 2018  5 scale 1 1818  
719 0 0 4 829 1728 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 2018  5 scale 1 1949  
720 0 0 4 829 1728 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 4 4 this 3 2018  2 sx 1 1949  2 sy 1 1949  2 sz 1 1949  
721 0 0 6 830 1949 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2019  5 value 1 1805  
722 0 0 6 830 1623 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2019  5 value 1 1818  
723 0 0 6 830 1949 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 4 4 this 3 2019  1 x 1 1949  1 y 1 1949  1 z 1 1949  
724 0 0 6 831 1949 0 0 0 2 4 this 3 2019  5 value 1 1805  
725 0 0 6 831 1623 0 0 0 2 4 this 3 2019  5 value 1 1818  
726 0 0 6 831 1949 0 0 0 4 4 this 3 2019  1 x 1 1949  1 y 1 1949  1 z 1 1949  
727 0 0 7 891 2021 1529 0 122 /**
 * Creates a StackedPerlinNoise2 object with no levels.  You should call
 * add_level() to add each level by hand.
 */ 0 
728 0 0 7 891 2021 1529 0 111 /**
 * Creates an exact duplicate of the existing StackedPerlinNoise2 object,
 * including the random seed.
 */ 1 4 copy 1 2022  
729 0 0 7 891 2021 1529 0 318 /**
 * Creates num_levels nested PerlinNoise2 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */ 7 2 sx 1 1949  2 sy 1 1949  10 num_levels 1 1736  12 scale_factor 1 1949  9 amp_scale 1 1949  10 table_size 1 1736  4 seed 1 2006  
730 0 0 6 892 2021 0 0 0 2 4 this 3 2021  4 copy 1 2022  
731 0 0 4 893 1728 0 0 95 /**
 * Adds an arbitrary PerlinNoise2 object, and an associated amplitude, to the
 * stack.
 */ 3 4 this 3 2021  5 level 1 2016  3 amp 1 1949  
732 0 0 4 894 1728 0 0 98 /**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */ 1 4 this 3 2021  
733 0 0 6 895 1949 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2021  5 value 1 1766  
734 0 0 6 895 1623 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2021  5 value 1 1779  
735 0 0 6 895 1949 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 3 4 this 3 2021  1 x 1 1949  1 y 1 1949  
736 0 0 6 896 1949 0 0 0 2 4 this 3 2021  5 value 1 1766  
737 0 0 6 896 1623 0 0 0 2 4 this 3 2021  5 value 1 1779  
738 0 0 6 896 1949 0 0 0 3 4 this 3 2021  1 x 1 1949  1 y 1 1949  
739 0 0 7 899 2024 1536 0 122 /**
 * Creates a StackedPerlinNoise3 object with no levels.  You should call
 * add_level() to add each level by hand.
 */ 0 
740 0 0 7 899 2024 1536 0 111 /**
 * Creates an exact duplicate of the existing StackedPerlinNoise3 object,
 * including the random seed.
 */ 1 4 copy 1 2025  
741 0 0 7 899 2024 1536 0 318 /**
 * Creates num_levels nested PerlinNoise3 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */ 8 2 sx 1 1949  2 sy 1 1949  2 sz 1 1949  10 num_levels 1 1736  12 scale_factor 1 1949  9 amp_scale 1 1949  10 table_size 1 1736  4 seed 1 2006  
742 0 0 6 900 2024 0 0 0 2 4 this 3 2024  4 copy 1 2025  
743 0 0 4 901 1728 0 0 95 /**
 * Adds an arbitrary PerlinNoise3 object, and an associated amplitude, to the
 * stack.
 */ 3 4 this 3 2024  5 level 1 2019  3 amp 1 1949  
744 0 0 4 902 1728 0 0 98 /**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */ 1 4 this 3 2024  
745 0 0 6 903 1949 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2024  5 value 1 1805  
746 0 0 6 903 1623 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 2024  5 value 1 1818  
747 0 0 6 903 1949 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 4 4 this 3 2024  1 x 1 1949  1 y 1 1949  1 z 1 1949  
748 0 0 6 904 1949 0 0 0 2 4 this 3 2024  5 value 1 1805  
749 0 0 6 904 1623 0 0 0 2 4 this 3 2024  5 value 1 1818  
750 0 0 6 904 1949 0 0 0 4 4 this 3 2024  1 x 1 1949  1 y 1 1949  1 z 1 1949  
751 0 0 7 907 2027 1552 0 10 /**
 *
 */ 0 
752 0 0 7 907 2027 1552 0 0 1 6 param0 0 2028  
753 0 0 4 908 1728 0 0 115 /**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */ 1 4 this 3 2027  
754 0 0 6 909 1736 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 2 4 this 3 2027  5 point 1 2030  
755 0 0 6 909 1736 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 3 4 this 3 2027  1 x 1 1949  1 y 1 1949  
756 0 0 6 910 1736 0 0 267 /**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */ 1 4 this 3 2028  
757 0 0 6 911 2030 0 0 34 /**
 * Returns the nth vertex.
 */ 2 4 this 3 2028  1 n 1 1736  
758 0 0 4 916 1728 0 0 112 /**
 * Removes the current polygon definition (and its set of holes), but does not
 * clear the vertex pool.
 */ 1 4 this 3 2027  
759 0 0 4 917 1728 0 0 334 /**
 * Adds the next consecutive vertex of the polygon.  This vertex should index
 * into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.  In particular, do not repeat the first
 * vertex at the end.
 */ 2 4 this 3 2027  5 index 1 1736  
760 0 0 6 918 1742 0 0 145 /**
 * Returns true if the polygon vertices are listed in counterclockwise order,
 * or false if they appear to be listed in clockwise order.
 */ 1 4 this 3 2028  
761 0 0 4 919 1728 0 0 78 /**
 * Finishes the previous hole, if any, and prepares to add a new hole.
 */ 1 4 this 3 2027  
762 0 0 4 920 1728 0 0 277 /**
 * Adds the next consecutive vertex of the current hole.  This vertex should
 * index into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.
 */ 2 4 this 3 2027  5 index 1 1736  
763 0 0 4 921 1728 0 0 181 /**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */ 1 4 this 3 2027  
764 0 0 6 922 1736 0 0 94 /**
 * Returns the number of triangles generated by the previous call to
 * triangulate().
 */ 1 4 this 3 2028  
765 0 0 6 923 1736 0 0 194 /**
 * Returns vertex 0 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 2028  1 n 1 1736  
766 0 0 6 924 1736 0 0 194 /**
 * Returns vertex 1 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 2028  1 n 1 1736  
767 0 0 6 925 1736 0 0 194 /**
 * Returns vertex 2 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 2028  1 n 1 1736  
768 0 0 7 928 2031 1560 0 10 /**
 *
 */ 0 
769 0 0 7 928 2031 1560 0 0 1 6 param0 0 2032  
770 0 0 4 929 1728 0 0 115 /**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */ 1 4 this 3 2031  
771 0 0 6 930 1736 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 2 4 this 3 2031  5 point 1 1965  
772 0 0 6 930 1736 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 4 4 this 3 2031  1 x 1 1949  1 y 1 1949  1 z 1 1949  
773 0 0 6 931 1736 0 0 267 /**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */ 1 4 this 3 2032  
774 0 0 6 932 1965 0 0 34 /**
 * Returns the nth vertex.
 */ 2 4 this 3 2032  1 n 1 1736  
775 0 0 4 934 1728 0 0 181 /**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */ 1 4 this 3 2031  
776 0 0 6 935 1964 0 0 100 /**
 * Returns the plane of the polygon.  This is only available after calling
 * triangulate().
 */ 1 4 this 3 2032  
777 0 0 4 782 1728 0 0 0 3 3 mat 1 2034  3 fwd 1 1968  2 cs 1 1986  
778 0 0 4 782 1728 0 0 0 4 3 mat 1 2034  3 fwd 1 1968  2 up 1 1968  2 cs 1 1986  
779 0 0 4 782 1728 0 0 0 3 3 mat 1 2035  3 fwd 1 1958  2 cs 1 1986  
780 0 0 4 782 1728 0 0 0 4 3 mat 1 2035  3 fwd 1 1958  2 up 1 1958  2 cs 1 1986  
781 0 0 4 782 1728 0 0 0 3 3 mat 1 1971  3 fwd 1 1968  2 cs 1 1986  
782 0 0 4 782 1728 0 0 0 4 3 mat 1 1971  3 fwd 1 1968  2 up 1 1968  2 cs 1 1986  
783 0 0 4 782 1728 0 0 0 3 3 mat 1 1961  3 fwd 1 1958  2 cs 1 1986  
784 0 0 4 782 1728 0 0 0 4 3 mat 1 1961  3 fwd 1 1958  2 up 1 1958  2 cs 1 1986  
785 0 0 4 782 1728 0 0 0 3 4 quat 1 2036  3 fwd 1 1968  2 cs 1 1986  
786 0 0 4 782 1728 0 0 0 4 4 quat 1 2036  3 fwd 1 1968  2 up 1 1968  2 cs 1 1986  
787 0 0 4 782 1728 0 0 0 3 4 quat 1 2038  3 fwd 1 1958  2 cs 1 1986  
788 0 0 4 782 1728 0 0 0 4 4 quat 1 2038  3 fwd 1 1958  2 up 1 1958  2 cs 1 1986  
789 0 0 4 783 1728 0 0 0 3 3 mat 1 2034  3 fwd 1 1968  2 cs 1 1986  
790 0 0 4 783 1728 0 0 0 4 3 mat 1 2034  3 fwd 1 1968  2 up 1 1968  2 cs 1 1986  
791 0 0 4 783 1728 0 0 0 3 3 mat 1 2035  3 fwd 1 1958  2 cs 1 1986  
792 0 0 4 783 1728 0 0 0 4 3 mat 1 2035  3 fwd 1 1958  2 up 1 1958  2 cs 1 1986  
793 0 0 4 783 1728 0 0 0 3 3 mat 1 1971  3 fwd 1 1968  2 cs 1 1986  
794 0 0 4 783 1728 0 0 0 4 3 mat 1 1971  3 fwd 1 1968  2 up 1 1968  2 cs 1 1986  
795 0 0 4 783 1728 0 0 0 3 3 mat 1 1961  3 fwd 1 1958  2 cs 1 1986  
796 0 0 4 783 1728 0 0 0 4 3 mat 1 1961  3 fwd 1 1958  2 up 1 1958  2 cs 1 1986  
797 0 0 4 783 1728 0 0 0 3 4 quat 1 2036  3 fwd 1 1968  2 cs 1 1986  
798 0 0 4 783 1728 0 0 0 4 4 quat 1 2036  3 fwd 1 1968  2 up 1 1968  2 cs 1 1986  
799 0 0 4 783 1728 0 0 0 3 4 quat 1 2038  3 fwd 1 1958  2 cs 1 1986  
800 0 0 4 783 1728 0 0 0 4 4 quat 1 2038  3 fwd 1 1958  2 up 1 1958  2 cs 1 1986  
801 0 0 4 889 1728 0 0 0 3 3 mat 1 2034  1 a 1 1968  1 b 1 1968  
802 0 0 4 889 1728 0 0 0 3 3 mat 1 2035  1 a 1 1958  1 b 1 1958  
803 0 0 4 889 1728 0 0 0 3 3 mat 1 1971  1 a 1 1968  1 b 1 1968  
804 0 0 4 889 1728 0 0 0 3 3 mat 1 1961  1 a 1 1958  1 b 1 1958  
479
1561 32 ConstPointerToArray< LMatrix3d > 0 141313 32 ConstPointerToArray< LMatrix3d > 32 ConstPointerToArray< LMatrix3d > 0 0 0 1 810 823 0 12 811 812 813 814 815 816 817 818 819 820 821 822 0 0 1 0 1562 0 0 0 0 0

1562 31 PointerToArrayBase< LMatrix3d > 0 26625 31 PointerToArrayBase< LMatrix3d > 31 PointerToArrayBase< LMatrix3d > 0 0 0 0 807 0 2 808 809 0 0 1 0 1563 0 0 0 0 0

1563 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 0 0 0 0 0 2 805 806 0 0 1 0 1564 0 0 0 0 0

1564 13 PointerToVoid 0 2048 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1565 32 ConstPointerToArray< LMatrix3f > 0 141313 32 ConstPointerToArray< LMatrix3f > 32 ConstPointerToArray< LMatrix3f > 0 0 0 1 829 842 0 12 830 831 832 833 834 835 836 837 838 839 840 841 0 0 1 0 1566 0 0 0 0 0

1566 31 PointerToArrayBase< LMatrix3f > 0 26625 31 PointerToArrayBase< LMatrix3f > 31 PointerToArrayBase< LMatrix3f > 0 0 0 0 826 0 2 827 828 0 0 1 0 1567 0 0 0 0 0

1567 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 0 0 0 0 0 2 824 825 0 0 1 0 1564 0 0 0 0 0

1568 33 ConstPointerToArray< LVecBase2d > 0 141313 33 ConstPointerToArray< LVecBase2d > 33 ConstPointerToArray< LVecBase2d > 0 0 0 1 848 861 0 12 849 850 851 852 853 854 855 856 857 858 859 860 0 0 1 0 1569 0 0 0 0 0

1569 32 PointerToArrayBase< LVecBase2d > 0 26625 32 PointerToArrayBase< LVecBase2d > 32 PointerToArrayBase< LVecBase2d > 0 0 0 0 845 0 2 846 847 0 0 1 0 1570 0 0 0 0 0

1570 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 0 0 0 0 0 2 843 844 0 0 1 0 1564 0 0 0 0 0

1571 33 ConstPointerToArray< LVecBase2f > 0 141313 33 ConstPointerToArray< LVecBase2f > 33 ConstPointerToArray< LVecBase2f > 0 0 0 1 867 880 0 12 868 869 870 871 872 873 874 875 876 877 878 879 0 0 1 0 1572 0 0 0 0 0

1572 32 PointerToArrayBase< LVecBase2f > 0 26625 32 PointerToArrayBase< LVecBase2f > 32 PointerToArrayBase< LVecBase2f > 0 0 0 0 864 0 2 865 866 0 0 1 0 1573 0 0 0 0 0

1573 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 0 0 0 0 0 2 862 863 0 0 1 0 1564 0 0 0 0 0

1574 33 ConstPointerToArray< LVecBase2i > 0 141313 33 ConstPointerToArray< LVecBase2i > 33 ConstPointerToArray< LVecBase2i > 0 0 0 1 886 899 0 12 887 888 889 890 891 892 893 894 895 896 897 898 0 0 1 0 1575 0 0 0 0 0

1575 32 PointerToArrayBase< LVecBase2i > 0 26625 32 PointerToArrayBase< LVecBase2i > 32 PointerToArrayBase< LVecBase2i > 0 0 0 0 883 0 2 884 885 0 0 1 0 1576 0 0 0 0 0

1576 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 0 0 0 0 0 2 881 882 0 0 1 0 1564 0 0 0 0 0

1577 33 ConstPointerToArray< LVecBase3d > 0 141313 33 ConstPointerToArray< LVecBase3d > 33 ConstPointerToArray< LVecBase3d > 0 0 0 1 905 918 0 12 906 907 908 909 910 911 912 913 914 915 916 917 0 0 1 0 1578 0 0 0 0 0

1578 32 PointerToArrayBase< LVecBase3d > 0 26625 32 PointerToArrayBase< LVecBase3d > 32 PointerToArrayBase< LVecBase3d > 0 0 0 0 902 0 2 903 904 0 0 1 0 1579 0 0 0 0 0

1579 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 0 0 0 0 0 2 900 901 0 0 1 0 1564 0 0 0 0 0

1580 33 ConstPointerToArray< LVecBase3f > 0 141313 33 ConstPointerToArray< LVecBase3f > 33 ConstPointerToArray< LVecBase3f > 0 0 0 1 924 937 0 12 925 926 927 928 929 930 931 932 933 934 935 936 0 0 1 0 1581 0 0 0 0 0

1581 32 PointerToArrayBase< LVecBase3f > 0 26625 32 PointerToArrayBase< LVecBase3f > 32 PointerToArrayBase< LVecBase3f > 0 0 0 0 921 0 2 922 923 0 0 1 0 1582 0 0 0 0 0

1582 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 0 0 0 0 0 2 919 920 0 0 1 0 1564 0 0 0 0 0

1583 33 ConstPointerToArray< LVecBase3i > 0 141313 33 ConstPointerToArray< LVecBase3i > 33 ConstPointerToArray< LVecBase3i > 0 0 0 1 943 956 0 12 944 945 946 947 948 949 950 951 952 953 954 955 0 0 1 0 1584 0 0 0 0 0

1584 32 PointerToArrayBase< LVecBase3i > 0 26625 32 PointerToArrayBase< LVecBase3i > 32 PointerToArrayBase< LVecBase3i > 0 0 0 0 940 0 2 941 942 0 0 1 0 1585 0 0 0 0 0

1585 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 0 0 0 0 0 2 938 939 0 0 1 0 1564 0 0 0 0 0

1586 41 ConstPointerToArray< UnalignedLMatrix4d > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4d > 41 ConstPointerToArray< UnalignedLMatrix4d > 0 0 0 1 962 975 0 12 963 964 965 966 967 968 969 970 971 972 973 974 0 0 1 0 1587 0 0 0 0 0

1587 40 PointerToArrayBase< UnalignedLMatrix4d > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4d > 40 PointerToArrayBase< UnalignedLMatrix4d > 0 0 0 0 959 0 2 960 961 0 0 1 0 1588 0 0 0 0 0

1588 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 0 0 0 0 0 2 957 958 0 0 1 0 1564 0 0 0 0 0

1589 41 ConstPointerToArray< UnalignedLMatrix4f > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4f > 41 ConstPointerToArray< UnalignedLMatrix4f > 0 0 0 1 981 994 0 12 982 983 984 985 986 987 988 989 990 991 992 993 0 0 1 0 1590 0 0 0 0 0

1590 40 PointerToArrayBase< UnalignedLMatrix4f > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4f > 40 PointerToArrayBase< UnalignedLMatrix4f > 0 0 0 0 978 0 2 979 980 0 0 1 0 1591 0 0 0 0 0

1591 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 0 0 0 0 0 2 976 977 0 0 1 0 1564 0 0 0 0 0

1592 42 ConstPointerToArray< UnalignedLVecBase4d > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4d > 42 ConstPointerToArray< UnalignedLVecBase4d > 0 0 0 1 1000 1013 0 12 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 0 0 1 0 1593 0 0 0 0 0

1593 41 PointerToArrayBase< UnalignedLVecBase4d > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4d > 41 PointerToArrayBase< UnalignedLVecBase4d > 0 0 0 0 997 0 2 998 999 0 0 1 0 1594 0 0 0 0 0

1594 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 0 0 0 0 0 2 995 996 0 0 1 0 1564 0 0 0 0 0

1595 42 ConstPointerToArray< UnalignedLVecBase4f > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4f > 42 ConstPointerToArray< UnalignedLVecBase4f > 0 0 0 1 1019 1032 0 12 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 0 0 1 0 1596 0 0 0 0 0

1596 41 PointerToArrayBase< UnalignedLVecBase4f > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4f > 41 PointerToArrayBase< UnalignedLVecBase4f > 0 0 0 0 1016 0 2 1017 1018 0 0 1 0 1597 0 0 0 0 0

1597 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 0 0 0 0 0 2 1014 1015 0 0 1 0 1564 0 0 0 0 0

1598 42 ConstPointerToArray< UnalignedLVecBase4i > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4i > 42 ConstPointerToArray< UnalignedLVecBase4i > 0 0 0 1 1038 1051 0 12 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 0 0 1 0 1599 0 0 0 0 0

1599 41 PointerToArrayBase< UnalignedLVecBase4i > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4i > 41 PointerToArrayBase< UnalignedLVecBase4i > 0 0 0 0 1035 0 2 1036 1037 0 0 1 0 1600 0 0 0 0 0

1600 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 0 0 0 0 0 2 1033 1034 0 0 1 0 1564 0 0 0 0 0

1601 27 PointerToArray< LMatrix3d > 0 141313 27 PointerToArray< LMatrix3d > 27 PointerToArray< LMatrix3d > 0 0 0 1 1052 1072 0 19 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 0 0 1 0 1562 0 0 0 0 0

1602 27 PointerToArray< LMatrix3f > 0 141313 27 PointerToArray< LMatrix3f > 27 PointerToArray< LMatrix3f > 0 0 0 1 1073 1093 0 19 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 0 0 1 0 1566 0 0 0 0 0

1603 28 PointerToArray< LVecBase2d > 0 141313 28 PointerToArray< LVecBase2d > 28 PointerToArray< LVecBase2d > 0 0 0 1 1094 1114 0 19 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 0 0 1 0 1569 0 0 0 0 0

1604 28 PointerToArray< LVecBase2f > 0 141313 28 PointerToArray< LVecBase2f > 28 PointerToArray< LVecBase2f > 0 0 0 1 1115 1135 0 19 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 0 0 1 0 1572 0 0 0 0 0

1605 28 PointerToArray< LVecBase2i > 0 141313 28 PointerToArray< LVecBase2i > 28 PointerToArray< LVecBase2i > 0 0 0 1 1136 1156 0 19 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 0 0 1 0 1575 0 0 0 0 0

1606 28 PointerToArray< LVecBase3d > 0 141313 28 PointerToArray< LVecBase3d > 28 PointerToArray< LVecBase3d > 0 0 0 1 1157 1177 0 19 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 0 0 1 0 1578 0 0 0 0 0

1607 28 PointerToArray< LVecBase3f > 0 141313 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 1 1178 1198 0 19 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 0 0 1 0 1581 0 0 0 0 0

1608 28 PointerToArray< LVecBase3i > 0 141313 28 PointerToArray< LVecBase3i > 28 PointerToArray< LVecBase3i > 0 0 0 1 1199 1219 0 19 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 0 0 1 0 1584 0 0 0 0 0

1609 36 PointerToArray< UnalignedLMatrix4d > 0 141313 36 PointerToArray< UnalignedLMatrix4d > 36 PointerToArray< UnalignedLMatrix4d > 0 0 0 1 1220 1240 0 19 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 0 0 1 0 1587 0 0 0 0 0

1610 36 PointerToArray< UnalignedLMatrix4f > 0 141313 36 PointerToArray< UnalignedLMatrix4f > 36 PointerToArray< UnalignedLMatrix4f > 0 0 0 1 1241 1261 0 19 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 0 0 1 0 1590 0 0 0 0 0

1611 37 PointerToArray< UnalignedLVecBase4d > 0 141313 37 PointerToArray< UnalignedLVecBase4d > 37 PointerToArray< UnalignedLVecBase4d > 0 0 0 1 1262 1282 0 19 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 0 0 1 0 1593 0 0 0 0 0

1612 37 PointerToArray< UnalignedLVecBase4f > 0 141313 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 1 1283 1303 0 19 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 0 0 1 0 1596 0 0 0 0 0

1613 37 PointerToArray< UnalignedLVecBase4i > 0 141313 37 PointerToArray< UnalignedLVecBase4i > 37 PointerToArray< UnalignedLVecBase4i > 0 0 0 1 1304 1324 0 19 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 0 0 1 0 1599 0 0 0 0 0

1614 14 BoundingVolume 0 141313 14 BoundingVolume 14 BoundingVolume 0 0 0 0 1334 0 9 1325 1326 1327 1328 1329 1330 1331 1332 1333 0 0 1 0 1615 0 0 0 2 1616 1617 330
/**
 * This is an abstract class for any volume in any sense which can be said to
 * define the locality of reference of a node in a graph, along with all of
 * its descendants.  It is not necessarily a geometric volume (although see
 * GeometricBoundingVolume); this is simply an abstract interface for bounds
 * of any sort.
 */

1615 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1616 17 IntersectionFlags 0 794624 33 BoundingVolume::IntersectionFlags 33 BoundingVolume::IntersectionFlags 1614 0 0 0 0 0 0 0 0 0 5 18 IF_no_intersection 34 BoundingVolume::IF_no_intersection 65
// If no bits are set, it is known that there is no intersection.
0 11 IF_possible 27 BoundingVolume::IF_possible 56
// IF_possible is set if there might be an intersection.
1 7 IF_some 23 BoundingVolume::IF_some 105
// IF_some is set if there is definitely an intersection.  In this case,
// IF_possible will also be set.
2 6 IF_all 22 BoundingVolume::IF_all 69
// When IF_all is set, both IF_possible and IF_some will also be set.
4 18 IF_dont_understand 34 BoundingVolume::IF_dont_understand 106
// IF_dont_understand is set if the particular volumevolume intersection
// test has not been implemented.
8 0 74
// The contains() functions return the union of one or more of these bits.

1617 10 BoundsType 0 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 1614 0 0 0 0 0 0 0 0 0 5 10 BT_default 26 BoundingVolume::BT_default 0
0 7 BT_best 23 BoundingVolume::BT_best 0
1 9 BT_sphere 25 BoundingVolume::BT_sphere 0
2 6 BT_box 22 BoundingVolume::BT_box 0
3 10 BT_fastest 26 BoundingVolume::BT_fastest 0
4 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

1618 23 GeometricBoundingVolume 0 141313 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 1340 0 5 1335 1336 1337 1338 1339 0 0 1 0 1614 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

1619 20 FiniteBoundingVolume 0 141313 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 1345 3 2040 2041 2042 4 1341 1342 1343 1344 0 0 1 0 1618 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

1620 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1621 0 0 0 0 0 0 0 0 0 0

1621 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1622 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1623 0 0 0 0 0 0 0 0 0 0

1623 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1624 10 LParabolaf 0 26625 10 LParabolaf 10 LParabolaf 0 0 0 1 1346 1348 0 12 1347 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 0 0 0 0 0 200
/**
 * An abstract mathematical description of a parabola, particularly useful for
 * describing arcs of projectiles.
 *
 * The parabolic equation, given parametrically here, is P = At^2 + Bt + C.
 */

1625 10 LParabolad 0 26625 10 LParabolad 10 LParabolad 0 0 0 1 1360 1362 0 12 1361 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 0 0 0 0 0 200
/**
 * An abstract mathematical description of a parabola, particularly useful for
 * describing arcs of projectiles.
 *
 * The parabolic equation, given parametrically here, is P = At^2 + Bt + C.
 */

1626 9 LParabola 0 2105345 9 LParabola 9 LParabola 0 0 1624 0 0 0 0 0 0 0 0 0 0

1627 7 LPlanef 0 141313 7 LPlanef 7 LPlanef 0 0 0 1 1374 1392 0 17 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 0 0 1 0 1628 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1628 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1629 7 LPlaned 0 141313 7 LPlaned 7 LPlaned 0 0 0 1 1393 1411 0 17 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 0 0 1 0 1630 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1630 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1631 6 LPlane 0 2105345 6 LPlane 6 LPlane 0 0 1627 0 0 0 0 0 0 0 0 0 0

1632 6 PlaneF 0 2105345 6 PlaneF 6 PlaneF 0 0 1627 0 0 0 0 0 0 0 0 0 0

1633 6 PlaneD 0 2105345 6 PlaneD 6 PlaneD 0 0 1629 0 0 0 0 0 0 0 0 0 0

1634 5 Plane 0 2105345 5 Plane 5 Plane 0 0 1627 0 0 0 0 0 0 0 0 0 0

1635 11 BoundingBox 0 141313 11 BoundingBox 11 BoundingBox 0 0 0 1 1412 1422 2 2043 2044 9 1413 1414 1415 1416 1417 1418 1419 1420 1421 2 2055 2056 0 1 0 1619 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

1636 9 LFrustumf 0 141313 9 LFrustumf 9 LFrustumf 0 0 0 1 1423 1430 0 6 1424 1425 1426 1427 1428 1429 0 0 0 0 0 10
/**
 *
 */

1637 9 LFrustumd 0 141313 9 LFrustumd 9 LFrustumd 0 0 0 1 1431 1438 0 6 1432 1433 1434 1435 1436 1437 0 0 0 0 0 10
/**
 *
 */

1638 8 LFrustum 0 2105345 8 LFrustum 8 LFrustum 0 0 1636 0 0 0 0 0 0 0 0 0 0

1639 8 FrustumF 0 2105345 8 FrustumF 8 FrustumF 0 0 1636 0 0 0 0 0 0 0 0 0 0

1640 8 FrustumD 0 2105345 8 FrustumD 8 FrustumD 0 0 1637 0 0 0 0 0 0 0 0 0 0

1641 7 Frustum 0 2105345 7 Frustum 7 Frustum 0 0 1636 0 0 0 0 0 0 0 0 0 0

1642 18 BoundingHexahedron 0 141313 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 1 1439 1445 2 2045 2046 5 1440 1441 1442 1443 1444 2 2057 2058 0 1 0 1619 0 0 0 0 300
/**
 * This defines a bounding convex hexahedron.  It is typically used to
 * represent a frustum, but may represent any enclosing convex hexahedron,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

1643 12 BoundingLine 0 141313 12 BoundingLine 12 BoundingLine 0 0 0 1 1446 1453 0 6 1447 1448 1449 1450 1451 1452 0 0 1 0 1618 0 0 0 0 320
/**
 * This funny bounding volume is an infinite line with no thickness and
 * extending to infinity in both directions.
 *
 * Note that it *always* extends in both directions, despite the fact that you
 * specify two points to the constructor.  These are not endpoints, they are
 * two arbitrary points on the line.
 */

1644 13 BoundingPlane 0 141313 13 BoundingPlane 13 BoundingPlane 0 0 0 1 1454 1460 1 2047 5 1455 1456 1457 1458 1459 0 0 1 0 1618 0 0 0 0 248
/**
 * This funny bounding volume is an infinite plane that divides space into two
 * regions: the part behind the normal, which is "inside" the bounding volume,
 * and the part in front of the normal, which is "outside" the bounding
 * volume.
 */

1645 12 LPlane const 0 8832 12 LPlane const 12 LPlane const 0 0 1631 0 0 0 0 0 0 0 0 0 0

1646 14 BoundingSphere 0 141313 14 BoundingSphere 14 BoundingSphere 0 0 0 1 1461 1470 2 2048 2049 8 1462 1463 1464 1465 1466 1467 1468 1469 0 0 1 0 1619 0 0 0 0 147
/**
 * This defines a bounding sphere, consisting of a center and a radius.  It is
 * always a sphere, and never an ellipsoid or other quadric.
 */

1647 26 IntersectionBoundingVolume 0 141313 26 IntersectionBoundingVolume 26 IntersectionBoundingVolume 0 0 0 1 1471 1480 1 2050 8 1472 1473 1474 1475 1476 1477 1478 1479 1 2059 0 1 0 1618 0 0 0 0 232
/**
 * This special bounding volume is the intersection of all of its constituent
 * bounding volumes.
 *
 * A point is defined to be within an IntersectionBoundingVolume if it is
 * within all of its component bounding volumes.
 */

1648 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1649 0 0 0 0 0 0 0 0 0 0

1649 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1618 0 0 0 0 0 0 0 0 0 0

1650 8 Mersenne 0 141313 8 Mersenne 8 Mersenne 0 0 0 1 1483 1485 0 1 1484 0 0 0 0 1 1651 0

1651 0 0 794624 10 Mersenne:: 0 1650 0 0 0 0 0 0 0 0 0 1 9 max_value 19 Mersenne::max_value 0
2147483647 0 0

1652 18 OmniBoundingVolume 0 141313 18 OmniBoundingVolume 18 OmniBoundingVolume 0 0 0 1 1486 1488 0 1 1487 0 0 1 0 1618 0 0 0 0 85
/**
 * This is a special kind of GeometricBoundingVolume that fills all of space.
 */

1653 19 UnionBoundingVolume 0 141313 19 UnionBoundingVolume 19 UnionBoundingVolume 0 0 0 1 1489 1499 1 2051 9 1490 1491 1492 1493 1494 1495 1496 1497 1498 1 2060 0 1 0 1618 0 0 0 0 229
/**
 * This special bounding volume is the union of all of its constituent
 * bounding volumes.
 *
 * A point is defined to be within a UnionBoundingVolume if it is within any
 * one or more of its component bounding volumes.
 */

1654 10 Randomizer 0 141313 10 Randomizer 10 Randomizer 0 0 0 1 1500 1507 0 6 1501 1502 1503 1504 1505 1506 0 0 0 0 0 50
/**
 * A handy class to return random numbers.
 */

1655 11 PerlinNoise 0 141313 11 PerlinNoise 11 PerlinNoise 0 0 0 0 1509 0 1 1508 0 0 0 0 0 183
/**
 * This is the base class for PerlinNoise2 and PerlinNoise3, different
 * dimensions of Perlin noise implementation.  The base class just collects
 * the common functionality.
 */

1656 12 PerlinNoise2 0 141313 12 PerlinNoise2 12 PerlinNoise2 0 0 0 1 1510 1515 0 4 1511 1512 1513 1514 0 0 1 0 1655 0 0 0 0 186
/**
 * This class provides an implementation of Perlin noise for 2 variables.
 * This code is loosely based on the reference implementation at
 * https://mrl.nyu.edu/~perlin/noise/ .
 */

1657 12 PerlinNoise3 0 141313 12 PerlinNoise3 12 PerlinNoise3 0 0 0 1 1516 1521 0 4 1517 1518 1519 1520 0 0 1 0 1655 0 0 0 0 185
/**
 * This class provides an implementation of Perlin noise for 3 variables.
 * This code is loosely based on the reference implementation at
 * http://mrl.nyu.edu/~perlin/noise/ .
 */

1658 13 PTA_LMatrix4f 0 2105345 13 PTA_LMatrix4f 13 PTA_LMatrix4f 0 0 1610 0 0 0 0 0 0 0 0 0 0

1659 14 CPTA_LMatrix4f 0 2105345 14 CPTA_LMatrix4f 14 CPTA_LMatrix4f 0 0 1589 0 0 0 0 0 0 0 0 0 0

1660 13 PTA_LMatrix4d 0 2105345 13 PTA_LMatrix4d 13 PTA_LMatrix4d 0 0 1609 0 0 0 0 0 0 0 0 0 0

1661 14 CPTA_LMatrix4d 0 2105345 14 CPTA_LMatrix4d 14 CPTA_LMatrix4d 0 0 1586 0 0 0 0 0 0 0 0 0 0

1662 12 PTA_LMatrix4 0 2105345 12 PTA_LMatrix4 12 PTA_LMatrix4 0 0 1658 0 0 0 0 0 0 0 0 0 0

1663 13 CPTA_LMatrix4 0 2105345 13 CPTA_LMatrix4 13 CPTA_LMatrix4 0 0 1659 0 0 0 0 0 0 0 0 0 0

1664 7 PTAMat4 0 2105345 7 PTAMat4 7 PTAMat4 0 0 1662 0 0 0 0 0 0 0 0 0 0

1665 8 CPTAMat4 0 2105345 8 CPTAMat4 8 CPTAMat4 0 0 1663 0 0 0 0 0 0 0 0 0 0

1666 8 PTAMat4d 0 2105345 8 PTAMat4d 8 PTAMat4d 0 0 1660 0 0 0 0 0 0 0 0 0 0

1667 9 CPTAMat4d 0 2105345 9 CPTAMat4d 9 CPTAMat4d 0 0 1661 0 0 0 0 0 0 0 0 0 0

1668 13 PTA_LMatrix3f 0 2105345 13 PTA_LMatrix3f 13 PTA_LMatrix3f 0 0 1602 0 0 0 0 0 0 0 0 0 0

1669 14 CPTA_LMatrix3f 0 2105345 14 CPTA_LMatrix3f 14 CPTA_LMatrix3f 0 0 1565 0 0 0 0 0 0 0 0 0 0

1670 13 PTA_LMatrix3d 0 2105345 13 PTA_LMatrix3d 13 PTA_LMatrix3d 0 0 1601 0 0 0 0 0 0 0 0 0 0

1671 14 CPTA_LMatrix3d 0 2105345 14 CPTA_LMatrix3d 14 CPTA_LMatrix3d 0 0 1561 0 0 0 0 0 0 0 0 0 0

1672 12 PTA_LMatrix3 0 2105345 12 PTA_LMatrix3 12 PTA_LMatrix3 0 0 1668 0 0 0 0 0 0 0 0 0 0

1673 13 CPTA_LMatrix3 0 2105345 13 CPTA_LMatrix3 13 CPTA_LMatrix3 0 0 1669 0 0 0 0 0 0 0 0 0 0

1674 7 PTAMat3 0 2105345 7 PTAMat3 7 PTAMat3 0 0 1672 0 0 0 0 0 0 0 0 0 0

1675 8 CPTAMat3 0 2105345 8 CPTAMat3 8 CPTAMat3 0 0 1673 0 0 0 0 0 0 0 0 0 0

1676 8 PTAMat3d 0 2105345 8 PTAMat3d 8 PTAMat3d 0 0 1670 0 0 0 0 0 0 0 0 0 0

1677 9 CPTAMat3d 0 2105345 9 CPTAMat3d 9 CPTAMat3d 0 0 1671 0 0 0 0 0 0 0 0 0 0

1678 14 PTA_LVecBase4f 0 2105345 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 1612 0 0 0 0 0 0 0 0 0 0

1679 15 CPTA_LVecBase4f 0 2105345 15 CPTA_LVecBase4f 15 CPTA_LVecBase4f 0 0 1595 0 0 0 0 0 0 0 0 0 0

1680 14 PTA_LVecBase4d 0 2105345 14 PTA_LVecBase4d 14 PTA_LVecBase4d 0 0 1611 0 0 0 0 0 0 0 0 0 0

1681 15 CPTA_LVecBase4d 0 2105345 15 CPTA_LVecBase4d 15 CPTA_LVecBase4d 0 0 1592 0 0 0 0 0 0 0 0 0 0

1682 14 PTA_LVecBase4i 0 2105345 14 PTA_LVecBase4i 14 PTA_LVecBase4i 0 0 1613 0 0 0 0 0 0 0 0 0 0

1683 15 CPTA_LVecBase4i 0 2105345 15 CPTA_LVecBase4i 15 CPTA_LVecBase4i 0 0 1598 0 0 0 0 0 0 0 0 0 0

1684 13 PTA_LVecBase4 0 2105345 13 PTA_LVecBase4 13 PTA_LVecBase4 0 0 1678 0 0 0 0 0 0 0 0 0 0

1685 14 CPTA_LVecBase4 0 2105345 14 CPTA_LVecBase4 14 CPTA_LVecBase4 0 0 1679 0 0 0 0 0 0 0 0 0 0

1686 12 PTAVecBase4f 0 2105345 12 PTAVecBase4f 12 PTAVecBase4f 0 0 1678 0 0 0 0 0 0 0 0 0 0

1687 13 CPTAVecBase4f 0 2105345 13 CPTAVecBase4f 13 CPTAVecBase4f 0 0 1679 0 0 0 0 0 0 0 0 0 0

1688 12 PTAVecBase4d 0 2105345 12 PTAVecBase4d 12 PTAVecBase4d 0 0 1680 0 0 0 0 0 0 0 0 0 0

1689 13 CPTAVecBase4d 0 2105345 13 CPTAVecBase4d 13 CPTAVecBase4d 0 0 1681 0 0 0 0 0 0 0 0 0 0

1690 14 PTA_LVecBase3f 0 2105345 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 1607 0 0 0 0 0 0 0 0 0 0

1691 15 CPTA_LVecBase3f 0 2105345 15 CPTA_LVecBase3f 15 CPTA_LVecBase3f 0 0 1580 0 0 0 0 0 0 0 0 0 0

1692 14 PTA_LVecBase3d 0 2105345 14 PTA_LVecBase3d 14 PTA_LVecBase3d 0 0 1606 0 0 0 0 0 0 0 0 0 0

1693 15 CPTA_LVecBase3d 0 2105345 15 CPTA_LVecBase3d 15 CPTA_LVecBase3d 0 0 1577 0 0 0 0 0 0 0 0 0 0

1694 14 PTA_LVecBase3i 0 2105345 14 PTA_LVecBase3i 14 PTA_LVecBase3i 0 0 1608 0 0 0 0 0 0 0 0 0 0

1695 15 CPTA_LVecBase3i 0 2105345 15 CPTA_LVecBase3i 15 CPTA_LVecBase3i 0 0 1583 0 0 0 0 0 0 0 0 0 0

1696 13 PTA_LVecBase3 0 2105345 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 1690 0 0 0 0 0 0 0 0 0 0

1697 14 CPTA_LVecBase3 0 2105345 14 CPTA_LVecBase3 14 CPTA_LVecBase3 0 0 1691 0 0 0 0 0 0 0 0 0 0

1698 12 PTAVecBase3f 0 2105345 12 PTAVecBase3f 12 PTAVecBase3f 0 0 1690 0 0 0 0 0 0 0 0 0 0

1699 13 CPTAVecBase3f 0 2105345 13 CPTAVecBase3f 13 CPTAVecBase3f 0 0 1691 0 0 0 0 0 0 0 0 0 0

1700 12 PTAVecBase3d 0 2105345 12 PTAVecBase3d 12 PTAVecBase3d 0 0 1692 0 0 0 0 0 0 0 0 0 0

1701 13 CPTAVecBase3d 0 2105345 13 CPTAVecBase3d 13 CPTAVecBase3d 0 0 1693 0 0 0 0 0 0 0 0 0 0

1702 14 PTA_LVecBase2f 0 2105345 14 PTA_LVecBase2f 14 PTA_LVecBase2f 0 0 1604 0 0 0 0 0 0 0 0 0 0

1703 15 CPTA_LVecBase2f 0 2105345 15 CPTA_LVecBase2f 15 CPTA_LVecBase2f 0 0 1571 0 0 0 0 0 0 0 0 0 0

1704 14 PTA_LVecBase2d 0 2105345 14 PTA_LVecBase2d 14 PTA_LVecBase2d 0 0 1603 0 0 0 0 0 0 0 0 0 0

1705 15 CPTA_LVecBase2d 0 2105345 15 CPTA_LVecBase2d 15 CPTA_LVecBase2d 0 0 1568 0 0 0 0 0 0 0 0 0 0

1706 14 PTA_LVecBase2i 0 2105345 14 PTA_LVecBase2i 14 PTA_LVecBase2i 0 0 1605 0 0 0 0 0 0 0 0 0 0

1707 15 CPTA_LVecBase2i 0 2105345 15 CPTA_LVecBase2i 15 CPTA_LVecBase2i 0 0 1574 0 0 0 0 0 0 0 0 0 0

1708 13 PTA_LVecBase2 0 2105345 13 PTA_LVecBase2 13 PTA_LVecBase2 0 0 1702 0 0 0 0 0 0 0 0 0 0

1709 14 CPTA_LVecBase2 0 2105345 14 CPTA_LVecBase2 14 CPTA_LVecBase2 0 0 1703 0 0 0 0 0 0 0 0 0 0

1710 12 PTAVecBase2f 0 2105345 12 PTAVecBase2f 12 PTAVecBase2f 0 0 1702 0 0 0 0 0 0 0 0 0 0

1711 13 CPTAVecBase2f 0 2105345 13 CPTAVecBase2f 13 CPTAVecBase2f 0 0 1703 0 0 0 0 0 0 0 0 0 0

1712 12 PTAVecBase2d 0 2105345 12 PTAVecBase2d 12 PTAVecBase2d 0 0 1704 0 0 0 0 0 0 0 0 0 0

1713 13 CPTAVecBase2d 0 2105345 13 CPTAVecBase2d 13 CPTAVecBase2d 0 0 1705 0 0 0 0 0 0 0 0 0 0

1714 19 StackedPerlinNoise2 0 141313 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 1 1523 1529 0 5 1524 1525 1526 1527 1528 0 0 0 0 0 147
/**
 * Implements a multi-layer PerlinNoise, with one or more high-frequency noise
 * functions added to a lower-frequency base noise function.
 */

1715 19 StackedPerlinNoise3 0 141313 19 StackedPerlinNoise3 19 StackedPerlinNoise3 0 0 0 1 1530 1536 0 5 1531 1532 1533 1534 1535 0 0 0 0 0 147
/**
 * Implements a multi-layer PerlinNoise, with one or more high-frequency noise
 * functions added to a lower-frequency base noise function.
 */

1716 12 Triangulator 0 141313 12 Triangulator 12 Triangulator 0 0 0 1 1537 1552 1 2052 14 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1 2061 0 0 0 0 382
/**
 * This class can triangulate a convex or concave polygon, even one with
 * holes.  It is adapted from an algorithm published as:
 *
 * Narkhede A. and Manocha D., Fast polygon triangulation algorithm based on
 * Seidel's Algorithm, UNC-CH, 1994.
 *
 * http://www.cs.unc.edu/~dm/CODE/GEM/chapter.html
 *
 * It works strictly on 2-d points.  See Triangulator3 for 3-d points.
 */

1717 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 1718 0 0 0 0 0 0 0 0 0 0

1718 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

1719 13 Triangulator3 0 141313 13 Triangulator3 13 Triangulator3 0 0 0 1 1553 1560 2 2053 2054 6 1554 1555 1556 1557 1558 1559 1 2062 0 1 0 1716 0 0 0 0 264
/**
 * This is an extension of Triangulator to handle polygons with three-
 * dimensional points.  It assumes all of the points lie in a single plane,
 * and internally projects the supplied points into 2-D for passing to the
 * underlying Triangulator object.
 */

1720 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 1721 0 0 0 0 0 0 0 0 0 0

1721 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1722 13 LPlaned const 0 8832 13 LPlaned const 13 LPlaned const 0 0 1629 0 0 0 0 0 0 0 0 0 0

1723 40 ConstPointerToArray< LMatrix3d > const * 0 8576 40 ConstPointerToArray< LMatrix3d > const * 40 ConstPointerToArray< LMatrix3d > const * 0 0 1724 0 0 0 0 0 0 0 0 0 0

1724 38 ConstPointerToArray< LMatrix3d > const 0 8832 38 ConstPointerToArray< LMatrix3d > const 38 ConstPointerToArray< LMatrix3d > const 0 0 1561 0 0 0 0 0 0 0 0 0 0

1725 34 ConstPointerToArray< LMatrix3d > * 0 8576 34 ConstPointerToArray< LMatrix3d > * 34 ConstPointerToArray< LMatrix3d > * 0 0 1561 0 0 0 0 0 0 0 0 0 0

1726 35 PointerToArray< LMatrix3d > const * 0 8576 35 PointerToArray< LMatrix3d > const * 35 PointerToArray< LMatrix3d > const * 0 0 1727 0 0 0 0 0 0 0 0 0 0

1727 33 PointerToArray< LMatrix3d > const 0 8832 33 PointerToArray< LMatrix3d > const 33 PointerToArray< LMatrix3d > const 0 0 1601 0 0 0 0 0 0 0 0 0 0

1728 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1729 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1730 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 1731 0 0 0 0 0 0 0 0 0 0

1731 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 1732 0 0 0 0 0 0 0 0 0 0

1732 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1733 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1734 0 0 0 0 0 0 0 0 0 0

1734 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1735 0 0 0 0 0 0 0 0 0 0

1735 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1736 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1737 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1738 0 0 0 0 0 0 0 0 0 0

1738 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 1739 0 0 0 0 0 0 0 0 0 0

1739 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

1740 39 PointerToArrayBase< LMatrix3d > const * 0 8576 39 PointerToArrayBase< LMatrix3d > const * 39 PointerToArrayBase< LMatrix3d > const * 0 0 1741 0 0 0 0 0 0 0 0 0 0

1741 37 PointerToArrayBase< LMatrix3d > const 0 8832 37 PointerToArrayBase< LMatrix3d > const 37 PointerToArrayBase< LMatrix3d > const 0 0 1562 0 0 0 0 0 0 0 0 0 0

1742 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1743 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 0 1563 0 0 0 0 0 0 0 0 0 0

1744 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 0 1745 0 0 0 0 0 0 0 0 0 0

1745 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 0 1563 0 0 0 0 0 0 0 0 0 0

1746 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 1747 0 0 0 0 0 0 0 0 0 0

1747 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1748 40 ConstPointerToArray< LMatrix3f > const * 0 8576 40 ConstPointerToArray< LMatrix3f > const * 40 ConstPointerToArray< LMatrix3f > const * 0 0 1749 0 0 0 0 0 0 0 0 0 0

1749 38 ConstPointerToArray< LMatrix3f > const 0 8832 38 ConstPointerToArray< LMatrix3f > const 38 ConstPointerToArray< LMatrix3f > const 0 0 1565 0 0 0 0 0 0 0 0 0 0

1750 34 ConstPointerToArray< LMatrix3f > * 0 8576 34 ConstPointerToArray< LMatrix3f > * 34 ConstPointerToArray< LMatrix3f > * 0 0 1565 0 0 0 0 0 0 0 0 0 0

1751 35 PointerToArray< LMatrix3f > const * 0 8576 35 PointerToArray< LMatrix3f > const * 35 PointerToArray< LMatrix3f > const * 0 0 1752 0 0 0 0 0 0 0 0 0 0

1752 33 PointerToArray< LMatrix3f > const 0 8832 33 PointerToArray< LMatrix3f > const 33 PointerToArray< LMatrix3f > const 0 0 1602 0 0 0 0 0 0 0 0 0 0

1753 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1754 0 0 0 0 0 0 0 0 0 0

1754 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1755 0 0 0 0 0 0 0 0 0 0

1755 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1756 39 PointerToArrayBase< LMatrix3f > const * 0 8576 39 PointerToArrayBase< LMatrix3f > const * 39 PointerToArrayBase< LMatrix3f > const * 0 0 1757 0 0 0 0 0 0 0 0 0 0

1757 37 PointerToArrayBase< LMatrix3f > const 0 8832 37 PointerToArrayBase< LMatrix3f > const 37 PointerToArrayBase< LMatrix3f > const 0 0 1566 0 0 0 0 0 0 0 0 0 0

1758 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 0 1567 0 0 0 0 0 0 0 0 0 0

1759 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 0 1760 0 0 0 0 0 0 0 0 0 0

1760 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 0 1567 0 0 0 0 0 0 0 0 0 0

1761 41 ConstPointerToArray< LVecBase2d > const * 0 8576 41 ConstPointerToArray< LVecBase2d > const * 41 ConstPointerToArray< LVecBase2d > const * 0 0 1762 0 0 0 0 0 0 0 0 0 0

1762 39 ConstPointerToArray< LVecBase2d > const 0 8832 39 ConstPointerToArray< LVecBase2d > const 39 ConstPointerToArray< LVecBase2d > const 0 0 1568 0 0 0 0 0 0 0 0 0 0

1763 35 ConstPointerToArray< LVecBase2d > * 0 8576 35 ConstPointerToArray< LVecBase2d > * 35 ConstPointerToArray< LVecBase2d > * 0 0 1568 0 0 0 0 0 0 0 0 0 0

1764 36 PointerToArray< LVecBase2d > const * 0 8576 36 PointerToArray< LVecBase2d > const * 36 PointerToArray< LVecBase2d > const * 0 0 1765 0 0 0 0 0 0 0 0 0 0

1765 34 PointerToArray< LVecBase2d > const 0 8832 34 PointerToArray< LVecBase2d > const 34 PointerToArray< LVecBase2d > const 0 0 1603 0 0 0 0 0 0 0 0 0 0

1766 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 1767 0 0 0 0 0 0 0 0 0 0

1767 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 1768 0 0 0 0 0 0 0 0 0 0

1768 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1769 40 PointerToArrayBase< LVecBase2d > const * 0 8576 40 PointerToArrayBase< LVecBase2d > const * 40 PointerToArrayBase< LVecBase2d > const * 0 0 1770 0 0 0 0 0 0 0 0 0 0

1770 38 PointerToArrayBase< LVecBase2d > const 0 8832 38 PointerToArrayBase< LVecBase2d > const 38 PointerToArrayBase< LVecBase2d > const 0 0 1569 0 0 0 0 0 0 0 0 0 0

1771 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 0 1570 0 0 0 0 0 0 0 0 0 0

1772 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 0 1773 0 0 0 0 0 0 0 0 0 0

1773 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 0 1570 0 0 0 0 0 0 0 0 0 0

1774 41 ConstPointerToArray< LVecBase2f > const * 0 8576 41 ConstPointerToArray< LVecBase2f > const * 41 ConstPointerToArray< LVecBase2f > const * 0 0 1775 0 0 0 0 0 0 0 0 0 0

1775 39 ConstPointerToArray< LVecBase2f > const 0 8832 39 ConstPointerToArray< LVecBase2f > const 39 ConstPointerToArray< LVecBase2f > const 0 0 1571 0 0 0 0 0 0 0 0 0 0

1776 35 ConstPointerToArray< LVecBase2f > * 0 8576 35 ConstPointerToArray< LVecBase2f > * 35 ConstPointerToArray< LVecBase2f > * 0 0 1571 0 0 0 0 0 0 0 0 0 0

1777 36 PointerToArray< LVecBase2f > const * 0 8576 36 PointerToArray< LVecBase2f > const * 36 PointerToArray< LVecBase2f > const * 0 0 1778 0 0 0 0 0 0 0 0 0 0

1778 34 PointerToArray< LVecBase2f > const 0 8832 34 PointerToArray< LVecBase2f > const 34 PointerToArray< LVecBase2f > const 0 0 1604 0 0 0 0 0 0 0 0 0 0

1779 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 1780 0 0 0 0 0 0 0 0 0 0

1780 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 1781 0 0 0 0 0 0 0 0 0 0

1781 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1782 40 PointerToArrayBase< LVecBase2f > const * 0 8576 40 PointerToArrayBase< LVecBase2f > const * 40 PointerToArrayBase< LVecBase2f > const * 0 0 1783 0 0 0 0 0 0 0 0 0 0

1783 38 PointerToArrayBase< LVecBase2f > const 0 8832 38 PointerToArrayBase< LVecBase2f > const 38 PointerToArrayBase< LVecBase2f > const 0 0 1572 0 0 0 0 0 0 0 0 0 0

1784 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 0 1573 0 0 0 0 0 0 0 0 0 0

1785 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 0 1786 0 0 0 0 0 0 0 0 0 0

1786 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 0 1573 0 0 0 0 0 0 0 0 0 0

1787 41 ConstPointerToArray< LVecBase2i > const * 0 8576 41 ConstPointerToArray< LVecBase2i > const * 41 ConstPointerToArray< LVecBase2i > const * 0 0 1788 0 0 0 0 0 0 0 0 0 0

1788 39 ConstPointerToArray< LVecBase2i > const 0 8832 39 ConstPointerToArray< LVecBase2i > const 39 ConstPointerToArray< LVecBase2i > const 0 0 1574 0 0 0 0 0 0 0 0 0 0

1789 35 ConstPointerToArray< LVecBase2i > * 0 8576 35 ConstPointerToArray< LVecBase2i > * 35 ConstPointerToArray< LVecBase2i > * 0 0 1574 0 0 0 0 0 0 0 0 0 0

1790 36 PointerToArray< LVecBase2i > const * 0 8576 36 PointerToArray< LVecBase2i > const * 36 PointerToArray< LVecBase2i > const * 0 0 1791 0 0 0 0 0 0 0 0 0 0

1791 34 PointerToArray< LVecBase2i > const 0 8832 34 PointerToArray< LVecBase2i > const 34 PointerToArray< LVecBase2i > const 0 0 1605 0 0 0 0 0 0 0 0 0 0

1792 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 1793 0 0 0 0 0 0 0 0 0 0

1793 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 1794 0 0 0 0 0 0 0 0 0 0

1794 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1795 40 PointerToArrayBase< LVecBase2i > const * 0 8576 40 PointerToArrayBase< LVecBase2i > const * 40 PointerToArrayBase< LVecBase2i > const * 0 0 1796 0 0 0 0 0 0 0 0 0 0

1796 38 PointerToArrayBase< LVecBase2i > const 0 8832 38 PointerToArrayBase< LVecBase2i > const 38 PointerToArrayBase< LVecBase2i > const 0 0 1575 0 0 0 0 0 0 0 0 0 0

1797 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 0 1576 0 0 0 0 0 0 0 0 0 0

1798 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 0 1799 0 0 0 0 0 0 0 0 0 0

1799 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 0 1576 0 0 0 0 0 0 0 0 0 0

1800 41 ConstPointerToArray< LVecBase3d > const * 0 8576 41 ConstPointerToArray< LVecBase3d > const * 41 ConstPointerToArray< LVecBase3d > const * 0 0 1801 0 0 0 0 0 0 0 0 0 0

1801 39 ConstPointerToArray< LVecBase3d > const 0 8832 39 ConstPointerToArray< LVecBase3d > const 39 ConstPointerToArray< LVecBase3d > const 0 0 1577 0 0 0 0 0 0 0 0 0 0

1802 35 ConstPointerToArray< LVecBase3d > * 0 8576 35 ConstPointerToArray< LVecBase3d > * 35 ConstPointerToArray< LVecBase3d > * 0 0 1577 0 0 0 0 0 0 0 0 0 0

1803 36 PointerToArray< LVecBase3d > const * 0 8576 36 PointerToArray< LVecBase3d > const * 36 PointerToArray< LVecBase3d > const * 0 0 1804 0 0 0 0 0 0 0 0 0 0

1804 34 PointerToArray< LVecBase3d > const 0 8832 34 PointerToArray< LVecBase3d > const 34 PointerToArray< LVecBase3d > const 0 0 1606 0 0 0 0 0 0 0 0 0 0

1805 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 1806 0 0 0 0 0 0 0 0 0 0

1806 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 1807 0 0 0 0 0 0 0 0 0 0

1807 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1808 40 PointerToArrayBase< LVecBase3d > const * 0 8576 40 PointerToArrayBase< LVecBase3d > const * 40 PointerToArrayBase< LVecBase3d > const * 0 0 1809 0 0 0 0 0 0 0 0 0 0

1809 38 PointerToArrayBase< LVecBase3d > const 0 8832 38 PointerToArrayBase< LVecBase3d > const 38 PointerToArrayBase< LVecBase3d > const 0 0 1578 0 0 0 0 0 0 0 0 0 0

1810 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 0 1579 0 0 0 0 0 0 0 0 0 0

1811 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 0 1812 0 0 0 0 0 0 0 0 0 0

1812 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 0 1579 0 0 0 0 0 0 0 0 0 0

1813 41 ConstPointerToArray< LVecBase3f > const * 0 8576 41 ConstPointerToArray< LVecBase3f > const * 41 ConstPointerToArray< LVecBase3f > const * 0 0 1814 0 0 0 0 0 0 0 0 0 0

1814 39 ConstPointerToArray< LVecBase3f > const 0 8832 39 ConstPointerToArray< LVecBase3f > const 39 ConstPointerToArray< LVecBase3f > const 0 0 1580 0 0 0 0 0 0 0 0 0 0

1815 35 ConstPointerToArray< LVecBase3f > * 0 8576 35 ConstPointerToArray< LVecBase3f > * 35 ConstPointerToArray< LVecBase3f > * 0 0 1580 0 0 0 0 0 0 0 0 0 0

1816 36 PointerToArray< LVecBase3f > const * 0 8576 36 PointerToArray< LVecBase3f > const * 36 PointerToArray< LVecBase3f > const * 0 0 1817 0 0 0 0 0 0 0 0 0 0

1817 34 PointerToArray< LVecBase3f > const 0 8832 34 PointerToArray< LVecBase3f > const 34 PointerToArray< LVecBase3f > const 0 0 1607 0 0 0 0 0 0 0 0 0 0

1818 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1819 0 0 0 0 0 0 0 0 0 0

1819 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1820 0 0 0 0 0 0 0 0 0 0

1820 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1821 40 PointerToArrayBase< LVecBase3f > const * 0 8576 40 PointerToArrayBase< LVecBase3f > const * 40 PointerToArrayBase< LVecBase3f > const * 0 0 1822 0 0 0 0 0 0 0 0 0 0

1822 38 PointerToArrayBase< LVecBase3f > const 0 8832 38 PointerToArrayBase< LVecBase3f > const 38 PointerToArrayBase< LVecBase3f > const 0 0 1581 0 0 0 0 0 0 0 0 0 0

1823 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 0 1582 0 0 0 0 0 0 0 0 0 0

1824 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 0 1825 0 0 0 0 0 0 0 0 0 0

1825 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 0 1582 0 0 0 0 0 0 0 0 0 0

1826 41 ConstPointerToArray< LVecBase3i > const * 0 8576 41 ConstPointerToArray< LVecBase3i > const * 41 ConstPointerToArray< LVecBase3i > const * 0 0 1827 0 0 0 0 0 0 0 0 0 0

1827 39 ConstPointerToArray< LVecBase3i > const 0 8832 39 ConstPointerToArray< LVecBase3i > const 39 ConstPointerToArray< LVecBase3i > const 0 0 1583 0 0 0 0 0 0 0 0 0 0

1828 35 ConstPointerToArray< LVecBase3i > * 0 8576 35 ConstPointerToArray< LVecBase3i > * 35 ConstPointerToArray< LVecBase3i > * 0 0 1583 0 0 0 0 0 0 0 0 0 0

1829 36 PointerToArray< LVecBase3i > const * 0 8576 36 PointerToArray< LVecBase3i > const * 36 PointerToArray< LVecBase3i > const * 0 0 1830 0 0 0 0 0 0 0 0 0 0

1830 34 PointerToArray< LVecBase3i > const 0 8832 34 PointerToArray< LVecBase3i > const 34 PointerToArray< LVecBase3i > const 0 0 1608 0 0 0 0 0 0 0 0 0 0

1831 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 1832 0 0 0 0 0 0 0 0 0 0

1832 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 1833 0 0 0 0 0 0 0 0 0 0

1833 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1834 40 PointerToArrayBase< LVecBase3i > const * 0 8576 40 PointerToArrayBase< LVecBase3i > const * 40 PointerToArrayBase< LVecBase3i > const * 0 0 1835 0 0 0 0 0 0 0 0 0 0

1835 38 PointerToArrayBase< LVecBase3i > const 0 8832 38 PointerToArrayBase< LVecBase3i > const 38 PointerToArrayBase< LVecBase3i > const 0 0 1584 0 0 0 0 0 0 0 0 0 0

1836 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 0 1585 0 0 0 0 0 0 0 0 0 0

1837 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 0 1838 0 0 0 0 0 0 0 0 0 0

1838 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 0 1585 0 0 0 0 0 0 0 0 0 0

1839 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4d > const * 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 0 1840 0 0 0 0 0 0 0 0 0 0

1840 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4d > const 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 0 1586 0 0 0 0 0 0 0 0 0 0

1841 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4d > * 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 0 1586 0 0 0 0 0 0 0 0 0 0

1842 44 PointerToArray< UnalignedLMatrix4d > const * 0 8576 44 PointerToArray< UnalignedLMatrix4d > const * 44 PointerToArray< UnalignedLMatrix4d > const * 0 0 1843 0 0 0 0 0 0 0 0 0 0

1843 42 PointerToArray< UnalignedLMatrix4d > const 0 8832 42 PointerToArray< UnalignedLMatrix4d > const 42 PointerToArray< UnalignedLMatrix4d > const 0 0 1609 0 0 0 0 0 0 0 0 0 0

1844 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 1845 0 0 0 0 0 0 0 0 0 0

1845 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 1846 0 0 0 0 0 0 0 0 0 0

1846 18 UnalignedLMatrix4d 0 2048 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 385
/**
 * This is an "unaligned" LMatrix4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LMatrix4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LMatrix4 to get actual use from it.
 */

1847 48 PointerToArrayBase< UnalignedLMatrix4d > const * 0 8576 48 PointerToArrayBase< UnalignedLMatrix4d > const * 48 PointerToArrayBase< UnalignedLMatrix4d > const * 0 0 1848 0 0 0 0 0 0 0 0 0 0

1848 46 PointerToArrayBase< UnalignedLMatrix4d > const 0 8832 46 PointerToArrayBase< UnalignedLMatrix4d > const 46 PointerToArrayBase< UnalignedLMatrix4d > const 0 0 1587 0 0 0 0 0 0 0 0 0 0

1849 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 0 1588 0 0 0 0 0 0 0 0 0 0

1850 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 0 1851 0 0 0 0 0 0 0 0 0 0

1851 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 0 1588 0 0 0 0 0 0 0 0 0 0

1852 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4f > const * 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 0 1853 0 0 0 0 0 0 0 0 0 0

1853 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4f > const 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 0 1589 0 0 0 0 0 0 0 0 0 0

1854 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4f > * 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 0 1589 0 0 0 0 0 0 0 0 0 0

1855 44 PointerToArray< UnalignedLMatrix4f > const * 0 8576 44 PointerToArray< UnalignedLMatrix4f > const * 44 PointerToArray< UnalignedLMatrix4f > const * 0 0 1856 0 0 0 0 0 0 0 0 0 0

1856 42 PointerToArray< UnalignedLMatrix4f > const 0 8832 42 PointerToArray< UnalignedLMatrix4f > const 42 PointerToArray< UnalignedLMatrix4f > const 0 0 1610 0 0 0 0 0 0 0 0 0 0

1857 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 1858 0 0 0 0 0 0 0 0 0 0

1858 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 1859 0 0 0 0 0 0 0 0 0 0

1859 18 UnalignedLMatrix4f 0 2048 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 385
/**
 * This is an "unaligned" LMatrix4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LMatrix4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LMatrix4 to get actual use from it.
 */

1860 48 PointerToArrayBase< UnalignedLMatrix4f > const * 0 8576 48 PointerToArrayBase< UnalignedLMatrix4f > const * 48 PointerToArrayBase< UnalignedLMatrix4f > const * 0 0 1861 0 0 0 0 0 0 0 0 0 0

1861 46 PointerToArrayBase< UnalignedLMatrix4f > const 0 8832 46 PointerToArrayBase< UnalignedLMatrix4f > const 46 PointerToArrayBase< UnalignedLMatrix4f > const 0 0 1590 0 0 0 0 0 0 0 0 0 0

1862 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 0 1591 0 0 0 0 0 0 0 0 0 0

1863 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 0 1864 0 0 0 0 0 0 0 0 0 0

1864 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 0 1591 0 0 0 0 0 0 0 0 0 0

1865 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4d > const * 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 0 1866 0 0 0 0 0 0 0 0 0 0

1866 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4d > const 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 0 1592 0 0 0 0 0 0 0 0 0 0

1867 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4d > * 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 0 1592 0 0 0 0 0 0 0 0 0 0

1868 45 PointerToArray< UnalignedLVecBase4d > const * 0 8576 45 PointerToArray< UnalignedLVecBase4d > const * 45 PointerToArray< UnalignedLVecBase4d > const * 0 0 1869 0 0 0 0 0 0 0 0 0 0

1869 43 PointerToArray< UnalignedLVecBase4d > const 0 8832 43 PointerToArray< UnalignedLVecBase4d > const 43 PointerToArray< UnalignedLVecBase4d > const 0 0 1611 0 0 0 0 0 0 0 0 0 0

1870 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 1871 0 0 0 0 0 0 0 0 0 0

1871 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 1872 0 0 0 0 0 0 0 0 0 0

1872 19 UnalignedLVecBase4d 0 2048 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1873 49 PointerToArrayBase< UnalignedLVecBase4d > const * 0 8576 49 PointerToArrayBase< UnalignedLVecBase4d > const * 49 PointerToArrayBase< UnalignedLVecBase4d > const * 0 0 1874 0 0 0 0 0 0 0 0 0 0

1874 47 PointerToArrayBase< UnalignedLVecBase4d > const 0 8832 47 PointerToArrayBase< UnalignedLVecBase4d > const 47 PointerToArrayBase< UnalignedLVecBase4d > const 0 0 1593 0 0 0 0 0 0 0 0 0 0

1875 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 0 1594 0 0 0 0 0 0 0 0 0 0

1876 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 0 1877 0 0 0 0 0 0 0 0 0 0

1877 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 0 1594 0 0 0 0 0 0 0 0 0 0

1878 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4f > const * 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 0 1879 0 0 0 0 0 0 0 0 0 0

1879 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4f > const 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 0 1595 0 0 0 0 0 0 0 0 0 0

1880 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4f > * 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 0 1595 0 0 0 0 0 0 0 0 0 0

1881 45 PointerToArray< UnalignedLVecBase4f > const * 0 8576 45 PointerToArray< UnalignedLVecBase4f > const * 45 PointerToArray< UnalignedLVecBase4f > const * 0 0 1882 0 0 0 0 0 0 0 0 0 0

1882 43 PointerToArray< UnalignedLVecBase4f > const 0 8832 43 PointerToArray< UnalignedLVecBase4f > const 43 PointerToArray< UnalignedLVecBase4f > const 0 0 1612 0 0 0 0 0 0 0 0 0 0

1883 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 1884 0 0 0 0 0 0 0 0 0 0

1884 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 1885 0 0 0 0 0 0 0 0 0 0

1885 19 UnalignedLVecBase4f 0 2048 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1886 49 PointerToArrayBase< UnalignedLVecBase4f > const * 0 8576 49 PointerToArrayBase< UnalignedLVecBase4f > const * 49 PointerToArrayBase< UnalignedLVecBase4f > const * 0 0 1887 0 0 0 0 0 0 0 0 0 0

1887 47 PointerToArrayBase< UnalignedLVecBase4f > const 0 8832 47 PointerToArrayBase< UnalignedLVecBase4f > const 47 PointerToArrayBase< UnalignedLVecBase4f > const 0 0 1596 0 0 0 0 0 0 0 0 0 0

1888 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 0 1597 0 0 0 0 0 0 0 0 0 0

1889 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 0 1890 0 0 0 0 0 0 0 0 0 0

1890 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 0 1597 0 0 0 0 0 0 0 0 0 0

1891 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4i > const * 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 0 1892 0 0 0 0 0 0 0 0 0 0

1892 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4i > const 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 0 1598 0 0 0 0 0 0 0 0 0 0

1893 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4i > * 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 0 1598 0 0 0 0 0 0 0 0 0 0

1894 45 PointerToArray< UnalignedLVecBase4i > const * 0 8576 45 PointerToArray< UnalignedLVecBase4i > const * 45 PointerToArray< UnalignedLVecBase4i > const * 0 0 1895 0 0 0 0 0 0 0 0 0 0

1895 43 PointerToArray< UnalignedLVecBase4i > const 0 8832 43 PointerToArray< UnalignedLVecBase4i > const 43 PointerToArray< UnalignedLVecBase4i > const 0 0 1613 0 0 0 0 0 0 0 0 0 0

1896 27 UnalignedLVecBase4i const * 0 8576 27 UnalignedLVecBase4i const * 27 UnalignedLVecBase4i const * 0 0 1897 0 0 0 0 0 0 0 0 0 0

1897 25 UnalignedLVecBase4i const 0 8832 25 UnalignedLVecBase4i const 25 UnalignedLVecBase4i const 0 0 1898 0 0 0 0 0 0 0 0 0 0

1898 19 UnalignedLVecBase4i 0 2048 19 UnalignedLVecBase4i 19 UnalignedLVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1899 49 PointerToArrayBase< UnalignedLVecBase4i > const * 0 8576 49 PointerToArrayBase< UnalignedLVecBase4i > const * 49 PointerToArrayBase< UnalignedLVecBase4i > const * 0 0 1900 0 0 0 0 0 0 0 0 0 0

1900 47 PointerToArrayBase< UnalignedLVecBase4i > const 0 8832 47 PointerToArrayBase< UnalignedLVecBase4i > const 47 PointerToArrayBase< UnalignedLVecBase4i > const 0 0 1599 0 0 0 0 0 0 0 0 0 0

1901 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 0 1600 0 0 0 0 0 0 0 0 0 0

1902 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 0 1903 0 0 0 0 0 0 0 0 0 0

1903 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 0 1600 0 0 0 0 0 0 0 0 0 0

1904 29 PointerToArray< LMatrix3d > * 0 8576 29 PointerToArray< LMatrix3d > * 29 PointerToArray< LMatrix3d > * 0 0 1601 0 0 0 0 0 0 0 0 0 0

1905 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1906 0 0 0 0 0 0 0 0 0 0

1906 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1907 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1908 29 PointerToArray< LMatrix3f > * 0 8576 29 PointerToArray< LMatrix3f > * 29 PointerToArray< LMatrix3f > * 0 0 1602 0 0 0 0 0 0 0 0 0 0

1909 30 PointerToArray< LVecBase2d > * 0 8576 30 PointerToArray< LVecBase2d > * 30 PointerToArray< LVecBase2d > * 0 0 1603 0 0 0 0 0 0 0 0 0 0

1910 30 PointerToArray< LVecBase2f > * 0 8576 30 PointerToArray< LVecBase2f > * 30 PointerToArray< LVecBase2f > * 0 0 1604 0 0 0 0 0 0 0 0 0 0

1911 30 PointerToArray< LVecBase2i > * 0 8576 30 PointerToArray< LVecBase2i > * 30 PointerToArray< LVecBase2i > * 0 0 1605 0 0 0 0 0 0 0 0 0 0

1912 30 PointerToArray< LVecBase3d > * 0 8576 30 PointerToArray< LVecBase3d > * 30 PointerToArray< LVecBase3d > * 0 0 1606 0 0 0 0 0 0 0 0 0 0

1913 30 PointerToArray< LVecBase3f > * 0 8576 30 PointerToArray< LVecBase3f > * 30 PointerToArray< LVecBase3f > * 0 0 1607 0 0 0 0 0 0 0 0 0 0

1914 30 PointerToArray< LVecBase3i > * 0 8576 30 PointerToArray< LVecBase3i > * 30 PointerToArray< LVecBase3i > * 0 0 1608 0 0 0 0 0 0 0 0 0 0

1915 38 PointerToArray< UnalignedLMatrix4d > * 0 8576 38 PointerToArray< UnalignedLMatrix4d > * 38 PointerToArray< UnalignedLMatrix4d > * 0 0 1609 0 0 0 0 0 0 0 0 0 0

1916 38 PointerToArray< UnalignedLMatrix4f > * 0 8576 38 PointerToArray< UnalignedLMatrix4f > * 38 PointerToArray< UnalignedLMatrix4f > * 0 0 1610 0 0 0 0 0 0 0 0 0 0

1917 39 PointerToArray< UnalignedLVecBase4d > * 0 8576 39 PointerToArray< UnalignedLVecBase4d > * 39 PointerToArray< UnalignedLVecBase4d > * 0 0 1611 0 0 0 0 0 0 0 0 0 0

1918 39 PointerToArray< UnalignedLVecBase4f > * 0 8576 39 PointerToArray< UnalignedLVecBase4f > * 39 PointerToArray< UnalignedLVecBase4f > * 0 0 1612 0 0 0 0 0 0 0 0 0 0

1919 39 PointerToArray< UnalignedLVecBase4i > * 0 8576 39 PointerToArray< UnalignedLVecBase4i > * 39 PointerToArray< UnalignedLVecBase4i > * 0 0 1613 0 0 0 0 0 0 0 0 0 0

1920 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 1921 0 0 0 0 0 0 0 0 0 0

1921 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 1614 0 0 0 0 0 0 0 0 0 0

1922 16 BoundingVolume * 0 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 1614 0 0 0 0 0 0 0 0 0 0

1923 25 GeometricBoundingVolume * 0 8576 25 GeometricBoundingVolume * 25 GeometricBoundingVolume * 0 0 1618 0 0 0 0 0 0 0 0 0 0

1924 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1925 0 0 0 0 0 0 0 0 0 0

1925 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1620 0 0 0 0 0 0 0 0 0 0

1926 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1620 0 0 0 0 0 0 0 0 0 0

1927 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 1928 0 0 0 0 0 0 0 0 0 0

1928 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 1929 0 0 0 0 0 0 0 0 0 0

1929 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 1930 0 0 0 0 0 0 0 0 0 0

1930 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1931 28 FiniteBoundingVolume const * 0 8576 28 FiniteBoundingVolume const * 28 FiniteBoundingVolume const * 0 0 1932 0 0 0 0 0 0 0 0 0 0

1932 26 FiniteBoundingVolume const 0 8832 26 FiniteBoundingVolume const 26 FiniteBoundingVolume const 0 0 1619 0 0 0 0 0 0 0 0 0 0

1933 12 LParabolaf * 0 8576 12 LParabolaf * 12 LParabolaf * 0 0 1624 0 0 0 0 0 0 0 0 0 0

1934 18 LParabolaf const * 0 8576 18 LParabolaf const * 18 LParabolaf const * 0 0 1935 0 0 0 0 0 0 0 0 0 0

1935 16 LParabolaf const 0 8832 16 LParabolaf const 16 LParabolaf const 0 0 1624 0 0 0 0 0 0 0 0 0 0

1936 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 1937 0 0 0 0 0 0 0 0 0 0

1937 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 1930 0 0 0 0 0 0 0 0 0 0

1938 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1621 0 0 0 0 0 0 0 0 0 0

1939 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1940 0 0 0 0 0 0 0 0 0 0

1940 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 565
/**
 * An ordered list of data elements, formatted in memory for transmission over
 * a socket or writing to a data file.
 *
 * Data elements should be added one at a time, in order, to the Datagram.
 * The nature and contents of the data elements are totally up to the user.
 * When a Datagram has been transmitted and received, its data elements may be
 * extracted using a DatagramIterator; it is up to the caller to know the
 * correct type of each data element in order.
 *
 * A Datagram is itself headerless; it is simply a collection of data
 * elements.
 */

1941 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1942 0 0 0 0 0 0 0 0 0 0

1942 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 215
/**
 * A class to retrieve the individual data elements previously stored in a
 * Datagram.  Elements may be retrieved one at a time; it is up to the caller
 * to know the correct type and order of each element.
 */

1943 12 LParabolad * 0 8576 12 LParabolad * 12 LParabolad * 0 0 1625 0 0 0 0 0 0 0 0 0 0

1944 18 LParabolad const * 0 8576 18 LParabolad const * 18 LParabolad const * 0 0 1945 0 0 0 0 0 0 0 0 0 0

1945 16 LParabolad const 0 8832 16 LParabolad const 16 LParabolad const 0 0 1625 0 0 0 0 0 0 0 0 0 0

1946 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 1947 0 0 0 0 0 0 0 0 0 0

1947 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 1948 0 0 0 0 0 0 0 0 0 0

1948 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1949 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1950 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 1721 0 0 0 0 0 0 0 0 0 0

1951 9 LPlanef * 0 8576 9 LPlanef * 9 LPlanef * 0 0 1627 0 0 0 0 0 0 0 0 0 0

1952 15 LPlanef const * 0 8576 15 LPlanef const * 15 LPlanef const * 0 0 1953 0 0 0 0 0 0 0 0 0 0

1953 13 LPlanef const 0 8832 13 LPlanef const 13 LPlanef const 0 0 1627 0 0 0 0 0 0 0 0 0 0

1954 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1955 0 0 0 0 0 0 0 0 0 0

1955 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1621 0 0 0 0 0 0 0 0 0 0

1956 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1957 0 0 0 0 0 0 0 0 0 0

1957 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1628 0 0 0 0 0 0 0 0 0 0

1958 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1959 0 0 0 0 0 0 0 0 0 0

1959 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1960 0 0 0 0 0 0 0 0 0 0

1960 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1961 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 1930 0 0 0 0 0 0 0 0 0 0

1962 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 1960 0 0 0 0 0 0 0 0 0 0

1963 9 LPlaned * 0 8576 9 LPlaned * 9 LPlaned * 0 0 1629 0 0 0 0 0 0 0 0 0 0

1964 15 LPlaned const * 0 8576 15 LPlaned const * 15 LPlaned const * 0 0 1722 0 0 0 0 0 0 0 0 0 0

1965 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 1720 0 0 0 0 0 0 0 0 0 0

1966 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 1967 0 0 0 0 0 0 0 0 0 0

1967 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 1630 0 0 0 0 0 0 0 0 0 0

1968 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 1969 0 0 0 0 0 0 0 0 0 0

1969 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 1970 0 0 0 0 0 0 0 0 0 0

1970 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1971 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 1948 0 0 0 0 0 0 0 0 0 0

1972 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 1970 0 0 0 0 0 0 0 0 0 0

1973 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1635 0 0 0 0 0 0 0 0 0 0

1974 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1729 0 0 0 0 0 0 0 0 0 0

1975 19 BoundingBox const * 0 8576 19 BoundingBox const * 19 BoundingBox const * 0 0 1976 0 0 0 0 0 0 0 0 0 0

1976 17 BoundingBox const 0 8832 17 BoundingBox const 17 BoundingBox const 0 0 1635 0 0 0 0 0 0 0 0 0 0

1977 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 1631 0 0 0 0 0 0 0 0 0 0

1978 11 LFrustumf * 0 8576 11 LFrustumf * 11 LFrustumf * 0 0 1636 0 0 0 0 0 0 0 0 0 0

1979 17 LFrustumf const * 0 8576 17 LFrustumf const * 17 LFrustumf const * 0 0 1980 0 0 0 0 0 0 0 0 0 0

1980 15 LFrustumf const 0 8832 15 LFrustumf const 15 LFrustumf const 0 0 1636 0 0 0 0 0 0 0 0 0 0

1981 11 LFrustumd * 0 8576 11 LFrustumd * 11 LFrustumd * 0 0 1637 0 0 0 0 0 0 0 0 0 0

1982 17 LFrustumd const * 0 8576 17 LFrustumd const * 17 LFrustumd const * 0 0 1983 0 0 0 0 0 0 0 0 0 0

1983 15 LFrustumd const 0 8832 15 LFrustumd const 15 LFrustumd const 0 0 1637 0 0 0 0 0 0 0 0 0 0

1984 16 LFrustum const * 0 8576 16 LFrustum const * 16 LFrustum const * 0 0 1985 0 0 0 0 0 0 0 0 0 0

1985 14 LFrustum const 0 8832 14 LFrustum const 14 LFrustum const 0 0 1638 0 0 0 0 0 0 0 0 0 0

1986 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 210
// The CS_default entry does not refer to a particular coordinate system,
// but rather to the value stored in default_coordinate_system, which in
// turn is loaded from the config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 21
// Z-Up, Right-handed
1 12 CS_yup_right 12 CS_yup_right 21
// Y-Up, Right-handed
2 11 CS_zup_left 11 CS_zup_left 20
// Z-Up, Left-handed
3 11 CS_yup_left 11 CS_yup_left 20
// Y-Up, Left-handed
4 10 CS_invalid 10 CS_invalid 156
// CS_invalid is not a coordinate system at all.  It can be used in user-
// input processing code to indicate a contradictory coordinate system
// request.
5 0 0

1987 20 BoundingHexahedron * 0 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 1642 0 0 0 0 0 0 0 0 0 0

1988 26 BoundingHexahedron const * 0 8576 26 BoundingHexahedron const * 26 BoundingHexahedron const * 0 0 1989 0 0 0 0 0 0 0 0 0 0

1989 24 BoundingHexahedron const 0 8832 24 BoundingHexahedron const 24 BoundingHexahedron const 0 0 1642 0 0 0 0 0 0 0 0 0 0

1990 14 BoundingLine * 0 8576 14 BoundingLine * 14 BoundingLine * 0 0 1643 0 0 0 0 0 0 0 0 0 0

1991 20 BoundingLine const * 0 8576 20 BoundingLine const * 20 BoundingLine const * 0 0 1992 0 0 0 0 0 0 0 0 0 0

1992 18 BoundingLine const 0 8832 18 BoundingLine const 18 BoundingLine const 0 0 1643 0 0 0 0 0 0 0 0 0 0

1993 15 BoundingPlane * 0 8576 15 BoundingPlane * 15 BoundingPlane * 0 0 1644 0 0 0 0 0 0 0 0 0 0

1994 14 LPlane const * 0 8576 14 LPlane const * 14 LPlane const * 0 0 1645 0 0 0 0 0 0 0 0 0 0

1995 21 BoundingPlane const * 0 8576 21 BoundingPlane const * 21 BoundingPlane const * 0 0 1996 0 0 0 0 0 0 0 0 0 0

1996 19 BoundingPlane const 0 8832 19 BoundingPlane const 19 BoundingPlane const 0 0 1644 0 0 0 0 0 0 0 0 0 0

1997 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1646 0 0 0 0 0 0 0 0 0 0

1998 22 BoundingSphere const * 0 8576 22 BoundingSphere const * 22 BoundingSphere const * 0 0 1999 0 0 0 0 0 0 0 0 0 0

1999 20 BoundingSphere const 0 8832 20 BoundingSphere const 20 BoundingSphere const 0 0 1646 0 0 0 0 0 0 0 0 0 0

2000 28 IntersectionBoundingVolume * 0 8576 28 IntersectionBoundingVolume * 28 IntersectionBoundingVolume * 0 0 1647 0 0 0 0 0 0 0 0 0 0

2001 34 IntersectionBoundingVolume const * 0 8576 34 IntersectionBoundingVolume const * 34 IntersectionBoundingVolume const * 0 0 2002 0 0 0 0 0 0 0 0 0 0

2002 32 IntersectionBoundingVolume const 0 8832 32 IntersectionBoundingVolume const 32 IntersectionBoundingVolume const 0 0 1647 0 0 0 0 0 0 0 0 0 0

2003 16 Mersenne const * 0 8576 16 Mersenne const * 16 Mersenne const * 0 0 2004 0 0 0 0 0 0 0 0 0 0

2004 14 Mersenne const 0 8832 14 Mersenne const 14 Mersenne const 0 0 1650 0 0 0 0 0 0 0 0 0 0

2005 10 Mersenne * 0 8576 10 Mersenne * 10 Mersenne * 0 0 1650 0 0 0 0 0 0 0 0 0 0

2006 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

2007 20 OmniBoundingVolume * 0 8576 20 OmniBoundingVolume * 20 OmniBoundingVolume * 0 0 1652 0 0 0 0 0 0 0 0 0 0

2008 21 UnionBoundingVolume * 0 8576 21 UnionBoundingVolume * 21 UnionBoundingVolume * 0 0 1653 0 0 0 0 0 0 0 0 0 0

2009 27 UnionBoundingVolume const * 0 8576 27 UnionBoundingVolume const * 27 UnionBoundingVolume const * 0 0 2010 0 0 0 0 0 0 0 0 0 0

2010 25 UnionBoundingVolume const 0 8832 25 UnionBoundingVolume const 25 UnionBoundingVolume const 0 0 1653 0 0 0 0 0 0 0 0 0 0

2011 18 Randomizer const * 0 8576 18 Randomizer const * 18 Randomizer const * 0 0 2012 0 0 0 0 0 0 0 0 0 0

2012 16 Randomizer const 0 8832 16 Randomizer const 16 Randomizer const 0 0 1654 0 0 0 0 0 0 0 0 0 0

2013 12 Randomizer * 0 8576 12 Randomizer * 12 Randomizer * 0 0 1654 0 0 0 0 0 0 0 0 0 0

2014 13 PerlinNoise * 0 8576 13 PerlinNoise * 13 PerlinNoise * 0 0 1655 0 0 0 0 0 0 0 0 0 0

2015 14 PerlinNoise2 * 0 8576 14 PerlinNoise2 * 14 PerlinNoise2 * 0 0 1656 0 0 0 0 0 0 0 0 0 0

2016 20 PerlinNoise2 const * 0 8576 20 PerlinNoise2 const * 20 PerlinNoise2 const * 0 0 2017 0 0 0 0 0 0 0 0 0 0

2017 18 PerlinNoise2 const 0 8832 18 PerlinNoise2 const 18 PerlinNoise2 const 0 0 1656 0 0 0 0 0 0 0 0 0 0

2018 14 PerlinNoise3 * 0 8576 14 PerlinNoise3 * 14 PerlinNoise3 * 0 0 1657 0 0 0 0 0 0 0 0 0 0

2019 20 PerlinNoise3 const * 0 8576 20 PerlinNoise3 const * 20 PerlinNoise3 const * 0 0 2020 0 0 0 0 0 0 0 0 0 0

2020 18 PerlinNoise3 const 0 8832 18 PerlinNoise3 const 18 PerlinNoise3 const 0 0 1657 0 0 0 0 0 0 0 0 0 0

2021 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 1714 0 0 0 0 0 0 0 0 0 0

2022 27 StackedPerlinNoise2 const * 0 8576 27 StackedPerlinNoise2 const * 27 StackedPerlinNoise2 const * 0 0 2023 0 0 0 0 0 0 0 0 0 0

2023 25 StackedPerlinNoise2 const 0 8832 25 StackedPerlinNoise2 const 25 StackedPerlinNoise2 const 0 0 1714 0 0 0 0 0 0 0 0 0 0

2024 21 StackedPerlinNoise3 * 0 8576 21 StackedPerlinNoise3 * 21 StackedPerlinNoise3 * 0 0 1715 0 0 0 0 0 0 0 0 0 0

2025 27 StackedPerlinNoise3 const * 0 8576 27 StackedPerlinNoise3 const * 27 StackedPerlinNoise3 const * 0 0 2026 0 0 0 0 0 0 0 0 0 0

2026 25 StackedPerlinNoise3 const 0 8832 25 StackedPerlinNoise3 const 25 StackedPerlinNoise3 const 0 0 1715 0 0 0 0 0 0 0 0 0 0

2027 14 Triangulator * 0 8576 14 Triangulator * 14 Triangulator * 0 0 1716 0 0 0 0 0 0 0 0 0 0

2028 20 Triangulator const * 0 8576 20 Triangulator const * 20 Triangulator const * 0 0 2029 0 0 0 0 0 0 0 0 0 0

2029 18 Triangulator const 0 8832 18 Triangulator const 18 Triangulator const 0 0 1716 0 0 0 0 0 0 0 0 0 0

2030 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 1717 0 0 0 0 0 0 0 0 0 0

2031 15 Triangulator3 * 0 8576 15 Triangulator3 * 15 Triangulator3 * 0 0 1719 0 0 0 0 0 0 0 0 0 0

2032 21 Triangulator3 const * 0 8576 21 Triangulator3 const * 21 Triangulator3 const * 0 0 2033 0 0 0 0 0 0 0 0 0 0

2033 19 Triangulator3 const 0 8832 19 Triangulator3 const 19 Triangulator3 const 0 0 1719 0 0 0 0 0 0 0 0 0 0

2034 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 1732 0 0 0 0 0 0 0 0 0 0

2035 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1755 0 0 0 0 0 0 0 0 0 0

2036 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 2037 0 0 0 0 0 0 0 0 0 0

2037 12 LQuaterniond 0 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

2038 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 2039 0 0 0 0 0 0 0 0 0 0

2039 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

0
15
2040 3 min 0 2 1620 1341 0 0 0 0 0 0 0 25 FiniteBoundingVolume::min 0

2041 3 max 0 2 1620 1342 0 0 0 0 0 0 0 25 FiniteBoundingVolume::max 0

2042 6 volume 0 2 1622 1343 0 0 0 0 0 0 0 28 FiniteBoundingVolume::volume 0

2043 6 points 0 66 1620 1417 0 0 0 0 1416 0 0 19 BoundingBox::points 0

2044 6 planes 0 66 1631 1419 0 0 0 0 1418 0 0 19 BoundingBox::planes 0

2045 6 points 0 66 1620 1441 0 0 0 0 1440 0 0 26 BoundingHexahedron::points 0

2046 6 planes 0 66 1631 1443 0 0 0 0 1442 0 0 26 BoundingHexahedron::planes 0

2047 5 plane 0 2 1645 1458 0 0 0 0 0 0 0 20 BoundingPlane::plane 0

2048 6 center 0 6 1620 1465 1467 0 0 0 0 0 0 22 BoundingSphere::center 0

2049 6 radius 0 6 1622 1466 1468 0 0 0 0 0 0 22 BoundingSphere::radius 0

2050 10 components 0 66 1648 1476 0 0 0 0 1475 0 0 38 IntersectionBoundingVolume::components 0

2051 10 components 0 66 1648 1494 0 0 0 0 1493 0 0 31 UnionBoundingVolume::components 0

2052 8 vertices 0 66 1717 1541 0 0 0 0 1540 0 0 22 Triangulator::vertices 0

2053 8 vertices 0 66 1720 1557 0 0 0 0 1556 0 0 23 Triangulator3::vertices 0

2054 5 plane 0 2 1722 1559 0 0 0 0 0 0 0 20 Triangulator3::plane 0

8
2055 10 get_points 0 1416 1417 23 BoundingBox::get_points 0

2056 10 get_planes 0 1418 1419 23 BoundingBox::get_planes 0

2057 10 get_points 0 1440 1441 30 BoundingHexahedron::get_points 0

2058 10 get_planes 0 1442 1443 30 BoundingHexahedron::get_planes 0

2059 14 get_components 0 1475 1476 42 IntersectionBoundingVolume::get_components 0

2060 14 get_components 0 1493 1494 35 UnionBoundingVolume::get_components 0

2061 12 get_vertices 0 1540 1541 26 Triangulator::get_vertices 0

2062 12 get_vertices 0 1556 1557 27 Triangulator3::get_vertices 0

